If you're interested in contributing to Riml, thanks! Here's a brief overview
of how it works.

Brief Overview
==============

1. The lexer lexes riml source into Array of tokens.

2. The parser, generated by Racc from the 'grammar.y' file, creates an
Abstract Syntax Tree from the nodes in the 'nodes.rb' file.

3. The AST_Rewriter rewrites portions of the tree. These portions are
Riml-only constructs, and mainly it's rewriting Riml-only syntax nodes into
VimL-compatible syntax-nodes. For example, one of the ways a ClassNode is
rewritten here is by adding an 'initialize' function to it if it doesn't have
one already. Once this is done, onto the compiler!

4. The compiler, implemented using the Visitor pattern, visits the nodes in a
top-down fashion starting with the root, and these nodes append their compiled
output (VimL) to their parent node's output. After all is done, the root node (only
node without a parent) is left with the full output.

Pull Requests
=============

When appropriate, please add unit tests for features or bugs. Also, please
update all documentation related to the changes that you've made, including
comments in the source code. If you don't know where all the affected areas
might be, don't hesitate to ask.

For pure documentation-related changes, please put '[ci skip]' somewhere in the
commit message so that Travis-ci skips the build.

Note
====

If you're working on the grammar file, make sure to re-create the parser after
each change before testing. This is done by going to the 'lib' directory and
typing:

`racc -o parser.rb grammar.y`

