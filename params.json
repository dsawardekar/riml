{"tagline":"Relaxed Vimscript","google":"","body":"[![Build Status](https://travis-ci.org/luke-gru/riml.png)](https://travis-ci.org/luke-gru/riml)\r\n\r\nRiml, a relaxed version of Vimscript\r\n====================================\r\n\r\nRiml aims to be a superset of VimL that includes some nice features that I\r\nenjoy in other scripting languages, including classes, string interpolation,\r\nheredocs, default case-sensitive string comparison and other things most\r\nprogrammers take for granted. Also, Riml takes some liberties and provides\r\nsome syntactic sugar for lots of VimL constructs. To see how Riml constructs\r\nare compiled into VimL, just take a look in this README. The left side is Riml,\r\nand the right side is the equivalent VimL after compilation.\r\n\r\nVariables\r\n---------\r\n\r\n    count = 1                     let s:count = 1\r\n    while count < 5               while s:count < 5\r\n      source other.vim              source other.vim\r\n      count += 1                    let s:count += 1\r\n    end                           endwhile\r\n\r\nIf you don't specify a scope modifier, it's script local by default in the\r\nglobal namespace. Within a function, variables without scope modifiers are plain\r\nold local variables.\r\n\r\n###globally\r\n\r\n    a = 3                         let s:a = 3\r\n\r\n###locally\r\n\r\n    a = 3                         let a = 3\r\n\r\n###Freeing memory\r\n\r\n    a = nil                       unlet! a\r\n\r\n###Checking for existence\r\n\r\n    unless s:callcount?                    if !exists(\"s:callcount\")\r\n      callcount = 0                         let s:callcount = 0\r\n    end                                    endif\r\n    callcount += 1                         let s:callcount += 1\r\n    puts \"called #{callcount} times\"       echo \"called \" . s:callcount . \" times\"\r\n\r\nComparisons\r\n-----------\r\n\r\n    a = \"hi\" == \"hi\"                      if (\"hi\" ==# \"hi\")\r\n                                            let s:a = 1\r\n                                          else\r\n                                            let s:a = 0\r\n                                          endif\r\n\r\nHeredocs\r\n--------\r\n\r\n    msg = <<EOS                           let s:msg = \"a vim heredoc!\\n\"\r\n    a vim heredoc!\r\n    EOS\r\n\r\nClasses\r\n-------\r\n\r\n###Riml example 1\r\n\r\n    class MyClass\r\n      def initialize(arg1, arg2, *args)\r\n      end\r\n\r\n      defm getData\r\n        return self.data\r\n      end\r\n\r\n      defm getOtherData\r\n        return self.otherData\r\n      end\r\n    end\r\n\r\n###Viml example 1\r\n\r\n\r\n    function! g:MyClassConstructor(arg1, arg2, ...)\r\n      let myClassObj = {}\r\n      function! myClassObj.getData() dict\r\n        return self.data\r\n      endfunction\r\n      function! myClassObj.getOtherData() dict\r\n        return self.otherData\r\n      endfunction\r\n      return myClassObj\r\n    endfunction\r\n\r\n###Riml example 2\r\n\r\n    class Translation\r\n      def initialize(input)\r\n        self.input = input\r\n      end\r\n    end\r\n\r\n    class FrenchToEnglishTranslation < Translation\r\n      defm translate\r\n        if (self.input == \"Bonjour!\")\r\n          echo \"Hello!\"\r\n        else\r\n          echo \"Sorry, I don't know that word.\"\r\n        end\r\n      end\r\n    end\r\n\r\n    translation = new FrenchToEnglishTranslation(\"Bonjour!\")\r\n    translation.translate()\r\n\r\n###VimL example 2\r\n\r\n    function! g:TranslationConstructor(input)\r\n      let translationObj = {}\r\n      let translationObj.input = a:input\r\n      return translationObj\r\n    endfunction\r\n\r\n    function! g:FrenchToEnglishTranslationConstructor(input)\r\n      let frenchToEnglishTranslationObj = {}\r\n      let translationObj = g:TranslationConstructor(a:input)\r\n      call extend(frenchToEnglishTranslationObj, translationObj)\r\n      function! frenchToEnglishTranslationObj.translate() dict\r\n        if (self.input ==# \"Bonjour!\")\r\n          echo \"Hello!\"\r\n        else\r\n          echo \"Sorry, I don't know that word.\"\r\n        endif\r\n      endfunction\r\n      return frenchToEnglishTranslationObj\r\n    endfunction\r\n\r\n    let s:translation = g:FrenchToEnglishTranslationConstructor(\"Bonjour!\")\r\n    call s:translation.translate()\r\n\r\nHacking\r\n-------\r\n\r\nMake sure to generate the parser before running tests or developing on Riml.\r\nAlso, make sure to regenerate the parser after modifiying the grammar file.\r\n\r\n1. `bundle install`\r\n2. Go to the lib directory and enter `racc -o parser.rb grammar.y`\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Riml"}