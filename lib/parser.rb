#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require File.expand_path("../ast_rewriter", __FILE__)
  require File.expand_path("../errors", __FILE__)
module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 429)
  # This code will be put as-is in the parser class

  # parses tokens or code into output nodes
  def parse(object, rewrite_ast = true)
    if tokens?(object)
      @tokens = object
    elsif code?(object)
      @lexer = Riml::Lexer.new(object)
    end
    ast = do_parse
    return ast if rewrite_ast == false
    AST_Rewriter.new(ast).rewrite
  end

  alias do_parse_without_error_handling do_parse
  def do_parse_with_error_handling
    do_parse_without_error_handling
  rescue Racc::ParseError => e
    raise unless @lexer
    raise Riml::ParseError,  "line #{@lexer.lineno}: #{e.message}"
  end
  alias do_parse do_parse_with_error_handling

  def next_token
    return @tokens.shift unless @lexer
    @lexer.next_token
  end

  private
  def tokens?(object)
    Array === object
  end

  def code?(object)
    String === object
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'117,336,134,118,348,134,175,362,246,56,57,239,247,290,-152,-152,56,57',
'123,238,248,248,120,32,349,175,164,363,32,153,58,48,129,32,253,32,276',
'58,120,151,302,120,111,112,310,107,108,109,110,113,95,96,97,101,102',
'103,98,99,100,104,105,106,82,84,83,89,91,90,92,94,93,86,88,87,115,116',
'81,80,119,117,53,155,118,33,34,51,155,53,33,34,85,114,155,33,34,33,34',
'175,311,44,46,45,271,48,48,41,42,43,273,172,85,114,229,49,243,-88,253',
'58,257,129,345,111,112,127,107,108,109,110,113,95,96,97,101,102,103',
'98,99,100,104,105,106,82,84,83,89,91,90,92,94,93,86,88,87,115,116,81',
'80,119,117,51,51,118,53,285,155,-152,155,-88,155,85,114,248,120,123',
'58,314,129,120,44,46,45,316,315,48,41,42,43,358,58,357,129,162,49,127',
'164,111,112,111,112,305,111,112,175,107,108,109,110,113,95,96,97,101',
'102,103,98,99,100,104,105,106,82,84,83,89,91,90,92,94,93,86,88,87,115',
'116,81,80,119,117,53,51,118,53,120,85,114,85,114,237,85,114,257,176',
'281,236,257,319,321,44,46,45,85,114,48,41,42,43,58,257,129,299,257,49',
'327,111,112,111,112,111,112,111,112,320,107,108,109,110,113,95,96,97',
'101,102,103,98,99,100,104,105,106,82,84,83,89,91,90,92,94,93,86,88,87',
'115,116,81,80,119,117,227,51,118,53,85,114,85,114,85,114,85,114,257',
'58,331,129,46,45,180,297,227,296,175,181,136,224,292,224,224,249,248',
'111,112,328,107,108,109,110,113,334,249,111,112,288,107,108,109,110',
'113,95,96,97,101,102,103,98,99,100,104,105,106,82,84,83,89,91,90,92',
'94,93,86,88,87,115,116,81,80,119,117,85,114,118,329,231,224,333,-151',
'233,234,85,114,248,249,308,240,123,124,270,120,175,269,175,175,175,120',
'242,58,258,244,175,111,112,257,107,108,109,110,113,350,227,111,112,351',
'107,108,109,110,113,95,96,97,101,102,103,98,99,100,104,105,106,82,84',
'83,89,91,90,92,94,93,86,88,87,115,116,81,80,119,117,85,114,118,337,228',
'352,353,175,355,356,85,114,245,359,78,334,254,334,127,175,366,175,368',
'334,370,175,372,,,,,111,112,,107,108,109,110,113,,,111,112,,107,108',
'109,110,113,95,96,97,101,102,103,98,99,100,104,105,106,82,84,83,89,91',
'90,92,94,93,86,88,87,115,116,81,80,119,117,85,114,118,335,,,,,,,85,114',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,111,112,,107,108,109,110,113,95,96,97,101',
'102,103,98,99,100,104,105,106,82,84,83,89,91,90,92,94,93,86,88,87,115',
'116,81,80,119,117,,262,118,,,,,,,,85,114,,,,,,,,,,,263,,,,,,,,,,,,,',
',,,,,111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100,104',
'105,106,82,84,83,89,91,90,92,94,93,86,88,87,115,116,81,80,119,117,,266',
'118,,,,,,,,85,114,,,,,,,,,,,263,,,,,,,,,111,112,,107,108,109,110,113',
',,111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100,104,105',
'106,82,84,83,89,91,90,92,94,93,86,88,87,115,116,81,80,119,117,85,114',
'118,,,,,,,,85,114,,,,,,,,,,,175,,,,,,,,,111,112,,107,108,109,110,113',
',,111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100,104,105',
'106,82,84,83,89,91,90,92,94,93,86,88,87,115,116,81,80,119,117,85,114',
'118,,,,,,,,85,114,,,,,,,,,,,175,,,,,,,,,111,112,,107,108,109,110,113',
',,111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100,104,105',
'106,82,84,83,89,91,90,92,94,93,86,88,87,115,116,81,80,119,117,85,114',
'118,,,,,,,,85,114,,,,,,,,,,,,,,,,,,,,111,112,,107,108,109,110,113,,',
'111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100,104,105',
'106,82,84,83,89,91,90,92,94,93,86,88,87,115,116,81,80,119,117,85,114',
'118,,,,,,,,85,114,,,,,,,,,,,,,,,,,,,,111,112,,107,108,109,110,113,,',
'111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100,104,105',
'106,82,84,83,89,91,90,92,94,93,86,88,87,115,116,81,80,119,117,85,114',
'118,,,,,,,,85,114,,,,,,,,,,,,,,,,,,,,111,112,,107,108,109,110,113,,',
'111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100,104,105',
'106,82,84,83,89,91,90,92,94,93,86,88,87,115,116,81,80,119,117,85,114',
'118,,,,,,,,85,114,,,,,,,,,,,,,,,,,,,,111,112,,107,108,109,110,113,,',
'111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100,104,105',
'106,82,84,83,89,91,90,92,94,93,86,88,87,115,116,81,80,119,117,85,114',
'118,,,,323,,,,85,114,,,,,,,,,,,,,,,,,,,,111,112,,107,108,109,110,113',
',,111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100,104,105',
'106,82,84,83,89,91,90,92,94,93,86,88,87,115,116,81,80,119,117,85,114',
'118,,,,,,,,85,114,,,,,,,,,,,,,,,,,,,,111,112,,107,108,109,110,113,,',
'111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100,104,105',
'106,82,84,83,89,91,90,92,94,93,86,88,87,115,116,81,80,119,117,85,114',
'118,,,,,,,,85,114,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,111,112,,107,108,109',
'110,113,95,96,97,101,102,103,98,99,100,104,105,106,82,84,83,89,91,90',
'92,94,93,86,88,87,115,116,81,80,119,117,,,118,,,,,,,278,85,114,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,111,112,,107,108,109,110,113,95,96,97,101,102',
'103,98,99,100,104,105,106,82,84,83,89,91,90,92,94,93,86,88,87,115,116',
'81,80,119,117,,,118,,,,279,,,,85,114,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,111',
'112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100,104,105,106',
'82,84,83,89,91,90,92,94,93,86,88,87,115,116,81,80,119,,117,,232,118',
',,,,,,85,114,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,111,112,,107,108,109,110',
'113,95,96,97,101,102,103,98,99,100,104,105,106,82,84,83,89,91,90,92',
'94,93,86,88,87,115,116,81,80,119,,66,,232,67,,68,71,69,70,73,85,114',
'72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58',
'49,59,65,,,,,111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99',
'100,104,105,106,82,84,83,89,91,90,92,94,93,86,88,87,115,116,81,,29,',
'66,,51,67,53,68,71,69,70,73,85,114,72,,62,,56,57,74,75,63,76,64,,44',
'46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,111,112,,107,108,109',
'110,113,95,96,97,101,102,103,98,99,100,104,105,106,82,84,83,89,91,90',
'92,94,93,86,88,87,115,116,,,29,,66,,51,67,53,68,71,69,70,73,85,114,72',
',62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49',
'59,65,,,,,111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100',
'104,105,106,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,85,114,72',
',62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49',
'59,65,,,,,111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100',
'104,105,106,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,85,114,72',
',62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49',
'59,65,,,,,111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100',
'104,105,106,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,85,114,72',
',62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49',
'59,65,,,,,111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100',
'104,105,106,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,85,114,72',
',62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49',
'59,65,,,,,111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100',
'104,105,106,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,85,114,72',
',62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49',
'59,65,,,,,,,,111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99',
'100,104,105,106,,,,,,,,,,,,,,29,,,,51,66,53,,67,-183,68,71,69,70,73',
'85,114,72,,62,,56,57,74,75,63,76,64,32,44,46,45,47,77,48,41,42,43,54',
'60,,,58,49,59,65,,,,,,,,111,112,,107,108,109,110,113,95,96,97,101,102',
'103,98,99,100,104,105,106,,,,,,,,,,,,,,29,,33,34,51,66,53,,67,,68,71',
'69,70,73,85,114,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42',
'43,54,60,-88,,58,49,59,65,,,,,111,112,,107,108,109,110,113,95,96,97',
'101,102,103,98,99,100,104,105,106,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68',
'71,69,70,73,85,114,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41',
'42,43,54,60,,,58,49,59,65,,,,,111,112,,107,108,109,110,113,95,96,97',
'101,102,103,98,99,100,104,105,106,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68',
'71,69,70,73,85,114,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41',
'42,43,54,60,-88,,58,49,59,65,,,,,111,112,,107,108,109,110,113,95,96',
'97,101,102,103,98,99,100,104,105,106,,,,,,,,,,,,,,,,,29,,66,,51,67,53',
'68,71,69,70,73,85,114,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48',
'41,42,43,54,60,,,58,49,59,65,,,,,111,112,,107,108,109,110,113,95,96',
'97,101,102,103,98,99,100,104,105,106,,,,,,,,,,,,,,,,,29,,66,,51,67,53',
'68,71,69,70,73,85,114,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48',
'41,42,43,54,60,,,58,49,59,65,,,,,111,112,,107,108,109,110,113,95,96',
'97,101,102,103,98,99,100,104,105,106,,,,,,,,,,,,,,,,,29,,66,,51,67,53',
'68,71,69,70,73,85,114,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48',
'41,42,43,54,60,,,58,49,59,65,,,,,111,112,,107,108,109,110,113,95,96',
'97,101,102,103,98,99,100,104,105,106,82,84,83,89,91,90,92,94,93,86,88',
'87,,,,,29,,66,,51,67,53,68,71,69,70,73,85,114,72,,62,,56,57,74,75,63',
'76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,111,112,,107',
'108,109,110,113,95,96,97,101,102,103,98,99,100,104,105,106,82,84,83',
'89,91,90,92,94,93,86,88,87,,,,,29,,66,,51,67,53,68,71,69,70,73,85,114',
'72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58',
'49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68',
'71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42',
'43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66',
',51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47',
'77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64',
',44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57',
'74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,',
',72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58',
'49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68',
'71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42',
'43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66',
',51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47',
'77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64',
',44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57',
'74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,',
',72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58',
'49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68',
'71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42',
'43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66',
',51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47',
'77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64',
',44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57',
'74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,',
',72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58',
'49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68',
'71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42',
'43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66',
',51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47',
'77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64',
',44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57',
'74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,',
',72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58',
'49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68',
'71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42',
'43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66',
',51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47',
'77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64',
',44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57',
'74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,',
',72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58',
'49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68',
'71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42',
'43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66',
',51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47',
'77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64',
',44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57',
'74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,',
',72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58',
'49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68',
'71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42',
'43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66',
',51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47',
'77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64',
',44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57',
'74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,',
',72,,62,,56,57,74,75,63,76,64,32,44,46,45,47,77,48,41,42,43,54,60,,',
'58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,33,34,51,66',
'53,,67,,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77',
'48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,',
'44,46,45,47,77,48,41,42,43,54,60,-88,,58,49,59,65,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57',
'74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,',
',72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,-88',
',58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53',
'68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41',
'42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29',
',66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45',
'47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76',
'64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,111,112,,107,108',
'109,110,113,95,96,97,101,102,103,98,99,100,104,105,106,82,84,83,89,91',
'90,92,94,93,86,88,87,115,116,81,80,119,,,,29,,,,51,283,53,66,85,114',
'67,,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48',
'41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44',
'46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75',
'63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62',
',56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70',
'73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60',
'-88,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,159,,66,,51',
'67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77',
'48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,',
'44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57,74',
'75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72',
',62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,-88,,58',
'49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68',
'71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42',
'43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66',
',51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47',
'77,48,41,42,43,54,60,-88,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76',
'64,32,44,46,45,47,77,48,41,42,43,54,60,-88,,58,49,59,65,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,33,34,51,66,53,,67,,68,71,69,70,73,',
',72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42,43,54,60,,,58',
'49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68',
'71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47,77,48,41,42',
'43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,66',
',51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46,45,47',
'77,48,41,42,43,54,60,,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64',
',44,46,45,47,77,48,41,42,43,54,60,-88,,58,49,59,65,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,29,,66,,51,67,53,68,71,69,70,73,,,72,,62,,56',
'57,74,75,63,76,64,32,44,46,45,47,77,48,41,42,43,54,60,,,58,49,59,65',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,33,34,51,66,53,,67,,68,71',
'69,70,73,,,72,,62,,56,57,74,75,63,76,64,32,44,46,45,47,77,48,41,42,43',
'54,60,-88,,58,49,59,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,33',
'34,51,66,53,,67,,68,71,69,70,73,,,72,,62,,56,57,74,75,63,76,64,,44,46',
'45,47,77,48,41,42,43,54,60,-88,,58,49,59,65,111,112,,107,108,109,110',
'113,95,96,97,101,102,103,98,99,100,104,105,106,82,84,83,89,91,90,92',
'94,93,86,88,87,115,116,81,80,119,,,,29,,,,51,,53,,85,114,111,112,,107',
'108,109,110,113,95,96,97,101,102,103,98,99,100,104,105,106,82,84,83',
'89,91,90,92,94,93,86,88,87,115,116,81,80,119,,,,,,,,,,,,85,114,111,112',
',107,108,109,110,113,95,96,97,101,102,103,98,99,100,104,105,106,82,84',
'83,89,91,90,92,94,93,86,88,87,115,116,81,80,119,,,,,,,,,,,,85,114,111',
'112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100,104,105,106',
'82,84,83,89,91,90,92,94,93,86,88,87,115,116,81,80,119,,,,,,,,,,,,85',
'114,111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99,100,104',
'105,106,82,84,83,89,91,90,92,94,93,86,88,87,115,116,81,80,119,,,,,,',
',,,,,85,114,111,112,,107,108,109,110,113,95,96,97,101,102,103,98,99',
'100,104,105,106,82,84,83,89,91,90,92,94,93,86,88,87,115,116,81,80,119',
',,,,,,,,,,,85,114,111,112,,107,108,109,110,113,95,96,97,101,102,103',
'98,99,100,104,105,106,82,84,83,89,91,90,92,94,93,86,88,87,115,116,81',
'80,119,,,,,,,,,,,,85,114,111,112,,107,108,109,110,113,95,96,97,101,102',
'103,98,99,100,104,105,106,82,84,83,89,91,90,92,94,93,86,88,87,115,116',
'81,80,119,,,,,,,,,,,,85,114,111,112,,107,108,109,110,113,95,96,97,101',
'102,103,98,99,100,104,105,106,82,84,83,89,91,90,92,94,93,86,88,87,115',
'116,81,80,119,,,,,,,,,,,,85,114,111,112,,107,108,109,110,113,95,96,97',
'101,102,103,98,99,100,104,105,106,82,84,83,89,91,90,92,94,93,86,88,87',
'115,116,81,80,119,,,,,,,,,,,,85,114,111,112,,107,108,109,110,113,95',
'96,97,101,102,103,98,99,100,104,105,106,82,84,83,89,91,90,92,94,93,86',
'88,87,115,116,81,80,119,,,,,,,,,,,,85,114,111,112,,107,108,109,110,113',
'95,96,97,101,102,103,98,99,100,104,105,106,82,84,83,89,91,90,92,94,93',
'86,88,87,115,116,81,80,119,,,,,,,,,,,,85,114' ]
        racc_action_table = arr = ::Array.new(8795, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'161,307,144,161,333,39,176,358,152,75,75,141,153,243,153,243,54,54,146',
'141,153,243,146,307,333,273,60,358,274,55,75,273,75,2,157,360,176,54',
'144,54,260,39,161,161,267,161,161,161,161,161,161,161,161,161,161,161',
'161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161',
'161,161,161,161,161,161,166,75,55,166,307,307,54,157,54,274,274,161',
'161,260,2,2,360,360,316,268,239,239,239,174,316,239,239,239,239,174',
'72,215,215,128,239,149,15,177,15,330,15,330,166,166,145,166,166,166',
'166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166',
'166,166,166,166,166,166,166,166,166,166,166,166,166,166,322,72,239,322',
'239,239,128,253,149,15,177,166,166,253,145,8,248,272,248,8,240,240,240',
'272,272,240,240,240,240,347,56,347,56,59,240,14,61,210,210,211,211,261',
'322,322,73,322,322,322,322,322,322,322,322,322,322,322,322,322,322,322',
'322,322,322,322,322,322,322,322,322,322,322,322,322,322,322,322,322',
'322,322,3,56,240,3,240,14,210,210,211,211,137,322,322,225,74,225,137',
'277,275,277,53,53,53,214,214,53,53,53,53,163,256,163,256,293,53,293',
'212,212,213,213,216,216,3,3,276,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3',
'3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,313,241,53,313,53,212,212,213,213,216',
'216,3,3,298,155,298,155,47,47,76,252,251,250,313,78,50,121,245,122,126',
'230,229,205,205,295,205,205,205,205,205,304,154,313,313,241,313,313',
'313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313',
'313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,312,205',
'205,312,296,129,132,304,154,133,134,313,313,302,303,265,143,178,9,173',
'6,315,172,312,318,320,147,148,165,162,150,332,198,198,160,198,198,198',
'198,198,336,125,312,312,338,312,312,312,312,312,312,312,312,312,312',
'312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312',
'312,312,312,312,312,312,312,309,198,198,309,309,125,339,340,342,344',
'346,312,312,151,348,1,357,158,359,156,361,362,364,365,366,367,369,371',
',,,,199,199,,199,199,199,199,199,,,309,309,,309,309,309,309,309,309',
'309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309',
'309,309,309,309,309,309,309,309,309,309,309,306,199,199,306,306,,,,',
',,309,309,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,306,306,,306,306,306,306,306',
'306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306',
'306,306,306,306,306,306,306,306,306,306,306,306,168,,168,168,,,,,,,',
'306,306,,,,,,,,,,,168,,,,,,,,,,,,,,,,,,,168,168,,168,168,168,168,168',
'168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168',
'168,168,168,168,168,168,168,168,168,168,168,168,169,,169,169,,,,,,,',
'168,168,,,,,,,,,,,169,,,,,,,,,201,201,,201,201,201,201,201,,,169,169',
',169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169',
'169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169',
'170,201,201,170,,,,,,,,169,169,,,,,,,,,,,170,,,,,,,,,202,202,,202,202',
'202,202,202,,,170,170,,170,170,170,170,170,170,170,170,170,170,170,170',
'170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170',
'170,170,170,170,170,171,202,202,171,,,,,,,,170,170,,,,,,,,,,,171,,,',
',,,,,203,203,,203,203,203,203,203,,,171,171,,171,171,171,171,171,171',
'171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171',
'171,171,171,171,171,171,171,171,171,171,171,182,203,203,182,,,,,,,,171',
'171,,,,,,,,,,,,,,,,,,,,204,204,,204,204,204,204,204,,,182,182,,182,182',
'182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182',
'182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,138,204',
'204,138,,,,,,,,182,182,,,,,,,,,,,,,,,,,,,,206,206,,206,206,206,206,206',
',,138,138,,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138',
'138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138',
'138,138,284,206,206,284,,,,,,,,138,138,,,,,,,,,,,,,,,,,,,,207,207,,207',
'207,207,207,207,,,284,284,,284,284,284,284,284,284,284,284,284,284,284',
'284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284',
'284,284,284,284,284,284,280,207,207,280,,,,,,,,284,284,,,,,,,,,,,,,',
',,,,,,208,208,,208,208,208,208,208,,,280,280,,280,280,280,280,280,280',
'280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280',
'280,280,280,280,280,280,280,280,280,280,280,188,208,208,188,,,,280,',
',,280,280,,,,,,,,,,,,,,,,,,,,209,209,,209,209,209,209,209,,,188,188',
',188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188',
'188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188',
'217,209,209,217,,,,,,,,188,188,,,,,,,,,,,,,,,,,,,,200,200,,200,200,200',
'200,200,,,217,217,,217,217,217,217,217,217,217,217,217,217,217,217,217',
'217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217',
'217,217,217,217,222,200,200,222,,,,,,,,217,217,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,222,222,,222,222,222,222,222,222,222,222,222,222,222,222,222',
'222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222',
'222,222,222,222,223,,,223,,,,,,,222,222,222,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,223,223,,223,223,223,223,223,223,223,223,223,223,223,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223',
'223,223,223,131,,,131,,,,223,,,,223,223,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',131,131,,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131',
'131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131',
'131,131,,255,,131,255,,,,,,,131,131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,255',
'255,,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255',
'255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255',
'255,,119,,255,119,,119,119,119,119,119,255,255,119,,119,,119,119,119',
'119,119,119,119,,119,119,119,119,119,119,119,119,119,119,119,,,119,119',
'119,119,,,,,183,183,,183,183,183,183,183,183,183,183,183,183,183,183',
'183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183',
'183,183,183,,119,,66,,119,66,119,66,66,66,66,66,183,183,66,,66,,66,66',
'66,66,66,66,66,,66,66,66,66,66,66,66,66,66,66,66,,,66,66,66,66,,,,,184',
'184,,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184',
'184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,,,66,,67',
',66,67,66,67,67,67,67,67,184,184,67,,67,,67,67,67,67,67,67,67,,67,67',
'67,67,67,67,67,67,67,67,67,,,67,67,67,67,,,,,185,185,,185,185,185,185',
'185,185,185,185,185,185,185,185,185,185,185,185,185,,,,,,,,,,,,,,,,',
'67,,68,,67,68,67,68,68,68,68,68,185,185,68,,68,,68,68,68,68,68,68,68',
',68,68,68,68,68,68,68,68,68,68,68,,,68,68,68,68,,,,,186,186,,186,186',
'186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,,,,,,,,',
',,,,,,,,68,,71,,68,71,68,71,71,71,71,71,186,186,71,,71,,71,71,71,71',
'71,71,71,,71,71,71,71,71,71,71,71,71,71,71,,,71,71,71,71,,,,,187,187',
',187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187',
',,,,,,,,,,,,,,,,71,,262,,71,262,71,262,262,262,262,262,187,187,262,',
'262,,262,262,262,262,262,262,262,,262,262,262,262,262,262,262,262,262',
'262,262,,,262,262,262,262,,,,,189,189,,189,189,189,189,189,189,189,189',
'189,189,189,189,189,189,189,189,189,,,,,,,,,,,,,,,,,262,,258,,262,258',
'262,258,258,258,258,258,189,189,258,,258,,258,258,258,258,258,258,258',
',258,258,258,258,258,258,258,258,258,258,258,,,258,258,258,258,,,,,190',
'190,,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190',
'190,,,,,,,,,,,,,,,,,258,,257,,258,257,258,257,257,257,257,257,190,190',
'257,,257,,257,257,257,257,257,257,257,,257,257,257,257,257,257,257,257',
'257,257,257,,,257,257,257,257,,,,,,,,191,191,,191,191,191,191,191,191',
'191,191,191,191,191,191,191,191,191,191,191,,,,,,,,,,,,,,257,,,,257',
'263,257,,263,263,263,263,263,263,263,191,191,263,,263,,263,263,263,263',
'263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,,,263,263',
'263,263,,,,,,,,192,192,,192,192,192,192,192,192,192,192,192,192,192',
'192,192,192,192,192,192,,,,,,,,,,,,,,263,,263,263,263,254,263,,254,',
'254,254,254,254,254,192,192,254,,254,,254,254,254,254,254,254,254,,254',
'254,254,254,254,254,254,254,254,254,254,254,,254,254,254,254,,,,,193',
'193,,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,,,,,,,,,,,,,,,,,254,,247,,254,247,254,247,247,247,247,247,193,193',
'247,,247,,247,247,247,247,247,247,247,,247,247,247,247,247,247,247,247',
'247,247,247,,,247,247,247,247,,,,,194,194,,194,194,194,194,194,194,194',
'194,194,194,194,194,194,194,194,194,194,,,,,,,,,,,,,,,,,247,,159,,247',
'159,247,159,159,159,159,159,194,194,159,,159,,159,159,159,159,159,159',
'159,,159,159,159,159,159,159,159,159,159,159,159,159,,159,159,159,159',
',,,,195,195,,195,195,195,195,195,195,195,195,195,195,195,195,195,195',
'195,195,195,,,,,,,,,,,,,,,,,159,,80,,159,80,159,80,80,80,80,80,195,195',
'80,,80,,80,80,80,80,80,80,80,,80,80,80,80,80,80,80,80,80,80,80,,,80',
'80,80,80,,,,,196,196,,196,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,,,,,,,,,,,,,,,,,80,,81,,80,81,80,81,81,81,81,81',
'196,196,81,,81,,81,81,81,81,81,81,81,,81,81,81,81,81,81,81,81,81,81',
'81,,,81,81,81,81,,,,,197,197,,197,197,197,197,197,197,197,197,197,197',
'197,197,197,197,197,197,197,,,,,,,,,,,,,,,,,81,,82,,81,82,81,82,82,82',
'82,82,197,197,82,,82,,82,82,82,82,82,82,82,,82,82,82,82,82,82,82,82',
'82,82,82,,,82,82,82,82,,,,,218,218,,218,218,218,218,218,218,218,218',
'218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218',
'218,218,218,218,,,,,82,,83,,82,83,82,83,83,83,83,83,218,218,83,,83,',
'83,83,83,83,83,83,83,,83,83,83,83,83,83,83,83,83,83,83,,,83,83,83,83',
',,,,219,219,,219,219,219,219,219,219,219,219,219,219,219,219,219,219',
'219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,,,,,83,',
'84,,83,84,83,84,84,84,84,84,219,219,84,,84,,84,84,84,84,84,84,84,,84',
'84,84,84,84,84,84,84,84,84,84,,,84,84,84,84,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,84,,85,,84,85,84,85,85,85,85,85,,,85,,85,,85,85,85,85',
'85,85,85,,85,85,85,85,85,85,85,85,85,85,85,,,85,85,85,85,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,85,,86,,85,86,85,86,86,86,86,86,,,86,,86',
',86,86,86,86,86,86,86,,86,86,86,86,86,86,86,86,86,86,86,,,86,86,86,86',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,86,,87,,86,87,86,87,87,87,87',
'87,,,87,,87,,87,87,87,87,87,87,87,,87,87,87,87,87,87,87,87,87,87,87',
',,87,87,87,87,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,87,,88,,87,88',
'87,88,88,88,88,88,,,88,,88,,88,88,88,88,88,88,88,,88,88,88,88,88,88',
'88,88,88,88,88,,,88,88,88,88,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',88,,89,,88,89,88,89,89,89,89,89,,,89,,89,,89,89,89,89,89,89,89,,89',
'89,89,89,89,89,89,89,89,89,89,,,89,89,89,89,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,89,,90,,89,90,89,90,90,90,90,90,,,90,,90,,90,90,90,90',
'90,90,90,,90,90,90,90,90,90,90,90,90,90,90,,,90,90,90,90,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,90,,91,,90,91,90,91,91,91,91,91,,,91,,91',
',91,91,91,91,91,91,91,,91,91,91,91,91,91,91,91,91,91,91,,,91,91,91,91',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,91,,92,,91,92,91,92,92,92,92',
'92,,,92,,92,,92,92,92,92,92,92,92,,92,92,92,92,92,92,92,92,92,92,92',
',,92,92,92,92,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,92,,93,,92,93',
'92,93,93,93,93,93,,,93,,93,,93,93,93,93,93,93,93,,93,93,93,93,93,93',
'93,93,93,93,93,,,93,93,93,93,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',93,,94,,93,94,93,94,94,94,94,94,,,94,,94,,94,94,94,94,94,94,94,,94',
'94,94,94,94,94,94,94,94,94,94,,,94,94,94,94,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,94,,95,,94,95,94,95,95,95,95,95,,,95,,95,,95,95,95,95',
'95,95,95,,95,95,95,95,95,95,95,95,95,95,95,,,95,95,95,95,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,95,,96,,95,96,95,96,96,96,96,96,,,96,,96',
',96,96,96,96,96,96,96,,96,96,96,96,96,96,96,96,96,96,96,,,96,96,96,96',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,96,,97,,96,97,96,97,97,97,97',
'97,,,97,,97,,97,97,97,97,97,97,97,,97,97,97,97,97,97,97,97,97,97,97',
',,97,97,97,97,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,97,,98,,97,98',
'97,98,98,98,98,98,,,98,,98,,98,98,98,98,98,98,98,,98,98,98,98,98,98',
'98,98,98,98,98,,,98,98,98,98,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',98,,99,,98,99,98,99,99,99,99,99,,,99,,99,,99,99,99,99,99,99,99,,99',
'99,99,99,99,99,99,99,99,99,99,,,99,99,99,99,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,99,,100,,99,100,99,100,100,100,100,100,,,100,,100,,100',
'100,100,100,100,100,100,,100,100,100,100,100,100,100,100,100,100,100',
',,100,100,100,100,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,100,,101,',
'100,101,100,101,101,101,101,101,,,101,,101,,101,101,101,101,101,101',
'101,,101,101,101,101,101,101,101,101,101,101,101,,,101,101,101,101,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,101,,102,,101,102,101,102,102',
'102,102,102,,,102,,102,,102,102,102,102,102,102,102,,102,102,102,102',
'102,102,102,102,102,102,102,,,102,102,102,102,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,102,,103,,102,103,102,103,103,103,103,103,,,103,,103',
',103,103,103,103,103,103,103,,103,103,103,103,103,103,103,103,103,103',
'103,,,103,103,103,103,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,103,,104',
',103,104,103,104,104,104,104,104,,,104,,104,,104,104,104,104,104,104',
'104,,104,104,104,104,104,104,104,104,104,104,104,,,104,104,104,104,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,104,,105,,104,105,104,105,105',
'105,105,105,,,105,,105,,105,105,105,105,105,105,105,,105,105,105,105',
'105,105,105,105,105,105,105,,,105,105,105,105,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,105,,106,,105,106,105,106,106,106,106,106,,,106,,106',
',106,106,106,106,106,106,106,,106,106,106,106,106,106,106,106,106,106',
'106,,,106,106,106,106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,106,,107',
',106,107,106,107,107,107,107,107,,,107,,107,,107,107,107,107,107,107',
'107,,107,107,107,107,107,107,107,107,107,107,107,,,107,107,107,107,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,107,,108,,107,108,107,108,108',
'108,108,108,,,108,,108,,108,108,108,108,108,108,108,,108,108,108,108',
'108,108,108,108,108,108,108,,,108,108,108,108,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,108,,109,,108,109,108,109,109,109,109,109,,,109,,109',
',109,109,109,109,109,109,109,,109,109,109,109,109,109,109,109,109,109',
'109,,,109,109,109,109,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,109,,110',
',109,110,109,110,110,110,110,110,,,110,,110,,110,110,110,110,110,110',
'110,,110,110,110,110,110,110,110,110,110,110,110,,,110,110,110,110,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,110,,111,,110,111,110,111,111',
'111,111,111,,,111,,111,,111,111,111,111,111,111,111,,111,111,111,111',
'111,111,111,111,111,111,111,,,111,111,111,111,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,111,,112,,111,112,111,112,112,112,112,112,,,112,,112',
',112,112,112,112,112,112,112,,112,112,112,112,112,112,112,112,112,112',
'112,,,112,112,112,112,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,,113',
',112,113,112,113,113,113,113,113,,,113,,113,,113,113,113,113,113,113',
'113,,113,113,113,113,113,113,113,113,113,113,113,,,113,113,113,113,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,113,,114,,113,114,113,114,114',
'114,114,114,,,114,,114,,114,114,114,114,114,114,114,,114,114,114,114',
'114,114,114,114,114,114,114,,,114,114,114,114,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,114,,115,,114,115,114,115,115,115,115,115,,,115,,115',
',115,115,115,115,115,115,115,,115,115,115,115,115,115,115,115,115,115',
'115,,,115,115,115,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,115,,116',
',115,116,115,116,116,116,116,116,,,116,,116,,116,116,116,116,116,116',
'116,,116,116,116,116,116,116,116,116,116,116,116,,,116,116,116,116,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,116,,117,,116,117,116,117,117',
'117,117,117,,,117,,117,,117,117,117,117,117,117,117,,117,117,117,117',
'117,117,117,117,117,117,117,,,117,117,117,117,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,117,,118,,117,118,117,118,118,118,118,118,,,118,,118',
',118,118,118,118,118,118,118,,118,118,118,118,118,118,118,118,118,118',
'118,,,118,118,118,118,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,118,,64',
',118,64,118,64,64,64,64,64,,,64,,64,,64,64,64,64,64,64,64,64,64,64,64',
'64,64,64,64,64,64,64,64,,,64,64,64,64,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,64,,64,64,64,120,64,,120,,120,120,120,120,120,,,120,,120,',
'120,120,120,120,120,120,120,,120,120,120,120,120,120,120,120,120,120',
'120,,,120,120,120,120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,120,,246',
',120,246,120,246,246,246,246,246,,,246,,246,,246,246,246,246,246,246',
'246,,246,246,246,246,246,246,246,246,246,246,246,246,,246,246,246,246',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,246,,244,,246,244,246,244,244',
'244,244,244,,,244,,244,,244,244,244,244,244,244,244,,244,244,244,244',
'244,244,244,244,244,244,244,,,244,244,244,244,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,244,,123,,244,123,244,123,123,123,123,123,,,123,,123',
',123,123,123,123,123,123,123,,123,123,123,123,123,123,123,123,123,123',
'123,123,,123,123,123,123,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,123',
',124,,123,124,123,124,124,124,124,124,,,124,,124,,124,124,124,124,124',
'124,124,,124,124,124,124,124,124,124,124,124,124,124,,,124,124,124,124',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,124,,242,,124,242,124,242,242',
'242,242,242,,,242,,242,,242,242,242,242,242,242,242,,242,242,242,242',
'242,242,242,242,242,242,242,,,242,242,242,242,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,242,,237,,242,237,242,237,237,237,237,237,,,237,,237',
',237,237,237,237,237,237,237,,237,237,237,237,237,237,237,237,237,237',
'237,,,237,237,237,237,324,324,,324,324,324,324,324,324,324,324,324,324',
'324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324',
'324,324,324,324,324,324,324,,,,237,,,,237,237,237,228,324,324,228,,228',
'228,228,228,228,,,228,,228,,228,228,228,228,228,228,228,,228,228,228',
'228,228,228,228,228,228,228,228,,,228,228,228,228,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,228,,224,,228,224,228,224,224,224,224,224,,,224',
',224,,224,224,224,224,224,224,224,,224,224,224,224,224,224,224,224,224',
'224,224,,,224,224,224,224,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,224',
',266,,224,266,224,266,266,266,266,266,,,266,,266,,266,266,266,266,266',
'266,266,,266,266,266,266,266,266,266,266,266,266,266,,,266,266,266,266',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,269,,266,269,266,269,269',
'269,269,269,,,269,,269,,269,269,269,269,269,269,269,,269,269,269,269',
'269,269,269,269,269,269,269,,,269,269,269,269,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,269,,57,,269,57,269,57,57,57,57,57,,,57,,57,,57,57',
'57,57,57,57,57,,57,57,57,57,57,57,57,57,57,57,57,57,,57,57,57,57,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,270,,57,270,57,270,270,270',
'270,270,,,270,,270,,270,270,270,270,270,270,270,,270,270,270,270,270',
'270,270,270,270,270,270,,,270,270,270,270,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,270,,136,,270,136,270,136,136,136,136,136,,,136,,136,',
'136,136,136,136,136,136,136,,136,136,136,136,136,136,136,136,136,136',
'136,,,136,136,136,136,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,136,,278',
',136,278,136,278,278,278,278,278,,,278,,278,,278,278,278,278,278,278',
'278,,278,278,278,278,278,278,278,278,278,278,278,,,278,278,278,278,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,51,,278,51,278,51,51,51',
'51,51,,,51,,51,,51,51,51,51,51,51,51,,51,51,51,51,51,51,51,51,51,51',
'51,51,,51,51,51,51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,,288,',
'51,288,51,288,288,288,288,288,,,288,,288,,288,288,288,288,288,288,288',
',288,288,288,288,288,288,288,288,288,288,288,,,288,288,288,288,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,288,,180,,288,180,288,180,180,180',
'180,180,,,180,,180,,180,180,180,180,180,180,180,,180,180,180,180,180',
'180,180,180,180,180,180,180,,180,180,180,180,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,180,,175,,180,175,180,175,175,175,175,175,,,175,,175',
',175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175',
'175,175,175,,175,175,175,175,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',175,,175,175,175,290,175,,290,,290,290,290,290,290,,,290,,290,,290',
'290,290,290,290,290,290,,290,290,290,290,290,290,290,290,290,290,290',
',,290,290,290,290,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,290,,292,',
'290,292,290,292,292,292,292,292,,,292,,292,,292,292,292,292,292,292',
'292,,292,292,292,292,292,292,292,292,292,292,292,,,292,292,292,292,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,292,,29,,292,29,292,29,29,29',
'29,29,,,29,,29,,29,29,29,29,29,29,29,,29,29,29,29,29,29,29,29,29,29',
'29,,,29,29,29,29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,297,,29',
'297,29,297,297,297,297,297,,,297,,297,,297,297,297,297,297,297,297,',
'297,297,297,297,297,297,297,297,297,297,297,297,,297,297,297,297,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,297,,350,,297,350,297,350,350,350',
'350,350,,,350,,350,,350,350,350,350,350,350,350,350,350,350,350,350',
'350,350,350,350,350,350,350,,,350,350,350,350,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,350,,350,350,350,0,350,,0,,0,0,0,0,0,,,0,,0,,0,0,0',
'0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,0,,0,0,0,79,0,,79,,79,79,79,79,79,,,79,,79,,79,79,79',
'79,79,79,79,,79,79,79,79,79,79,79,79,79,79,79,79,,79,79,79,79,282,282',
',282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282',
'282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282',
',,,79,,,,79,,79,,282,282,289,289,,289,289,289,289,289,289,289,289,289',
'289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289',
'289,289,289,289,289,289,289,289,,,,,,,,,,,,289,289,291,291,,291,291',
'291,291,291,291,291,291,291,291,291,291,291,291,291,291,291,291,291',
'291,291,291,291,291,291,291,291,291,291,291,291,291,291,291,,,,,,,,',
',,,291,291,226,226,,226,226,226,226,226,226,226,226,226,226,226,226',
'226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226',
'226,226,226,226,226,,,,,,,,,,,,226,226,325,325,,325,325,325,325,325',
'325,325,325,325,325,325,325,325,325,325,325,325,325,325,325,325,325',
'325,325,325,325,325,325,325,325,325,325,325,325,,,,,,,,,,,,325,325,300',
'300,,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300',
'300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300',
'300,,,,,,,,,,,,300,300,221,221,,221,221,221,221,221,221,221,221,221',
'221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221',
'221,221,221,221,221,221,221,221,,,,,,,,,,,,221,221,326,326,,326,326',
'326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326',
'326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,,,,,,,,',
',,,326,326,235,235,,235,235,235,235,235,235,235,235,235,235,235,235',
'235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235',
'235,235,235,235,235,,,,,,,,,,,,235,235,294,294,,294,294,294,294,294',
'294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294',
'294,294,294,294,294,294,294,294,294,294,294,294,,,,,,,,,,,,294,294,301',
'301,,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301',
'301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301',
'301,,,,,,,,,,,,301,301,220,220,,220,220,220,220,220,220,220,220,220',
'220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220',
'220,220,220,220,220,220,220,220,,,,,,,,,,,,220,220' ]
        racc_action_check = arr = ::Array.new(8795, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  8066,   489,     8,   235,   nil,   nil,   328,   nil,    90,   332,
   nil,   nil,   nil,   nil,   155,    78,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  7814,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -46,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   306,   nil,   nil,
   260,  7313,   nil,   231,    -2,    -8,   149,  6981,   nil,   154,
   -17,   151,   nil,   nil,  5977,   nil,  1821,  1904,  1987,   nil,
   nil,  2070,    72,   177,   214,    -9,   252,   nil,   340,  8152,
  2740,  2823,  2906,  2989,  3072,  3155,  3238,  3321,  3404,  3487,
  3570,  3653,  3736,  3819,  3902,  3985,  4068,  4151,  4234,  4317,
  4400,  4483,  4566,  4649,  4732,  4815,  4898,  4981,  5064,  5147,
  5230,  5313,  5396,  5479,  5562,  5645,  5728,  5811,  5894,  1738,
  6063,   255,   257,  6312,  6395,   398,   258,   nil,    75,   363,
   nil,  1578,   314,   366,   368,   nil,  7147,   165,  1025,   nil,
   nil,   -71,   nil,   320,   -49,    85,   -65,   334,   341,    77,
   344,   450,   -75,   -69,   320,   291,   455,    -3,   408,  2657,
   347,    -2,   343,   227,   nil,   384,    77,   nil,   630,   709,
   788,   867,   402,   399,    96,  7562,   -19,    79,   329,   nil,
  7479,   nil,   946,  1741,  1824,  1907,  1990,  2073,  1262,  2156,
  2239,  2325,  2411,  2494,  2577,  2660,  2743,  2826,   383,   462,
  1331,   699,   778,   857,   936,   304,  1015,  1094,  1173,  1252,
   151,   153,   229,   231,   168,    18,   233,  1341,  2909,  2992,
  8701,  8451,  1420,  1499,  6732,   168,  8301,   nil,  6649,   258,
   309,   nil,   nil,   nil,   nil,  8551,   nil,  6561,   nil,    73,
   152,   279,  6478,   -68,  6229,   262,  6146,  2574,   135,   nil,
   248,   299,   253,    82,  2491,  1658,   185,  2319,  2236,   nil,
     3,   193,  2153,  2405,   nil,   404,  6815,    38,    92,  6898,
  7064,   nil,   169,     0,     3,   249,   244,   172,  7230,   nil,
  1183,   nil,  8151,   nil,  1104,   nil,   nil,   nil,  7396,  8201,
  7648,  8251,  7731,   188,  8601,   260,   362,  7897,   247,   nil,
  8401,  8651,   319,   372,   319,   nil,   551,    -2,   nil,   472,
   nil,   nil,   393,   314,   nil,   391,    72,   nil,   394,   nil,
   395,   nil,   156,   nil,  6560,  8351,  8501,   nil,   nil,   nil,
    36,   nil,   401,   -13,   nil,   nil,   410,   nil,   433,   474,
   475,   nil,   457,   nil,   477,   nil,   478,   105,   404,   nil,
  7980,   nil,   nil,   nil,   nil,   nil,   nil,   453,   -10,   455,
    10,   469,   411,   nil,   471,   491,   461,   493,   nil,   475,
   nil,   495,   nil ]

racc_action_default = [
    -1,  -192,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,
   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -88,
   -32,   -33,   -34,   -35,   -36,   -37,   -38,   -39,   -40,   -41,
   -42,   -43,   -44,   -45,   -46,   -47,   -48,  -192,   -50,   -51,
   -52,   -55,   -58,   -61,   -88,  -192,   -88,   -89,   -87,  -192,
  -147,  -147,  -149,  -150,   -88,  -160,   -88,   -88,   -88,  -169,
  -170,   -88,  -192,  -192,  -192,   -88,  -190,  -191,  -192,    -5,
   -88,   -88,   -88,   -88,   -88,   -88,   -88,   -88,   -88,   -88,
   -88,   -88,   -88,   -88,   -88,   -88,   -88,   -88,   -88,   -88,
   -88,   -88,   -88,   -88,   -88,   -88,   -88,   -88,   -88,   -88,
   -88,   -88,   -88,   -88,   -88,   -88,   -88,   -88,   -88,   -88,
   -88,   -78,   -77,   -89,   -88,   -67,   -76,   -70,  -192,  -192,
  -139,  -192,   -65,   -66,  -192,   -49,   -88,  -192,   -56,   -41,
   -52,  -192,   -62,  -192,  -192,  -192,  -192,  -192,  -192,  -192,
  -192,  -192,  -192,  -135,  -137,   -88,  -192,  -192,  -192,   -89,
   -86,   -90,  -136,   -88,  -148,   -88,  -158,  -159,  -192,  -192,
  -192,  -192,  -192,  -192,  -177,  -183,  -192,  -192,  -192,  -188,
   -89,   373,    -4,   -92,   -93,   -94,   -95,   -96,   -97,   -98,
   -99,  -100,  -101,  -102,  -103,  -104,  -105,  -106,  -107,  -108,
  -109,  -110,  -111,  -112,  -113,  -114,  -115,  -116,  -117,  -118,
  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -126,  -127,  -128,
  -163,  -166,  -192,  -192,   -88,  -192,   -80,   -71,   -88,  -135,
  -137,  -136,   -31,   -73,   -72,  -132,   -53,   -88,   -59,  -192,
  -192,   -67,   -88,  -135,   -88,  -136,   -89,   -88,   -88,  -142,
  -192,   -67,  -192,  -135,   -89,   -90,  -192,   -88,   -88,  -138,
  -192,  -192,   -88,   -88,  -184,  -192,   -88,  -192,  -192,   -88,
   -88,  -174,  -192,  -192,  -182,  -192,  -192,  -192,   -88,   -68,
  -192,   -82,   -74,   -54,   -57,   -60,   -63,   -64,   -88,   -79,
   -88,  -131,   -88,  -192,  -130,  -192,  -192,   -89,  -192,   -85,
   -91,  -134,  -152,  -151,  -154,  -161,  -192,  -182,  -164,  -192,
  -168,  -171,  -192,  -192,  -175,  -192,  -192,  -178,  -192,  -186,
  -192,  -189,  -167,   -69,   -75,  -129,  -133,   -81,  -140,  -141,
  -192,   -84,  -192,  -155,  -153,  -162,  -192,  -165,  -192,  -192,
  -192,  -180,  -192,  -179,  -192,   -83,  -192,  -192,  -192,  -156,
   -88,  -172,  -173,  -176,  -181,  -187,  -143,  -154,  -192,  -154,
  -185,  -192,  -192,  -157,  -192,  -192,  -154,  -192,  -144,  -192,
  -145,  -192,  -146 ]

racc_goto_table = [
    79,     2,   143,   128,     3,   142,   130,   140,   150,   139,
   144,   318,   144,   125,   332,   230,   146,   137,   158,   147,
   141,   122,   252,   261,   265,   173,   140,   126,   163,   165,
   135,   144,   148,   131,   347,     1,   272,   178,   174,   nil,
   179,   nil,   149,   nil,   157,   145,   nil,   156,   nil,   nil,
   nil,   nil,   132,   nil,   342,   138,   nil,   nil,   nil,   nil,
   160,   nil,   167,   177,   nil,   nil,   156,   361,   166,   364,
   168,   169,   170,   nil,   nil,   171,   369,   nil,   nil,   nil,
   nil,   nil,   nil,   182,   183,   184,   185,   186,   187,   188,
   189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
   199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
   209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
   219,   220,   221,   222,   223,   304,   225,   nil,   226,   nil,
   nil,   nil,   nil,   nil,   nil,   267,   268,   nil,   nil,   nil,
   235,   275,   nil,   128,   241,   nil,   250,   303,   nil,   nil,
   nil,   128,   nil,   260,   259,   251,   nil,   132,   126,   122,
   nil,   nil,   256,   255,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   274,   nil,   nil,     3,
   nil,   nil,   nil,   277,   nil,   nil,   nil,   nil,   143,   287,
   nil,   286,   nil,   140,   140,   139,   139,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   280,   nil,
   nil,   nil,   282,   nil,   nil,   nil,   128,   nil,   317,   295,
   nil,   284,   nil,   nil,   nil,   nil,   289,   nil,   291,   293,
   nil,   294,   nil,   nil,   nil,   nil,   nil,   298,   nil,   nil,
   nil,   300,   301,   nil,   307,   nil,   306,     3,   nil,   nil,
   309,   nil,    79,   312,   313,   nil,   nil,   338,   339,   nil,
   340,   341,   322,   343,   nil,   344,   nil,   nil,   nil,   nil,
   nil,   nil,   324,   nil,   325,   nil,   326,   346,   nil,   nil,
   330,   nil,   nil,   nil,   nil,    79,   nil,   354,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   365,   nil,   nil,   367,
   nil,   nil,   nil,   nil,   371,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   360,   nil,   nil,     3,   nil,   nil,   nil,    79 ]

racc_goto_check = [
     4,     2,    16,    45,     3,    41,    14,    37,    37,    35,
    35,    33,    35,    44,    51,    48,     8,    38,     8,     6,
    40,    42,    46,    54,    54,    34,    37,    42,    49,    49,
    32,    35,     9,     3,    53,     1,    55,     8,    52,   nil,
     6,   nil,    45,   nil,    45,    14,   nil,    14,   nil,   nil,
   nil,   nil,    42,   nil,    33,     3,   nil,   nil,   nil,   nil,
    47,   nil,     4,    45,   nil,   nil,    14,    51,     3,    51,
     3,     3,     3,   nil,   nil,     3,    51,   nil,   nil,   nil,
   nil,   nil,   nil,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,    46,    47,   nil,     3,   nil,
   nil,   nil,   nil,   nil,   nil,    52,    52,   nil,   nil,   nil,
     3,    52,   nil,    45,    44,   nil,    14,    48,   nil,   nil,
   nil,    45,   nil,    45,    14,    44,   nil,    42,    42,    42,
   nil,   nil,    47,     3,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,     3,
   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,    16,    16,
   nil,    41,   nil,    37,    37,    35,    35,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,
   nil,   nil,     3,   nil,   nil,   nil,    45,   nil,    52,    14,
   nil,     3,   nil,   nil,   nil,   nil,     3,   nil,     3,    47,
   nil,     3,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,
   nil,     3,     3,   nil,     2,   nil,     3,     3,   nil,   nil,
     3,   nil,     4,     3,     3,   nil,   nil,    52,    52,   nil,
    52,    52,     3,    52,   nil,    52,   nil,   nil,   nil,   nil,
   nil,   nil,     3,   nil,     3,   nil,     3,    52,   nil,   nil,
    47,   nil,   nil,   nil,   nil,     4,   nil,    52,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    52,   nil,   nil,    52,
   nil,   nil,   nil,   nil,    52,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,   nil,     3,   nil,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,    35,     1,     4,    -2,   nil,   -35,   nil,   -38,   -22,
   nil,   nil,   nil,   nil,    -9,   nil,   -51,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -17,  -262,   -47,   -44,   nil,   -46,   -34,   nil,
   -33,   -48,    13,   nil,    -1,   -12,  -135,     3,  -113,   -32,
   nil,  -290,   -35,  -299,  -145,  -138 ]

racc_goto_default = [
   nil,   nil,   nil,   161,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    30,
    31,    35,    36,    37,    38,    39,    40,    50,   nil,    52,
   nil,   nil,   121,   133,   nil,    55,   152,   nil,   154,   nil,
    61,   nil,   264,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 95, :_reduce_1,
  1, 95, :_reduce_2,
  1, 96, :_reduce_3,
  3, 96, :_reduce_4,
  2, 96, :_reduce_5,
  1, 96, :_reduce_6,
  1, 97, :_reduce_7,
  1, 97, :_reduce_8,
  1, 97, :_reduce_9,
  1, 97, :_reduce_10,
  1, 97, :_reduce_11,
  1, 97, :_reduce_12,
  1, 97, :_reduce_13,
  1, 97, :_reduce_14,
  1, 97, :_reduce_15,
  1, 97, :_reduce_16,
  1, 97, :_reduce_17,
  1, 97, :_reduce_18,
  1, 97, :_reduce_19,
  1, 97, :_reduce_20,
  1, 97, :_reduce_21,
  1, 97, :_reduce_22,
  1, 97, :_reduce_23,
  1, 97, :_reduce_24,
  1, 97, :_reduce_25,
  1, 97, :_reduce_26,
  1, 97, :_reduce_27,
  1, 97, :_reduce_28,
  1, 97, :_reduce_29,
  1, 97, :_reduce_30,
  3, 97, :_reduce_31,
  1, 97, :_reduce_32,
  1, 97, :_reduce_33,
  1, 98, :_reduce_34,
  1, 98, :_reduce_35,
  1, 98, :_reduce_36,
  1, 110, :_reduce_37,
  1, 110, :_reduce_38,
  1, 110, :_reduce_39,
  1, 110, :_reduce_40,
  1, 110, :_reduce_41,
  1, 110, :_reduce_42,
  1, 110, :_reduce_43,
  1, 110, :_reduce_44,
  1, 110, :_reduce_45,
  1, 125, :_reduce_46,
  1, 126, :_reduce_47,
  1, 126, :_reduce_48,
  2, 112, :_reduce_49,
  1, 127, :_reduce_50,
  1, 130, :_reduce_51,
  1, 128, :_reduce_52,
  3, 131, :_reduce_53,
  4, 131, :_reduce_54,
  0, 132, :_reduce_55,
  1, 132, :_reduce_56,
  3, 132, :_reduce_57,
  1, 129, :_reduce_58,
  3, 133, :_reduce_59,
  4, 133, :_reduce_60,
  0, 134, :_reduce_61,
  1, 134, :_reduce_62,
  3, 134, :_reduce_63,
  3, 135, :_reduce_64,
  2, 102, :_reduce_65,
  2, 102, :_reduce_66,
  2, 102, :_reduce_67,
  3, 136, :_reduce_68,
  4, 136, :_reduce_69,
  1, 138, :_reduce_70,
  2, 138, :_reduce_71,
  2, 137, :_reduce_72,
  2, 137, :_reduce_73,
  4, 105, :_reduce_74,
  5, 105, :_reduce_75,
  2, 103, :_reduce_76,
  2, 103, :_reduce_77,
  2, 103, :_reduce_78,
  4, 104, :_reduce_79,
  3, 104, :_reduce_80,
  5, 100, :_reduce_81,
  4, 100, :_reduce_82,
  6, 100, :_reduce_83,
  5, 100, :_reduce_84,
  4, 100, :_reduce_85,
  2, 100, :_reduce_86,
  1, 139, :_reduce_87,
  0, 139, :_reduce_88,
  0, 141, :_reduce_89,
  1, 141, :_reduce_90,
  3, 141, :_reduce_91,
  3, 99, :_reduce_92,
  3, 99, :_reduce_93,
  3, 99, :_reduce_94,
  3, 99, :_reduce_95,
  3, 99, :_reduce_96,
  3, 99, :_reduce_97,
  3, 99, :_reduce_98,
  3, 99, :_reduce_99,
  3, 99, :_reduce_100,
  3, 99, :_reduce_101,
  3, 99, :_reduce_102,
  3, 99, :_reduce_103,
  3, 99, :_reduce_104,
  3, 99, :_reduce_105,
  3, 99, :_reduce_106,
  3, 99, :_reduce_107,
  3, 99, :_reduce_108,
  3, 99, :_reduce_109,
  3, 99, :_reduce_110,
  3, 99, :_reduce_111,
  3, 99, :_reduce_112,
  3, 99, :_reduce_113,
  3, 99, :_reduce_114,
  3, 99, :_reduce_115,
  3, 99, :_reduce_116,
  3, 99, :_reduce_117,
  3, 99, :_reduce_118,
  3, 99, :_reduce_119,
  3, 99, :_reduce_120,
  3, 99, :_reduce_121,
  3, 99, :_reduce_122,
  3, 99, :_reduce_123,
  3, 99, :_reduce_124,
  3, 99, :_reduce_125,
  3, 99, :_reduce_126,
  3, 99, :_reduce_127,
  3, 99, :_reduce_128,
  5, 101, :_reduce_129,
  4, 101, :_reduce_130,
  4, 101, :_reduce_131,
  3, 101, :_reduce_132,
  5, 101, :_reduce_133,
  4, 101, :_reduce_134,
  2, 108, :_reduce_135,
  2, 108, :_reduce_136,
  2, 108, :_reduce_137,
  3, 109, :_reduce_138,
  2, 109, :_reduce_139,
  4, 142, :_reduce_140,
  4, 142, :_reduce_141,
  2, 142, :_reduce_142,
  7, 106, :_reduce_143,
  10, 106, :_reduce_144,
  10, 106, :_reduce_145,
  12, 106, :_reduce_146,
  0, 143, :_reduce_147,
  1, 143, :_reduce_148,
  1, 144, :_reduce_149,
  1, 144, :_reduce_150,
  1, 140, :_reduce_151,
  1, 140, :_reduce_152,
  1, 145, :_reduce_153,
  0, 145, :_reduce_154,
  0, 147, :_reduce_155,
  1, 147, :_reduce_156,
  3, 147, :_reduce_157,
  2, 107, :_reduce_158,
  2, 107, :_reduce_159,
  1, 123, :_reduce_160,
  4, 113, :_reduce_161,
  5, 113, :_reduce_162,
  3, 113, :_reduce_163,
  4, 114, :_reduce_164,
  5, 114, :_reduce_165,
  3, 114, :_reduce_166,
  5, 115, :_reduce_167,
  4, 116, :_reduce_168,
  1, 124, :_reduce_169,
  1, 124, :_reduce_170,
  4, 117, :_reduce_171,
  6, 118, :_reduce_172,
  6, 118, :_reduce_173,
  3, 119, :_reduce_174,
  4, 119, :_reduce_175,
  6, 119, :_reduce_176,
  0, 149, :_reduce_177,
  2, 149, :_reduce_178,
  3, 149, :_reduce_179,
  3, 149, :_reduce_180,
  4, 149, :_reduce_181,
  2, 146, :_reduce_182,
  1, 146, :_reduce_183,
  1, 148, :_reduce_184,
  5, 148, :_reduce_185,
  4, 120, :_reduce_186,
  6, 120, :_reduce_187,
  2, 121, :_reduce_188,
  4, 122, :_reduce_189,
  1, 122, :_reduce_190,
  1, 111, :_reduce_191 ]

racc_reduce_n = 192

racc_shift_n = 373

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :THEN => 4,
  :UNLESS => 5,
  :END => 6,
  :WHILE => 7,
  :UNTIL => 8,
  :BREAK => 9,
  :CONTINUE => 10,
  :TRY => 11,
  :CATCH => 12,
  :ENSURE => 13,
  :FOR => 14,
  :IN => 15,
  :DEF => 16,
  :SPLAT => 17,
  :CALL => 18,
  :BUILTIN_COMMAND => 19,
  :CLASS => 20,
  :NEW => 21,
  :DEFM => 22,
  :SUPER => 23,
  :RETURN => 24,
  :NEWLINE => 25,
  :NUMBER => 26,
  :STRING_D => 27,
  :STRING_S => 28,
  :HEREDOC => 29,
  :EX_LITERAL => 30,
  :REGEXP => 31,
  :TRUE => 32,
  :FALSE => 33,
  :NIL => 34,
  :LET => 35,
  :UNLET => 36,
  :IDENTIFIER => 37,
  :DICT_VAL => 38,
  :SCOPE_MODIFIER => 39,
  :SCOPE_MODIFIER_LITERAL => 40,
  :SPECIAL_VAR_PREFIX => 41,
  :FINISH => 42,
  "!" => 43,
  "*" => 44,
  "/" => 45,
  "%" => 46,
  "+" => 47,
  "+=" => 48,
  "-" => 49,
  "-=" => 50,
  "." => 51,
  ">" => 52,
  ">#" => 53,
  ">?" => 54,
  "<" => 55,
  "<#" => 56,
  "<?" => 57,
  ">=" => 58,
  ">=#" => 59,
  ">=?" => 60,
  "<=" => 61,
  "<=#" => 62,
  "<=?" => 63,
  "==" => 64,
  "==?" => 65,
  "==#" => 66,
  "=~" => 67,
  "=~?" => 68,
  "=~#" => 69,
  "!~" => 70,
  "!~?" => 71,
  "!~#" => 72,
  "!=" => 73,
  "!=?" => 74,
  "!=#" => 75,
  :IS => 76,
  :ISNOT => 77,
  "&&" => 78,
  "||" => 79,
  "?" => 80,
  "=" => 81,
  "," => 82,
  "(" => 83,
  ")" => 84,
  ";" => 85,
  "|" => 86,
  "[" => 87,
  "]" => 88,
  "{" => 89,
  "}" => 90,
  ":" => 91,
  "===" => 92,
  ".=" => 93 }

racc_nt_base = 94

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "THEN",
  "UNLESS",
  "END",
  "WHILE",
  "UNTIL",
  "BREAK",
  "CONTINUE",
  "TRY",
  "CATCH",
  "ENSURE",
  "FOR",
  "IN",
  "DEF",
  "SPLAT",
  "CALL",
  "BUILTIN_COMMAND",
  "CLASS",
  "NEW",
  "DEFM",
  "SUPER",
  "RETURN",
  "NEWLINE",
  "NUMBER",
  "STRING_D",
  "STRING_S",
  "HEREDOC",
  "EX_LITERAL",
  "REGEXP",
  "TRUE",
  "FALSE",
  "NIL",
  "LET",
  "UNLET",
  "IDENTIFIER",
  "DICT_VAL",
  "SCOPE_MODIFIER",
  "SCOPE_MODIFIER_LITERAL",
  "SPECIAL_VAR_PREFIX",
  "FINISH",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"+=\"",
  "\"-\"",
  "\"-=\"",
  "\".\"",
  "\">\"",
  "\">#\"",
  "\">?\"",
  "\"<\"",
  "\"<#\"",
  "\"<?\"",
  "\">=\"",
  "\">=#\"",
  "\">=?\"",
  "\"<=\"",
  "\"<=#\"",
  "\"<=?\"",
  "\"==\"",
  "\"==?\"",
  "\"==#\"",
  "\"=~\"",
  "\"=~?\"",
  "\"=~#\"",
  "\"!~\"",
  "\"!~?\"",
  "\"!~#\"",
  "\"!=\"",
  "\"!=?\"",
  "\"!=#\"",
  "IS",
  "ISNOT",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\"=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"|\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\":\"",
  "\"===\"",
  "\".=\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Operator",
  "Call",
  "Assign",
  "DictGet",
  "ListOrDictGet",
  "ListOrDictSet",
  "DictSet",
  "Def",
  "Return",
  "VariableRetrieval",
  "UnletVariable",
  "Literal",
  "ExLiteral",
  "Heredoc",
  "If",
  "Unless",
  "Ternary",
  "While",
  "Until",
  "For",
  "Try",
  "ClassDefinition",
  "ObjectInstantiation",
  "Super",
  "EndScript",
  "LoopConstruct",
  "Number",
  "String",
  "Regexp",
  "List",
  "Dictionary",
  "ScopeModifierLiteral",
  "ListLiteral",
  "ListItems",
  "DictionaryLiteral",
  "DictItems",
  "DictItem",
  "ListOrDictGetWithBrackets",
  "DictGetWithDotLiteral",
  "DictGetWithDot",
  "Scope",
  "DefCallIdentifier",
  "ArgList",
  "CurlyBraceName",
  "Bang",
  "FunctionType",
  "Keyword",
  "Block",
  "ParamList",
  "IfBlock",
  "Catch" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_3(val, _values, result)
     result = Nodes.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_21(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_26(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 73)
  def _reduce_27(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_28(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_31(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_32(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_33(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_34(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_35(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_36(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_37(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_38(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_40(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_41(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_42(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_43(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_44(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_45(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_46(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_47(val, _values, result)
     result = StringNode.new(val[0], :s) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_48(val, _values, result)
     result = StringNode.new(val[0], :d) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_49(val, _values, result)
     result = HeredocNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_50(val, _values, result)
     result = RegexpNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_51(val, _values, result)
     result = ScopeModifierLiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_52(val, _values, result)
     result = ListNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_53(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_54(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_55(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_56(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 134)
  def _reduce_57(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_58(val, _values, result)
     result = DictionaryNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_59(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_60(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_61(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_62(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_63(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_64(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_65(val, _values, result)
     result = DictGetBracketNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 161)
  def _reduce_66(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_67(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_68(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_69(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_70(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_71(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_72(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_73(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 181)
  def _reduce_74(val, _values, result)
     result = DictSetDotNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_75(val, _values, result)
     result = DictSetDotNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_76(val, _values, result)
     result = ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 187)
  def _reduce_77(val, _values, result)
     result = ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 188)
  def _reduce_78(val, _values, result)
     result = ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 192)
  def _reduce_79(val, _values, result)
     result = ListOrDictSetNode.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 193)
  def _reduce_80(val, _values, result)
     result = ListOrDictSetNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 197)
  def _reduce_81(val, _values, result)
     result = CallNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 198)
  def _reduce_82(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 199)
  def _reduce_83(val, _values, result)
     result = ExplicitCallNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 200)
  def _reduce_84(val, _values, result)
     result = ExplicitCallNode.new(nil, val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 201)
  def _reduce_85(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_86(val, _values, result)
     result = CallNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 206)
  def _reduce_87(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 207)
  def _reduce_88(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 211)
  def _reduce_89(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 212)
  def _reduce_90(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_91(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_92(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 219)
  def _reduce_93(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 221)
  def _reduce_94(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 222)
  def _reduce_95(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 223)
  def _reduce_96(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_97(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 228)
  def _reduce_98(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_99(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 230)
  def _reduce_100(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 232)
  def _reduce_101(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_102(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_103(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_104(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_105(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 238)
  def _reduce_106(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 240)
  def _reduce_107(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 241)
  def _reduce_108(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 242)
  def _reduce_109(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_110(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_111(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_112(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 248)
  def _reduce_113(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 249)
  def _reduce_114(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 250)
  def _reduce_115(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_116(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 253)
  def _reduce_117(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 254)
  def _reduce_118(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 256)
  def _reduce_119(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_120(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 258)
  def _reduce_121(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 259)
  def _reduce_122(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 260)
  def _reduce_123(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 261)
  def _reduce_124(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_125(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_126(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 265)
  def _reduce_127(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 266)
  def _reduce_128(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 271)
  def _reduce_129(val, _values, result)
     result = SetVariableNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 272)
  def _reduce_130(val, _values, result)
     result = SetVariableNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 273)
  def _reduce_131(val, _values, result)
     result = SetVariableNodeList.new(ListNode.new(val[1]), val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_132(val, _values, result)
     result = SetVariableNodeList.new(ListNode.new(val[0]), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 275)
  def _reduce_133(val, _values, result)
     result = SetSpecialVariableNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 276)
  def _reduce_134(val, _values, result)
     result = SetSpecialVariableNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_135(val, _values, result)
     result = GetVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 282)
  def _reduce_136(val, _values, result)
     result = GetSpecialVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 283)
  def _reduce_137(val, _values, result)
     result = GetCurlyBraceNameNode.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 287)
  def _reduce_138(val, _values, result)
     result = UnletVariableNode.new('!', [ val[2] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 288)
  def _reduce_139(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_140(val, _values, result)
     result = CurlyBraceVariable.new([ CurlyBracePart.new(val[0]), CurlyBracePart.new(val[2]) ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_141(val, _values, result)
     result = CurlyBraceVariable.new([ CurlyBracePart.new(val[1]), CurlyBracePart.new(val[3]) ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 294)
  def _reduce_142(val, _values, result)
     result = val[0] << CurlyBracePart.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 300)
  def _reduce_143(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[2], val[3], [], val[4], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 301)
  def _reduce_144(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[2], val[3], val[5], val[7], val[8]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 302)
  def _reduce_145(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[2], val[3], val[5], val[7], val[8]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 303)
  def _reduce_146(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[2], val[3], val[5] << val[7], val[9], val[10]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 307)
  def _reduce_147(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 308)
  def _reduce_148(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 311)
  def _reduce_149(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 312)
  def _reduce_150(val, _values, result)
     result = "DefMethodNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_151(val, _values, result)
     result = GetCurlyBraceNameNode.new('', val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 317)
  def _reduce_152(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 322)
  def _reduce_153(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 323)
  def _reduce_154(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 327)
  def _reduce_155(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_156(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 329)
  def _reduce_157(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 333)
  def _reduce_158(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_159(val, _values, result)
     result = ReturnNode.new(nil)    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 338)
  def _reduce_160(val, _values, result)
     result = FinishNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 343)
  def _reduce_161(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 344)
  def _reduce_162(val, _values, result)
     result = IfNode.new(val[1], Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 345)
  def _reduce_163(val, _values, result)
     result = IfNode.new(val[2], Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 349)
  def _reduce_164(val, _values, result)
     result = UnlessNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 350)
  def _reduce_165(val, _values, result)
     result = UnlessNode.new(val[1], Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 351)
  def _reduce_166(val, _values, result)
     result = UnlessNode.new(val[2], Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 355)
  def _reduce_167(val, _values, result)
     result = TernaryOperatorNode.new([val[0], val[2], val[4]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 359)
  def _reduce_168(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 363)
  def _reduce_169(val, _values, result)
     result = BreakNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 364)
  def _reduce_170(val, _values, result)
     result = ContinueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 368)
  def _reduce_171(val, _values, result)
     result = UntilNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 372)
  def _reduce_172(val, _values, result)
     result = ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 373)
  def _reduce_173(val, _values, result)
     result = ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 377)
  def _reduce_174(val, _values, result)
     result = TryNode.new(val[1], nil, nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_175(val, _values, result)
     result = TryNode.new(val[1], val[2], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 379)
  def _reduce_176(val, _values, result)
     result = TryNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 383)
  def _reduce_177(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 384)
  def _reduce_178(val, _values, result)
     result = [ CatchNode.new(nil, val[1]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 385)
  def _reduce_179(val, _values, result)
     result = [ CatchNode.new(val[1], val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 386)
  def _reduce_180(val, _values, result)
     result = val[0] << CatchNode.new(nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 387)
  def _reduce_181(val, _values, result)
     result = val[0] << CatchNode.new(val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 394)
  def _reduce_182(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 395)
  def _reduce_183(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 399)
  def _reduce_184(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 400)
  def _reduce_185(val, _values, result)
     result = val[1] << ElseNode.new(val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 404)
  def _reduce_186(val, _values, result)
     result = ClassDefinitionNode.new(val[1], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 405)
  def _reduce_187(val, _values, result)
     result = ClassDefinitionNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 409)
  def _reduce_188(val, _values, result)
     result = ObjectInstantiationNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 413)
  def _reduce_189(val, _values, result)
     result = SuperNode.new(val[2], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 414)
  def _reduce_190(val, _values, result)
     result = SuperNode.new([], false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 418)
  def _reduce_191(val, _values, result)
     result = ExLiteralNode.new(val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
