#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require File.expand_path("../ast_rewriter", __FILE__)
  require File.expand_path("../errors", __FILE__)
module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 469)
  # This code will be put as-is in the parser class

  attr_accessor :ast_rewriter

  # parses tokens or code into output nodes
  def parse(object, ast_rewriter = AST_Rewriter.new)
    if tokens?(object)
      @tokens = object
    elsif code?(object)
      @lexer = Riml::Lexer.new(object)
    end

    begin
      ast = do_parse
    rescue Racc::ParseError => e
      raise unless @lexer
      raise Riml::ParseError,  "line #{@lexer.lineno}: #{e.message}"
    end

    @ast_rewriter ||= ast_rewriter
    return ast unless @ast_rewriter
    @ast_rewriter.ast = ast
    @ast_rewriter.rewrite
  end

  # get the next token from either the list of tokens provided, or
  # the lexer getting the next token
  def next_token
    return @tokens.shift unless @lexer
    @lexer.next_token
  end

  private
  def tokens?(object)
    Array === object
  end

  def code?(object)
    String === object
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'-92,180,-92,-92,-92,-92,-92,-92,34,361,34,260,34,-92,-92,34,245,-91',
'34,-91,-91,-91,-91,-91,-91,244,150,340,341,-92,-91,-91,150,34,-204,321',
'-204,-204,-204,-204,-204,-204,305,365,335,189,-91,-204,-204,251,320',
'331,145,34,46,48,47,124,125,50,43,44,45,-204,152,247,366,336,243,51',
'35,36,35,36,35,36,242,35,36,152,35,36,129,251,183,152,130,329,-92,304',
'-92,-92,-92,315,-92,35,36,-92,152,317,316,94,340,356,240,-91,100,-91',
'-91,-91,239,-91,-162,278,-91,35,36,145,330,55,291,-163,-204,134,-204',
'-204,-204,246,-204,124,125,-204,122,123,126,110,111,112,116,117,118',
'113,114,115,119,120,121,97,99,98,104,106,105,107,109,108,101,103,102',
'127,128,96,95,131,-145,-145,-145,-145,237,312,-94,183,60,94,68,77,236',
'50,100,78,183,79,82,80,81,84,124,125,83,311,72,73,235,58,57,85,86,74',
'134,87,59,75,34,46,48,47,49,88,50,43,44,45,64,69,70,233,273,60,51,68',
'76,61,275,-94,94,62,63,268,240,100,94,238,183,233,239,100,191,187,50',
'-141,-141,-141,-141,166,167,168,169,94,46,48,47,265,100,50,43,44,45',
'-143,-143,-143,-143,183,33,51,35,36,53,251,55,297,251,124,125,183,122',
'123,126,110,111,112,116,117,118,113,114,115,119,120,121,97,99,98,104',
'106,105,107,109,108,101,103,102,127,128,96,95,131,353,94,352,183,186',
'145,100,55,251,94,350,77,184,183,100,78,309,79,82,80,81,84,351,60,83',
'68,72,73,271,58,57,85,86,74,354,87,59,75,34,46,48,47,49,88,50,43,44',
'45,64,69,70,-94,306,60,51,68,76,61,251,357,328,62,63,60,251,68,287,124',
'125,60,122,123,126,-142,-142,-142,-142,359,132,-142,-142,-142,-142,60',
'252,68,251,60,302,68,251,251,322,300,360,324,183,363,33,77,35,36,53',
'78,55,79,82,80,81,84,247,94,83,305,72,73,100,58,57,85,86,74,246,87,59',
'75,34,46,48,47,49,88,50,43,44,45,64,69,70,305,272,60,51,68,76,61,170',
'246,183,62,63,264,372,183,139,301,247,376,305,378,284,296,183,89,381',
',,,,,,,46,48,47,265,,50,43,44,45,,,,,,33,51,35,36,53,,55,,,124,125,',
'122,123,126,110,111,112,116,117,118,113,114,115,119,120,121,97,99,98',
'104,106,105,107,109,108,101,103,102,127,128,96,95,131,,,,,,145,,55,',
'94,,77,,,100,78,,79,82,80,81,84,,,83,,72,73,,58,57,85,86,74,,87,59,75',
',46,48,47,49,88,50,43,44,45,64,69,70,-94,,60,51,68,76,61,,,,62,63,,',
',,124,125,,122,123,126,110,111,112,116,117,118,113,114,115,119,120,121',
',,,,,,,,,,,,,33,77,,,53,78,55,79,82,80,81,84,,94,83,,72,73,100,58,57',
'85,86,74,,87,59,75,34,46,48,47,49,88,50,43,44,45,64,69,70,,,60,51,68',
'76,61,,,,62,63,,,,,124,125,,122,123,126,110,111,112,116,117,118,113',
'114,115,119,120,121,,,,,,,,,,,,,,33,77,35,36,53,78,55,79,82,80,81,84',
',94,83,,72,73,100,58,57,85,86,74,,87,59,75,34,46,48,47,49,88,50,43,44',
'45,64,69,70,,,60,51,68,76,61,,,,62,63,,,,,124,125,,122,123,126,110,111',
'112,116,117,118,113,114,115,119,120,121,,,,,,,,,,,,,,33,77,35,36,53',
'78,55,79,82,80,81,84,,94,83,,72,73,100,58,57,85,86,74,,87,59,75,34,46',
'48,47,49,88,50,43,44,45,64,69,70,-94,,60,51,68,76,61,,,,62,63,,,,,,',
',,124,125,,122,123,126,110,111,112,116,117,118,113,114,115,119,120,121',
',,,,,,,,,33,,35,36,53,77,55,,,78,-194,79,82,80,81,84,,94,83,,72,73,100',
'58,57,85,86,74,,87,59,75,34,46,48,47,49,88,50,43,44,45,64,69,70,,,60',
'51,68,76,61,,,,62,63,337,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,35,36',
'53,,55,124,125,,122,123,126,110,111,112,116,117,118,113,114,115,119',
'120,121,97,99,98,104,106,105,107,109,108,101,103,102,127,128,96,95,131',
'342,,,,,,,,,94,,,,,100,,,,,,,,,,,,,,,,,,,,,124,125,,122,123,126,,124',
'125,,122,123,126,110,111,112,116,117,118,113,114,115,119,120,121,97',
'99,98,104,106,105,107,109,108,101,103,102,127,128,96,95,131,137,57,94',
'86,,,,100,,94,46,48,47,49,100,50,43,44,45,64,,124,125,,60,51,68,,61',
',124,125,62,63,137,57,,86,124,125,,122,123,126,46,48,47,49,,50,43,44',
'45,64,,,,,60,51,68,,61,,,94,62,63,,33,100,,,53,94,55,,194,,100,137,57',
'94,86,,,,100,,,46,48,47,49,,50,43,44,45,64,,124,125,33,60,51,68,53,61',
'55,,194,62,63,137,57,,86,124,125,,122,123,126,46,48,47,49,,50,43,44',
'45,64,,,,,60,51,68,,61,,,94,62,63,,33,100,,,53,,55,,,,,137,57,94,86',
',,,100,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,68,53,61,55,,,62,63',
'137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,68,,61,,,,62',
'63,,33,,,,53,,55,,,,124,125,,122,123,126,110,111,112,116,117,118,113',
'114,115,119,120,121,,,,,137,57,33,86,,,53,289,55,,46,48,47,49,,50,43',
'44,45,64,,,94,,60,51,68,100,61,,,,62,63,137,57,,86,124,125,,122,123',
'126,46,48,47,49,,50,43,44,45,64,,,,,60,51,68,,61,,,,62,63,,33,,,,53',
',55,,,,,137,57,94,86,,,,100,,,46,48,47,49,,50,43,44,45,64,,,-94,33,60',
'51,68,53,61,55,,,62,63,137,57,,86,124,125,,122,123,126,46,48,47,49,',
'50,43,44,45,64,,,,,60,51,68,,61,,,,62,63,,160,,,,53,,55,,,,,137,57,94',
'86,,,,100,,34,46,48,47,49,,50,43,44,45,64,,,,33,60,51,68,53,61,55,,',
'62,63,137,57,,86,124,125,,122,123,126,46,48,47,49,,50,43,44,45,64,,',
',,60,51,68,,61,,,,62,63,,33,,35,36,53,,55,,,,,137,57,94,86,,,,100,,',
'46,48,47,49,,50,43,44,45,64,,,,33,60,51,68,53,61,55,,,62,63,137,57,',
'86,124,125,,122,123,126,46,48,47,49,,50,43,44,45,64,,,,,60,51,68,,61',
',,,62,63,,33,,,,53,,55,,,,,137,57,94,86,,,,100,,,46,48,47,49,,50,43',
'44,45,64,,,,33,60,51,68,53,61,55,,,62,63,137,57,,86,124,125,,122,123',
'126,46,48,47,49,,50,43,44,45,64,,,,,60,51,68,,61,,,,62,63,,33,,,,53',
',55,,,,,137,57,94,86,,,,100,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51',
'68,53,61,55,,,62,63,137,57,,86,124,125,,122,123,126,46,48,47,49,,50',
'43,44,45,64,,,-94,,60,51,68,,61,,,,62,63,,157,,,,53,,55,,,,,137,57,94',
'86,,,,100,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,68,53,61,55,,,62',
'63,137,57,,86,124,125,,122,123,126,46,48,47,49,,50,43,44,45,64,,,-94',
',60,51,68,,61,,,,62,63,,33,,,,53,,55,,,,,137,57,94,86,,,,100,,,46,48',
'47,49,,50,43,44,45,64,,,-94,33,60,51,68,53,61,55,,,62,63,137,57,,86',
'124,125,,122,123,126,46,48,47,49,,50,43,44,45,64,,,-94,,60,51,68,,61',
',,,62,63,,33,,,,53,,55,,,,,137,57,94,86,,,,100,,,46,48,47,49,,50,43',
'44,45,64,,,,153,60,51,68,53,61,55,,,62,63,137,57,,86,,,,,,,46,48,47',
'49,,50,43,44,45,64,,,-94,,60,51,68,,61,,,,62,63,,33,,,,53,,55,,,,,137',
'57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,-94,33,60,51,68,53,61,55',
',,62,63,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,68,,61',
',,,62,63,,33,,,,53,,55,,,,,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45',
'64,,,,33,60,51,68,53,61,55,,,62,63,137,57,,86,,,,,,,46,48,47,49,,50',
'43,44,45,64,,,,,60,51,68,,61,,,,62,63,,33,,,,53,,55,,,,,137,57,,86,',
',,,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,68,53,61,55,,,62,63,137',
'57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,68,,61,,,,62,63,',
'33,,,,53,,55,,,,,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33',
'60,51,68,53,61,55,,,62,63,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45',
'64,,,,,60,51,68,,61,,,,62,63,,33,,,,53,,55,,,,,137,57,,86,,,,,,,46,48',
'47,49,,50,43,44,45,64,,,,33,60,51,68,53,61,55,,,62,63,137,57,,86,,,',
',,,46,48,47,49,,50,43,44,45,64,,,,,60,51,68,,61,,,,62,63,,33,,,,53,',
'55,,,,,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,68,53',
'61,55,,,62,63,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51',
'68,,61,,,,62,63,,33,,,,53,,55,,,,,137,57,,86,,,,,,,46,48,47,49,,50,43',
'44,45,64,,,,33,60,51,68,53,61,55,,,62,63,137,57,,86,,,,,,,46,48,47,49',
',50,43,44,45,64,,,,,60,51,68,,61,,,,62,63,,33,,,,53,,55,,,,,137,57,',
'86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,68,53,61,55,,,62,63',
'137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,68,,61,,,,62',
'63,,33,,,,53,,55,,,,,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,',
',33,60,51,68,53,61,55,,,62,63,137,57,,86,,,,,,,46,48,47,49,,50,43,44',
'45,64,,,-94,,60,51,68,,61,,,,62,63,,33,,,,53,,55,,,,,137,57,,86,,,,',
',,46,48,47,49,,50,43,44,45,64,,,,33,60,51,68,53,61,55,,,62,63,137,57',
',86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,68,,61,,,,62,63,,33',
',,,53,,55,,,,,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33,60',
'51,68,53,61,55,,,62,63,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64',
',,,,60,51,68,,61,,,,62,63,,33,,,,53,,55,,,,,137,57,,86,,,,,,,46,48,47',
'49,,50,43,44,45,64,,,,33,60,51,68,53,61,55,,,62,63,137,57,,86,,,,,,',
'46,48,47,49,,50,43,44,45,64,,,,,60,51,68,,61,,,,62,63,,33,,,,53,,55',
',,,,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,68,53,61',
'55,,,62,63,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,68',
',61,,,,62,63,,33,,,,53,,55,,,,,137,57,,86,,,,,,,46,48,47,49,,50,43,44',
'45,64,,,,33,60,51,68,53,61,55,,,62,63,137,57,,86,,,,,,,46,48,47,49,',
'50,43,44,45,64,,,,,60,51,68,,61,,,,62,63,,33,,,,53,,55,,,,,137,57,,86',
',,,,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,68,53,61,55,,,62,63,137',
'57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,68,,61,,,,62,63,',
'33,,,,53,,55,,,,,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33',
'60,51,68,53,61,55,,,62,63,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45',
'64,,,,,60,51,68,,61,,,,62,63,,33,,,,53,,55,,,,,137,57,,86,,,,,,,46,48',
'47,49,,50,43,44,45,64,,,,33,60,51,68,53,61,55,,,62,63,137,57,,86,,,',
',,,46,48,47,49,,50,43,44,45,64,,,,,60,51,68,,61,,,,62,63,,33,,,,53,',
'55,,,,,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,68,53',
'61,55,,,62,63,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51',
'68,,61,,,,62,63,,33,,,,53,,55,,,,,137,57,,86,,,,,,,46,48,47,49,,50,43',
'44,45,64,,,,33,60,51,68,53,61,55,,,62,63,137,57,,86,,,,,,,46,48,47,49',
',50,43,44,45,64,,,,,60,51,68,,61,,,,62,63,,33,,,,53,,55,,,,,137,57,',
'86,,,,,,,46,48,47,49,,50,43,44,45,64,,,-94,33,60,51,68,53,61,55,,,62',
'63,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,68,,61,,,',
'62,63,,33,,,,53,,55,,,,,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64',
',,-94,33,60,51,68,53,61,55,,,62,63,137,57,,86,,,,,,,46,48,47,49,,50',
'43,44,45,64,,,,,60,51,68,,61,,,,62,63,,33,,,,53,,55,,,,,137,57,,86,',
',,,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,68,53,61,55,,,62,63,137',
'57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,-94,,60,51,68,,61,,,,62,63',
',33,,,,53,,55,,,,,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33',
'60,51,68,53,61,55,,,62,63,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45',
'64,,,,,60,51,68,,61,,,,62,63,,33,,,,53,,55,,,,,137,57,,86,,,,,,,46,48',
'47,49,,50,43,44,45,64,,,,33,60,51,68,53,61,55,,,62,63,137,57,,86,,,',
',,,46,48,47,49,,50,43,44,45,64,,,,,60,51,68,,61,,,,62,63,,33,,,,53,',
'55,,,,,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,-94,33,60,51,68',
'53,61,55,,,62,63,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,-94',
',60,51,68,,61,,,,62,63,,33,,,,53,,55,,,,,137,57,,86,,,,,,,46,48,47,49',
',50,43,44,45,64,,,,33,60,51,68,53,61,55,,,62,63,137,57,,86,,,,,,,46',
'48,47,49,,50,43,44,45,64,,,-94,,60,51,68,,61,,,,62,63,,33,,,,53,,55',
',,,,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,-94,33,60,51,68,53',
'61,55,,,62,63,137,57,,86,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51',
'68,,61,,,,62,63,,33,,,,53,,55,,,,,137,57,,86,,,,,,,46,48,47,49,,50,43',
'44,45,64,,,,33,60,51,68,53,61,55,,,62,63,137,57,,86,,,,,,,46,48,47,49',
',50,43,44,45,64,,,,,60,51,68,,61,,,,62,63,,33,,,,53,,55,,,,,,,,,,,,',
',,370,,,,,,,,,,,,,33,,,,53,,55,124,125,,122,123,126,110,111,112,116',
'117,118,113,114,115,119,120,121,97,99,98,104,106,105,107,109,108,101',
'103,102,127,128,96,95,131,183,,,,,,,,,94,,,,,100,,,,,,124,125,,122,123',
'126,110,111,112,116,117,118,113,114,115,119,120,121,97,99,98,104,106',
'105,107,109,108,101,103,102,127,128,96,95,131,183,,,,,,,,,94,,,,,100',
',,,,,124,125,,122,123,126,110,111,112,116,117,118,113,114,115,119,120',
'121,97,99,98,104,106,105,107,109,108,101,103,102,127,128,96,95,131,374',
',,,,,,,,94,,,,,100,,,,,,124,125,,122,123,126,110,111,112,116,117,118',
'113,114,115,119,120,121,97,99,98,104,106,105,107,109,108,101,103,102',
'127,128,96,95,131,183,,,,,,,,,94,,,,,100,,,,,,124,125,,122,123,126,110',
'111,112,116,117,118,113,114,115,119,120,121,97,99,98,104,106,105,107',
'109,108,101,103,102,127,128,96,95,131,183,,,,,,,,,94,,,,,100,,,,,,124',
'125,,122,123,126,110,111,112,116,117,118,113,114,115,119,120,121,97',
'99,98,104,106,105,107,109,108,101,103,102,127,128,96,95,131,,,,,,,,',
',94,,,124,125,100,122,123,126,110,111,112,116,117,118,113,114,115,119',
'120,121,97,99,98,104,106,105,107,109,108,101,103,102,127,128,96,95,131',
',,,,,,,,,94,,,124,125,100,122,123,126,110,111,112,116,117,118,113,114',
'115,119,120,121,97,99,98,104,106,105,107,109,108,101,103,102,127,128',
'96,95,131,,,,,,,,,,94,,,124,125,100,122,123,126,110,111,112,116,117',
'118,113,114,115,119,120,121,97,99,98,104,106,105,107,109,108,101,103',
'102,127,128,96,95,131,,,,,,,,,,94,,,124,125,100,122,123,126,110,111',
'112,116,117,118,113,114,115,119,120,121,97,99,98,104,106,105,107,109',
'108,101,103,102,127,128,96,95,131,,,,,,,,,,94,,,124,125,100,122,123',
'126,110,111,112,116,117,118,113,114,115,119,120,121,97,99,98,104,106',
'105,107,109,108,101,103,102,127,128,96,95,131,,,,,,,,,,94,,,124,125',
'100,122,123,126,110,111,112,116,117,118,113,114,115,119,120,121,97,99',
'98,104,106,105,107,109,108,101,103,102,127,128,96,95,131,,,,,,,,,,94',
',,124,125,100,122,123,126,110,111,112,116,117,118,113,114,115,119,120',
'121,97,99,98,104,106,105,107,109,108,101,103,102,127,128,96,95,131,',
',,,,,,,,94,,,124,125,100,122,123,126,110,111,112,116,117,118,113,114',
'115,119,120,121,97,99,98,104,106,105,107,109,108,101,103,102,127,128',
'96,95,131,,,,,,,,,,94,282,,,283,100,124,125,,122,123,126,110,111,112',
'116,117,118,113,114,115,119,120,121,97,99,98,104,106,105,107,109,108',
'101,103,102,127,128,96,95,131,,,,,,,,,,94,,,124,125,100,122,123,126',
'110,111,112,116,117,118,113,114,115,119,120,121,97,99,98,104,106,105',
'107,109,108,101,103,102,127,128,96,95,131,,,,,,,,,,94,327,,124,125,100',
'122,123,126,110,111,112,116,117,118,113,114,115,119,120,121,97,99,98',
'104,106,105,107,109,108,101,103,102,127,128,96,,,,,,,,,,,,94,,,124,125',
'100,122,123,126,110,111,112,116,117,118,113,114,115,119,120,121,97,99',
'98,104,106,105,107,109,108,101,103,102,127,128,,,,,,,,,,,,,94,,,124',
'125,100,122,123,126,110,111,112,116,117,118,113,114,115,119,120,121',
'97,99,98,104,106,105,107,109,108,101,103,102,127,128,96,95,131,,,,,',
',,,,94,,,124,125,100,122,123,126,110,111,112,116,117,118,113,114,115',
'119,120,121,124,125,,122,123,126,110,111,112,116,117,118,113,114,115',
'119,120,121,,,,,,,,,94,,,,,100,,,,,,,,,,,,,94,,,124,125,100,122,123',
'126,110,111,112,116,117,118,113,114,115,119,120,121,124,125,,122,123',
'126,110,111,112,116,117,118,113,114,115,119,120,121,,,,,,,,,94,,,,,100',
',,,,,,,,,,,,94,,,124,125,100,122,123,126,110,111,112,116,117,118,113',
'114,115,119,120,121,124,125,,122,123,126,110,111,112,116,117,118,113',
'114,115,119,120,121,,,,,,,,,94,,,,,100,,,,,,,,,,,,,94,,,124,125,100',
'122,123,126,110,111,112,116,117,118,113,114,115,119,120,121,,,,,,,,',
',,,,,,,,,,,,,,,,,,94,,,124,125,100,122,123,126,110,111,112,116,117,118',
'113,114,115,119,120,121,97,99,98,104,106,105,107,109,108,101,103,102',
'127,128,96,95,131,,,,,,,234,,,94,,,124,125,100,122,123,126,110,111,112',
'116,117,118,113,114,115,119,120,121,97,99,98,104,106,105,107,109,108',
'101,103,102,127,128,96,95,131,,,,,,,234,,,94,,,124,125,100,122,123,126',
'110,111,112,116,117,118,113,114,115,119,120,121,97,99,98,104,106,105',
'107,109,108,101,103,102,127,128,96,95,131,,,,,,,,,,94,,,124,125,100',
'122,123,126,110,111,112,116,117,118,113,114,115,119,120,121,97,99,98',
'104,106,105,107,109,108,101,103,102,,,,,,,,,,,,,,,94,,,124,125,100,122',
'123,126,110,111,112,116,117,118,113,114,115,119,120,121,97,99,98,104',
'106,105,107,109,108,101,103,102,,,,,,,,,,,,,,,94,,,124,125,100,122,123',
'126,110,111,112,116,117,118,113,114,115,119,120,121,97,99,98,104,106',
'105,107,109,108,101,103,102,127,128,96,95,131,,,,,,,,,,94,,,124,125',
'100,122,123,126,110,111,112,116,117,118,113,114,115,119,120,121,97,99',
'98,104,106,105,107,109,108,101,103,102,127,128,96,95,131,,,,,,,,,,94',
',,124,125,100,122,123,126,110,111,112,116,117,118,113,114,115,119,120',
'121,97,99,98,104,106,105,107,109,108,101,103,102,127,128,96,95,131,',
',,,,,,,,94,,,,286,100,124,125,,122,123,126,110,111,112,116,117,118,113',
'114,115,119,120,121,97,99,98,104,106,105,107,109,108,101,103,102,127',
'128,96,95,131,,,,,,,,,,94,,,124,125,100,122,123,126,110,111,112,116',
'117,118,113,114,115,119,120,121,97,99,98,104,106,105,107,109,108,101',
'103,102,127,128,96,95,131,,,,,,,,,,94,,,124,125,100,122,123,126,110',
'111,112,116,117,118,113,114,115,119,120,121,97,99,98,104,106,105,107',
'109,108,101,103,102,127,128,96,95,131,,,,,,,,,,94,323,,,283,100,124',
'125,,122,123,126,110,111,112,116,117,118,113,114,115,119,120,121,97',
'99,98,104,106,105,107,109,108,101,103,102,127,128,96,95,131,,,,,,,,',
',94,,,124,125,100,122,123,126,110,111,112,116,117,118,113,114,115,119',
'120,121,97,99,98,104,106,105,107,109,108,101,103,102,127,128,96,95,131',
',,,,,,,,,94,,,,,100' ]
        racc_action_table = arr = ::Array.new(6158, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'331,83,331,331,331,331,331,331,379,345,369,173,375,331,331,140,149,350',
'276,350,350,350,350,350,350,148,56,308,308,331,350,350,159,2,185,278',
'185,185,185,185,185,185,262,353,304,91,350,185,185,299,277,299,83,308',
'243,243,243,164,164,243,243,243,243,185,173,151,353,304,146,243,379',
'379,369,369,375,375,146,140,140,56,276,276,20,155,184,159,20,295,331',
'262,331,331,331,274,331,2,2,331,91,274,274,164,339,339,241,350,164,350',
'350,350,241,350,151,184,350,308,308,243,296,243,243,150,185,25,185,185',
'185,150,185,20,20,185,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20',
'20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,25,25,25,25,139,270',
'8,275,8,20,8,374,138,275,20,374,303,374,374,374,374,374,163,163,374',
'269,374,374,137,374,374,374,374,374,26,374,374,374,374,374,374,374,374',
'374,374,374,374,374,374,374,374,135,182,374,374,374,374,374,182,8,162',
'374,374,177,141,162,163,141,317,133,141,163,93,89,317,26,26,26,26,66',
'66,66,66,224,55,55,55,177,224,55,55,55,55,40,40,40,40,316,374,55,374',
'374,374,250,374,250,161,177,177,319,177,177,177,177,177,177,177,177',
'177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177',
'177,177,177,177,177,177,177,334,225,334,321,87,55,225,55,332,177,332',
'183,85,84,177,183,267,183,183,183,183,183,333,69,183,69,183,183,180',
'183,183,183,183,183,335,183,183,183,183,183,183,183,183,183,183,183',
'183,183,183,183,183,183,263,183,183,183,183,183,294,340,294,183,183',
'246,232,246,232,216,216,71,216,216,216,24,24,24,24,343,24,156,156,156',
'156,152,156,152,255,70,255,70,279,253,279,253,344,281,347,349,183,370',
'183,183,183,370,183,370,370,370,370,370,261,216,370,352,370,370,216',
'370,370,370,370,370,260,370,370,370,370,370,370,370,370,370,370,370',
'370,370,370,370,370,354,181,370,370,370,370,370,68,189,364,370,370,176',
'365,367,41,254,190,371,372,373,193,248,377,1,380,,,,,,,,244,244,244',
'176,,244,244,244,244,,,,,,370,244,370,370,370,,370,,,176,176,,176,176',
'176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176',
'176,176,176,176,176,176,176,176,176,176,176,176,176,,,,,,244,,244,,176',
',90,,,176,90,,90,90,90,90,90,,,90,,90,90,,90,90,90,90,90,,90,90,90,',
'90,90,90,90,90,90,90,90,90,90,90,90,90,,90,90,90,90,90,,,,90,90,,,,',
'197,197,,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197',
',,,,,,,,,,,,,90,357,,,90,357,90,357,357,357,357,357,,197,357,,357,357',
'197,357,357,357,357,357,,357,357,357,357,357,357,357,357,357,357,357',
'357,357,357,357,357,,,357,357,357,357,357,,,,357,357,,,,,198,198,,198',
'198,198,198,198,198,198,198,198,198,198,198,198,198,198,,,,,,,,,,,,',
',357,49,357,357,357,49,357,49,49,49,49,49,,198,49,,49,49,198,49,49,49',
'49,49,,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,,,49,49,49,49',
'49,,,,49,49,,,,,199,199,,199,199,199,199,199,199,199,199,199,199,199',
'199,199,199,199,,,,,,,,,,,,,,49,0,49,49,49,0,49,0,0,0,0,0,,199,0,,0',
'0,199,0,0,0,0,0,,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,0,0,,,,0,0',
',,,,,,,,201,201,,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,201,,,,,,,,,,0,,0,0,0,265,0,,,265,265,265,265,265,265,265,,201,265',
',265,265,201,265,265,265,265,265,,265,265,265,265,265,265,265,265,265',
'265,265,265,265,265,265,265,,,265,265,265,265,265,,,,265,265,307,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,265,,265,265,265,,265,307,307,,307,307',
'307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307',
'307,307,307,307,307,307,307,307,307,307,307,307,307,310,,,,,,,,,307',
',,,,307,,,,,,,,,,,,,,,,,,,,,210,210,,210,210,210,,310,310,,310,310,310',
'310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310',
'310,310,310,310,310,310,310,310,310,310,310,310,94,94,210,94,,,,210',
',310,94,94,94,94,310,94,94,94,94,94,,222,222,,94,94,94,,94,,223,223',
'94,94,191,191,,191,211,211,,211,211,211,191,191,191,191,,191,191,191',
'191,191,,,,,191,191,191,,191,,,222,191,191,,94,222,,,94,223,94,,94,',
'223,96,96,211,96,,,,211,,,96,96,96,96,,96,96,96,96,96,,226,226,191,96',
'96,96,191,96,191,,191,96,96,63,63,,63,212,212,,212,212,212,63,63,63',
'63,,63,63,63,63,63,,,,,63,63,63,,63,,,226,63,63,,96,226,,,96,,96,,,',
',64,64,212,64,,,,212,,,64,64,64,64,,64,64,64,64,64,,,,63,64,64,64,63',
'64,63,,,64,64,240,240,,240,,,,,,,240,240,240,240,,240,240,240,240,240',
',,,,240,240,240,,240,,,,240,240,,64,,,,64,,64,,,,202,202,,202,202,202',
'202,202,202,202,202,202,202,202,202,202,202,202,,,,,61,61,240,61,,,240',
'240,240,,61,61,61,61,,61,61,61,61,61,,,202,,61,61,61,202,61,,,,61,61',
'356,356,,356,213,213,,213,213,213,356,356,356,356,,356,356,356,356,356',
',,,,356,356,356,,356,,,,356,356,,61,,,,61,,61,,,,,59,59,213,59,,,,213',
',,59,59,59,59,,59,59,59,59,59,,,59,356,59,59,59,356,59,356,,,59,59,341',
'341,,341,214,214,,214,214,214,341,341,341,341,,341,341,341,341,341,',
',,,341,341,341,,341,,,,341,341,,59,,,,59,,59,,,,,75,75,214,75,,,,214',
',75,75,75,75,75,,75,75,75,75,75,,,,341,75,75,75,341,75,341,,,75,75,77',
'77,,77,215,215,,215,215,215,77,77,77,77,,77,77,77,77,77,,,,,77,77,77',
',77,,,,77,77,,75,,75,75,75,,75,,,,,78,78,215,78,,,,215,,,78,78,78,78',
',78,78,78,78,78,,,,77,78,78,78,77,78,77,,,78,78,79,79,,79,217,217,,217',
'217,217,79,79,79,79,,79,79,79,79,79,,,,,79,79,79,,79,,,,79,79,,78,,',
',78,,78,,,,,82,82,217,82,,,,217,,,82,82,82,82,,82,82,82,82,82,,,,79',
'82,82,82,79,82,79,,,82,82,238,238,,238,218,218,,218,218,218,238,238',
'238,238,,238,238,238,238,238,,,,,238,238,238,,238,,,,238,238,,82,,,',
'82,,82,,,,,58,58,218,58,,,,218,,,58,58,58,58,,58,58,58,58,58,,,,238',
'58,58,58,238,58,238,,,58,58,235,235,,235,219,219,,219,219,219,235,235',
'235,235,,235,235,235,235,235,,,235,,235,235,235,,235,,,,235,235,,58',
',,,58,,58,,,,,86,86,219,86,,,,219,,,86,86,86,86,,86,86,86,86,86,,,,235',
'86,86,86,235,86,235,,,86,86,245,245,,245,220,220,,220,220,220,245,245',
'245,245,,245,245,245,245,245,,,245,,245,245,245,,245,,,,245,245,,86',
',,,86,,86,,,,,194,194,220,194,,,,220,,,194,194,194,194,,194,194,194',
'194,194,,,194,245,194,194,194,245,194,245,,,194,194,57,57,,57,221,221',
',221,221,221,57,57,57,57,,57,57,57,57,57,,,57,,57,57,57,,57,,,,57,57',
',194,,,,194,,194,,,,,251,251,221,251,,,,221,,,251,251,251,251,,251,251',
'251,251,251,,,,57,251,251,251,57,251,57,,,251,251,252,252,,252,,,,,',
',252,252,252,252,,252,252,252,252,252,,,252,,252,252,252,,252,,,,252',
'252,,251,,,,251,,251,,,,,186,186,,186,,,,,,,186,186,186,186,,186,186',
'186,186,186,,,186,252,186,186,186,252,186,252,,,186,186,95,95,,95,,',
',,,,95,95,95,95,,95,95,95,95,95,,,,,95,95,95,,95,,,,95,95,,186,,,,186',
',186,,,,,62,62,,62,,,,,,,62,62,62,62,,62,62,62,62,62,,,,95,62,62,62',
'95,62,95,,,62,62,97,97,,97,,,,,,,97,97,97,97,,97,97,97,97,97,,,,,97',
'97,97,,97,,,,97,97,,62,,,,62,,62,,,,,98,98,,98,,,,,,,98,98,98,98,,98',
'98,98,98,98,,,,97,98,98,98,97,98,97,,,98,98,99,99,,99,,,,,,,99,99,99',
'99,,99,99,99,99,99,,,,,99,99,99,,99,,,,99,99,,98,,,,98,,98,,,,,100,100',
',100,,,,,,,100,100,100,100,,100,100,100,100,100,,,,99,100,100,100,99',
'100,99,,,100,100,101,101,,101,,,,,,,101,101,101,101,,101,101,101,101',
'101,,,,,101,101,101,,101,,,,101,101,,100,,,,100,,100,,,,,102,102,,102',
',,,,,,102,102,102,102,,102,102,102,102,102,,,,101,102,102,102,101,102',
'101,,,102,102,103,103,,103,,,,,,,103,103,103,103,,103,103,103,103,103',
',,,,103,103,103,,103,,,,103,103,,102,,,,102,,102,,,,,104,104,,104,,',
',,,,104,104,104,104,,104,104,104,104,104,,,,103,104,104,104,103,104',
'103,,,104,104,105,105,,105,,,,,,,105,105,105,105,,105,105,105,105,105',
',,,,105,105,105,,105,,,,105,105,,104,,,,104,,104,,,,,106,106,,106,,',
',,,,106,106,106,106,,106,106,106,106,106,,,,105,106,106,106,105,106',
'105,,,106,106,107,107,,107,,,,,,,107,107,107,107,,107,107,107,107,107',
',,,,107,107,107,,107,,,,107,107,,106,,,,106,,106,,,,,108,108,,108,,',
',,,,108,108,108,108,,108,108,108,108,108,,,,107,108,108,108,107,108',
'107,,,108,108,109,109,,109,,,,,,,109,109,109,109,,109,109,109,109,109',
',,,,109,109,109,,109,,,,109,109,,108,,,,108,,108,,,,,110,110,,110,,',
',,,,110,110,110,110,,110,110,110,110,110,,,,109,110,110,110,109,110',
'109,,,110,110,153,153,,153,,,,,,,153,153,153,153,,153,153,153,153,153',
',,153,,153,153,153,,153,,,,153,153,,110,,,,110,,110,,,,,112,112,,112',
',,,,,,112,112,112,112,,112,112,112,112,112,,,,153,112,112,112,153,112',
'153,,,112,112,113,113,,113,,,,,,,113,113,113,113,,113,113,113,113,113',
',,,,113,113,113,,113,,,,113,113,,112,,,,112,,112,,,,,114,114,,114,,',
',,,,114,114,114,114,,114,114,114,114,114,,,,113,114,114,114,113,114',
'113,,,114,114,115,115,,115,,,,,,,115,115,115,115,,115,115,115,115,115',
',,,,115,115,115,,115,,,,115,115,,114,,,,114,,114,,,,,116,116,,116,,',
',,,,116,116,116,116,,116,116,116,116,116,,,,115,116,116,116,115,116',
'115,,,116,116,117,117,,117,,,,,,,117,117,117,117,,117,117,117,117,117',
',,,,117,117,117,,117,,,,117,117,,116,,,,116,,116,,,,,118,118,,118,,',
',,,,118,118,118,118,,118,118,118,118,118,,,,117,118,118,118,117,118',
'117,,,118,118,119,119,,119,,,,,,,119,119,119,119,,119,119,119,119,119',
',,,,119,119,119,,119,,,,119,119,,118,,,,118,,118,,,,,120,120,,120,,',
',,,,120,120,120,120,,120,120,120,120,120,,,,119,120,120,120,119,120',
'119,,,120,120,121,121,,121,,,,,,,121,121,121,121,,121,121,121,121,121',
',,,,121,121,121,,121,,,,121,121,,120,,,,120,,120,,,,,122,122,,122,,',
',,,,122,122,122,122,,122,122,122,122,122,,,,121,122,122,122,121,122',
'121,,,122,122,123,123,,123,,,,,,,123,123,123,123,,123,123,123,123,123',
',,,,123,123,123,,123,,,,123,123,,122,,,,122,,122,,,,,124,124,,124,,',
',,,,124,124,124,124,,124,124,124,124,124,,,,123,124,124,124,123,124',
'123,,,124,124,125,125,,125,,,,,,,125,125,125,125,,125,125,125,125,125',
',,,,125,125,125,,125,,,,125,125,,124,,,,124,,124,,,,,126,126,,126,,',
',,,,126,126,126,126,,126,126,126,126,126,,,,125,126,126,126,125,126',
'125,,,126,126,127,127,,127,,,,,,,127,127,127,127,,127,127,127,127,127',
',,,,127,127,127,,127,,,,127,127,,126,,,,126,,126,,,,,128,128,,128,,',
',,,,128,128,128,128,,128,128,128,128,128,,,,127,128,128,128,127,128',
'127,,,128,128,129,129,,129,,,,,,,129,129,129,129,,129,129,129,129,129',
',,,,129,129,129,,129,,,,129,129,,128,,,,128,,128,,,,,130,130,,130,,',
',,,,130,130,130,130,,130,130,130,130,130,,,,129,130,130,130,129,130',
'129,,,130,130,131,131,,131,,,,,,,131,131,131,131,,131,131,131,131,131',
',,,,131,131,131,,131,,,,131,131,,130,,,,130,,130,,,,,132,132,,132,,',
',,,,132,132,132,132,,132,132,132,132,132,,,132,131,132,132,132,131,132',
'131,,,132,132,264,264,,264,,,,,,,264,264,264,264,,264,264,264,264,264',
',,,,264,264,264,,264,,,,264,264,,132,,,,132,,132,,,,,53,53,,53,,,,,',
',53,53,53,53,,53,53,53,53,53,,,53,264,53,53,53,264,53,264,,,53,53,33',
'33,,33,,,,,,,33,33,33,33,,33,33,33,33,33,,,,,33,33,33,,33,,,,33,33,',
'53,,,,53,,53,,,,,169,169,,169,,,,,,,169,169,169,169,,169,169,169,169',
'169,,,,33,169,169,169,33,169,33,,,169,169,301,301,,301,,,,,,,301,301',
'301,301,,301,301,301,301,301,,,301,,301,301,301,,301,,,,301,301,,169',
',,,169,,169,,,,,168,168,,168,,,,,,,168,168,168,168,,168,168,168,168',
'168,,,,301,168,168,168,301,168,301,,,168,168,167,167,,167,,,,,,,167',
'167,167,167,,167,167,167,167,167,,,,,167,167,167,,167,,,,167,167,,168',
',,,168,,168,,,,,166,166,,166,,,,,,,166,166,166,166,,166,166,166,166',
'166,,,,167,166,166,166,167,166,167,,,166,166,268,268,,268,,,,,,,268',
'268,268,268,,268,268,268,268,268,,,,,268,268,268,,268,,,,268,268,,166',
',,,166,,166,,,,,145,145,,145,,,,,,,145,145,145,145,,145,145,145,145',
'145,,,145,268,145,145,145,268,145,268,,,145,145,160,160,,160,,,,,,,160',
'160,160,160,,160,160,160,160,160,,,160,,160,160,160,,160,,,,160,160',
',145,,,,145,,145,,,,,286,286,,286,,,,,,,286,286,286,286,,286,286,286',
'286,286,,,,160,286,286,286,160,286,160,,,286,286,157,157,,157,,,,,,',
'157,157,157,157,,157,157,157,157,157,,,157,,157,157,157,,157,,,,157',
'157,,286,,,,286,,286,,,,,283,283,,283,,,,,,,283,283,283,283,,283,283',
'283,283,283,,,283,157,283,283,283,157,283,157,,,283,283,271,271,,271',
',,,,,,271,271,271,271,,271,271,271,271,271,,,,,271,271,271,,271,,,,271',
'271,,283,,,,283,,283,,,,,272,272,,272,,,,,,,272,272,272,272,,272,272',
'272,272,272,,,,271,272,272,272,271,272,271,,,272,272,111,111,,111,,',
',,,,111,111,111,111,,111,111,111,111,111,,,,,111,111,111,,111,,,,111',
'111,,272,,,,272,,272,,,,,,,,,,,,,,,358,,,,,,,,,,,,,111,,,,111,,111,358',
'358,,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358',
'358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,179',
',,,,,,,,358,,,,,358,,,,,,179,179,,179,179,179,179,179,179,179,179,179',
'179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179',
'179,179,179,179,179,179,178,,,,,,,,,179,,,,,179,,,,,,178,178,,178,178',
'178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178',
'178,178,178,178,178,178,178,178,178,178,178,178,178,368,,,,,,,,,178',
',,,,178,,,,,,368,368,,368,368,368,368,368,368,368,368,368,368,368,368',
'368,368,368,368,368,368,368,368,368,368,368,368,368,368,368,368,368',
'368,368,368,314,,,,,,,,,368,,,,,368,,,,,,314,314,,314,314,314,314,314',
'314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314',
'314,314,314,314,314,314,314,314,314,314,313,,,,,,,,,314,,,,,314,,,,',
',313,313,,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313',
'313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313',
',,,,,,,,,313,,,259,259,313,259,259,259,259,259,259,259,259,259,259,259',
'259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259',
'259,259,259,259,,,,,,,,,,259,,,258,258,259,258,258,258,258,258,258,258',
'258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258',
'258,258,258,258,258,258,258,258,,,,,,,,,,258,,,174,174,258,174,174,174',
'174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174',
'174,174,174,174,174,174,174,174,174,174,174,174,,,,,,,,,,174,,,257,257',
'174,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,,,,',
',,,,,257,,,298,298,257,298,298,298,298,298,298,298,298,298,298,298,298',
'298,298,298,298,298,298,298,298,298,298,298,298,298,298,298,298,298',
'298,298,298,,,,,,,,,,298,,,290,290,298,290,290,290,290,290,290,290,290',
'290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290',
'290,290,290,290,290,290,290,,,,,,,,,,290,,,256,256,290,256,256,256,256',
'256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256',
'256,256,256,256,256,256,256,256,256,256,256,,,,,,,,,,256,,,192,192,256',
'192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192',
'192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,,,,,,,,',
',192,192,,,192,192,142,142,,142,142,142,142,142,142,142,142,142,142',
'142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142',
'142,142,142,142,142,,,,,,,,,,142,,,288,288,142,288,288,288,288,288,288',
'288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288',
'288,288,288,288,288,288,288,288,288,,,,,,,,,,288,288,,195,195,288,195',
'195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195',
'195,195,195,195,195,195,195,195,195,195,195,195,,,,,,,,,,,,195,,,196',
'196,195,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,196,196,196,196,196,196,196,196,196,,,,,,,,,,,,',
'196,,,200,200,196,200,200,200,200,200,200,200,200,200,200,200,200,200',
'200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200',
'200,200,,,,,,,,,,200,,,203,203,200,203,203,203,203,203,203,203,203,203',
'203,203,203,203,203,203,204,204,,204,204,204,204,204,204,204,204,204',
'204,204,204,204,204,204,,,,,,,,,203,,,,,203,,,,,,,,,,,,,204,,,205,205',
'204,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206',
'206,,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,,,',
',,,,,205,,,,,205,,,,,,,,,,,,,206,,,207,207,206,207,207,207,207,207,207',
'207,207,207,207,207,207,207,207,207,208,208,,208,208,208,208,208,208',
'208,208,208,208,208,208,208,208,208,,,,,,,,,207,,,,,207,,,,,,,,,,,,',
'208,,,209,209,208,209,209,209,209,209,209,209,209,209,209,209,209,209',
'209,209,,,,,,,,,,,,,,,,,,,,,,,,,,,209,,,136,136,209,136,136,136,136',
'136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136',
'136,136,136,136,136,136,136,136,136,136,136,,,,,,,136,,,136,,,249,249',
'136,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249',
'249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,,,,',
',,249,,,249,,,325,325,249,325,325,325,325,325,325,325,325,325,325,325',
'325,325,325,325,325,325,325,325,325,325,325,325,325,325,325,325,325',
'325,325,325,325,,,,,,,,,,325,,,227,227,325,227,227,227,227,227,227,227',
'227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227',
'227,227,227,,,,,,,,,,,,,,,227,,,228,228,227,228,228,228,228,228,228',
'228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228',
'228,228,228,228,,,,,,,,,,,,,,,228,,,229,229,228,229,229,229,229,229',
'229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229',
'229,229,229,229,229,229,229,229,229,229,,,,,,,,,,229,,,230,230,229,230',
'230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230',
'230,230,230,230,230,230,230,230,230,230,230,230,230,230,,,,,,,,,,230',
',,231,231,230,231,231,231,231,231,231,231,231,231,231,231,231,231,231',
'231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231',
'231,,,,,,,,,,231,,,,231,231,158,158,,158,158,158,158,158,158,158,158',
'158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158',
'158,158,158,158,158,158,158,,,,,,,,,,158,,,285,285,158,285,285,285,285',
'285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285',
'285,285,285,285,285,285,285,285,285,285,285,,,,,,,,,,285,,,280,280,285',
'280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280',
'280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,,,,,,,,',
',280,280,,,280,280,154,154,,154,154,154,154,154,154,154,154,154,154',
'154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154',
'154,154,154,154,154,,,,,,,,,,154,,,326,326,154,326,326,326,326,326,326',
'326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326',
'326,326,326,326,326,326,326,326,326,,,,,,,,,,326,,,,,326' ]
        racc_action_check = arr = ::Array.new(6158, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   809,   469,     4,   nil,   nil,   nil,   nil,   nil,   128,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    80,   nil,   nil,   nil,   295,    80,   155,   nil,   nil,   nil,
   nil,   nil,   nil,  3704,   nil,   nil,   nil,   nil,   nil,   nil,
   173,   406,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   721,
   nil,   nil,   nil,  3670,   nil,   218,   -16,  1944,  1750,  1430,
   nil,  1350,  2150,  1203,  1249,   nil,   159,   nil,   410,   285,
   349,   331,   nil,   nil,   nil,  1510,   nil,  1544,  1590,  1624,
   nil,   nil,  1670,   -41,   290,   276,  1830,   221,   nil,   237,
   545,     3,   nil,   143,  1089,  2104,  1169,  2184,  2230,  2264,
  2310,  2344,  2390,  2424,  2470,  2504,  2550,  2584,  2630,  2664,
  2710,  4264,  2790,  2824,  2870,  2904,  2950,  2984,  3030,  3064,
  3110,  3144,  3190,  3224,  3270,  3304,  3350,  3384,  3430,  3464,
  3510,  3544,  3590,   190,   nil,   172,  5489,   103,   133,   126,
   -14,   140,  5012,   nil,   nil,  3990,   -20,   nil,   -72,   -73,
    32,    23,   345,  2744,  6012,    -5,   301,  4104,  5868,   -10,
  4024,   182,   131,   137,     8,   nil,  3910,  3864,  3830,  3750,
   nil,   nil,   nil,   -31,  4727,   nil,   452,   222,  4421,  4366,
   318,   430,   209,   315,    55,    34,  2070,   nil,   nil,   358,
   420,  1123,  4962,   372,  1910,  5106,  5153,   554,   642,   730,
  5200,   822,  1299,  5247,  5265,  5312,  5330,  5377,  5395,  5442,
  1018,  1098,  1178,  1359,  1439,  1519,   324,  1599,  1679,  1759,
  1839,  1919,  1081,  1090,   154,   214,  1161,  5630,  5677,  5724,
  5771,  5818,   282,   nil,   nil,  1784,   nil,   nil,  1704,   nil,
  1283,    16,   nil,    24,   448,  1864,   325,   nil,   371,  5536,
   179,  1990,  2024,   309,   372,   304,  4915,  4774,  4680,  4633,
   333,   374,     0,   351,  3624,   901,   nil,   315,  3944,   182,
   162,  4184,  4230,   nil,    86,   142,   -11,    43,    -7,   308,
  5962,   307,   nil,  4150,   nil,  5915,  4070,   nil,  5059,   nil,
  4868,   nil,   nil,   nil,   276,    -9,    76,   nil,  4821,   -39,
   nil,  3784,   nil,   151,    25,   nil,   nil,   948,    24,   nil,
  1025,   nil,   nil,  4586,  4531,   nil,   232,   203,   nil,   244,
   nil,   280,   nil,   nil,   nil,  5583,  6059,   nil,   nil,   nil,
   nil,     0,   226,   321,   218,   250,   nil,   nil,   nil,    99,
   336,  1464,   nil,   376,   393,     2,   nil,   373,   nil,   396,
    17,   nil,   377,    24,   403,   nil,  1384,   633,  4311,   nil,
   nil,   nil,   nil,   nil,   425,   368,   nil,   430,  4476,   -19,
   403,   456,   422,   458,   173,   -17,   nil,   439,   nil,   -21,
   463,   nil ]

racc_action_default = [
    -1,  -208,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,
   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -31,
   -32,   -33,   -34,   -94,   -36,   -37,   -38,   -39,   -40,   -41,
   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -49,   -50,   -94,
   -52,   -53,   -54,   -58,   -61,   -64,  -208,   -95,   -94,   -95,
   -93,   -94,   -94,   -94,   -94,  -136,  -208,  -144,  -208,   -94,
   -94,   -94,  -159,  -160,  -161,   -94,  -171,   -94,   -94,   -94,
  -180,  -181,   -94,  -208,  -208,  -208,   -94,  -206,  -207,  -208,
    -5,  -208,  -151,   -71,   -94,   -94,   -94,   -94,   -94,   -94,
   -94,   -94,   -94,   -94,   -94,   -94,   -94,   -94,   -94,   -94,
   -94,   -94,   -94,   -94,   -94,   -94,   -94,   -94,   -94,   -94,
   -94,   -94,   -94,   -94,   -94,   -94,   -94,   -94,   -94,   -94,
   -94,   -94,   -95,   -70,   -80,   -69,  -208,  -208,   -68,  -208,
   -51,  -208,   -59,   -42,   -43,   -58,  -208,   -65,  -208,  -208,
  -146,  -148,   -94,   -95,   -96,   -87,   -26,   -95,  -208,  -208,
   -95,   -90,  -132,  -133,  -134,  -135,   -94,   -94,   -94,   -94,
  -147,  -149,  -150,  -208,  -169,  -170,  -208,  -208,  -208,  -208,
  -208,  -208,  -188,  -194,  -208,   -30,   -95,   382,    -4,  -146,
  -148,   -94,  -208,  -208,   -79,   -98,   -99,  -100,  -101,  -102,
  -103,  -104,  -105,  -106,  -107,  -108,  -109,  -110,  -111,  -112,
  -113,  -114,  -115,  -116,  -117,  -118,  -119,  -120,  -121,  -122,
  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -131,  -174,
  -177,  -208,  -208,   -81,   -35,   -95,   -83,   -82,   -94,   -56,
   -94,  -208,   -62,  -208,  -208,   -95,   -94,  -154,  -208,   -96,
  -208,   -94,   -95,  -208,  -208,  -208,  -137,  -138,  -139,  -140,
  -163,  -162,  -165,  -208,   -94,   -94,  -195,  -208,   -94,  -208,
  -208,   -94,   -94,  -185,  -208,  -208,  -193,  -208,  -208,  -208,
  -208,  -208,   -72,   -77,   -73,   -78,   -94,   -85,  -208,   -57,
   -60,   -63,   -66,   -67,  -208,  -208,  -208,   -86,   -97,  -208,
   -88,   -95,   -89,  -208,  -166,  -164,  -172,  -208,  -193,  -175,
  -208,  -179,  -182,  -208,  -208,  -186,  -208,  -208,  -189,  -208,
  -202,  -208,  -205,   -74,   -75,   -76,  -178,   -55,   -84,  -152,
  -153,   -85,  -208,  -208,  -208,  -208,  -167,  -173,  -196,  -197,
  -208,   -94,  -176,  -208,  -208,  -208,  -191,  -208,  -190,  -208,
   -84,  -155,  -165,  -208,  -165,  -198,   -94,   -94,  -208,  -183,
  -184,  -187,  -192,  -203,  -208,  -208,  -168,  -208,  -208,  -199,
   -94,  -208,  -165,  -208,   -94,  -200,  -156,  -208,  -157,  -201,
  -208,  -158 ]

racc_goto_table = [
    90,     2,   148,   138,   144,   319,   143,   338,   147,   133,
   135,   263,   267,    92,   165,   136,   149,   146,   193,   185,
   156,   334,   188,   274,     1,   339,   303,   nil,   141,   nil,
   nil,   nil,   nil,   nil,   181,   142,   nil,   nil,   355,   154,
   158,   154,   190,   162,   163,   164,   158,   347,   nil,   nil,
   140,   nil,   182,   nil,   nil,   nil,   nil,   174,   nil,   176,
   177,   178,   nil,   nil,   179,   nil,   nil,    91,   158,   155,
   nil,   161,   nil,   175,   171,   172,   192,   195,   196,   197,
   198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   230,   231,   154,   281,   364,   159,   367,   254,
   241,   nil,   nil,   nil,   261,   nil,   nil,   142,    91,    91,
   173,   nil,   nil,   262,   nil,   249,   377,   nil,    90,   249,
   nil,   nil,   249,   nil,   232,   nil,   269,   270,   256,   257,
   258,   259,   277,   nil,   nil,   nil,   nil,   248,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   250,   nil,   nil,   154,   nil,
   nil,   nil,   255,   280,   nil,   nil,   285,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   276,   nil,   nil,   nil,   nil,   nil,
   148,   293,   144,   144,   143,   143,   292,   nil,   279,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    91,   nil,   nil,   nil,   nil,   nil,   154,   nil,   nil,
   288,   nil,   290,   nil,   nil,   nil,   nil,   154,   nil,   nil,
   nil,   nil,   nil,   298,   154,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   318,   nil,   nil,   307,   nil,   nil,   nil,
   310,   295,   nil,   313,   314,   nil,   nil,   294,   nil,   nil,
   nil,   nil,   nil,   nil,   299,   325,   308,   nil,   326,   nil,
   nil,   333,   nil,   nil,    90,   nil,   nil,   nil,   nil,   nil,
   nil,   343,   344,   154,   345,   346,   nil,   348,   nil,   349,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    91,    90,   nil,   nil,   nil,
   nil,   nil,   nil,   332,   nil,   362,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   358,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   371,   nil,   nil,   373,   nil,   nil,   368,   nil,
   nil,   nil,   nil,   nil,   nil,   380,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   369,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    90,   nil,   nil,
   nil,   375,   nil,    90,   nil,   379,   nil,    90 ]

racc_goto_check = [
     4,     2,    27,    45,    37,    35,    36,    61,    44,    46,
    46,    59,    59,    26,    52,    20,    50,    43,    48,    28,
    24,    58,     3,    60,     1,    62,    56,   nil,    41,   nil,
   nil,   nil,   nil,   nil,    36,    20,   nil,   nil,    61,    20,
    20,    20,    54,    20,    20,    20,    20,    35,   nil,   nil,
     2,   nil,    57,   nil,   nil,   nil,   nil,    20,   nil,    20,
    20,    20,   nil,   nil,    20,   nil,   nil,    49,    20,    51,
   nil,    51,   nil,     4,    26,    26,    20,    20,    20,    20,
    20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
    20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
    20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
    20,    20,    20,    20,    20,    48,    56,    49,    56,    50,
    41,   nil,   nil,   nil,    54,   nil,   nil,    20,    49,    49,
    49,   nil,   nil,    50,   nil,    20,    56,   nil,     4,    20,
   nil,   nil,    20,   nil,    51,   nil,    57,    57,    20,    20,
    20,    20,    57,   nil,   nil,   nil,   nil,    26,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    51,   nil,   nil,    20,   nil,
   nil,   nil,    51,    20,   nil,   nil,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,
    27,    27,    37,    37,    36,    36,    44,   nil,    51,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    49,   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,
    20,   nil,    20,   nil,   nil,   nil,   nil,    20,   nil,   nil,
   nil,   nil,   nil,    20,    20,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    57,   nil,   nil,    20,   nil,   nil,   nil,
    20,    26,   nil,    20,    20,   nil,   nil,    51,   nil,   nil,
   nil,   nil,   nil,   nil,    51,    20,     2,   nil,    20,   nil,
   nil,    57,   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,
   nil,    57,    57,    20,    57,    57,   nil,    57,   nil,    57,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    49,     4,   nil,   nil,   nil,
   nil,   nil,   nil,    51,   nil,    57,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    57,   nil,   nil,    57,   nil,   nil,    20,   nil,
   nil,   nil,   nil,   nil,   nil,    57,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,
   nil,     2,   nil,     4,   nil,     2,   nil,     4 ]

racc_goto_pointer = [
   nil,    24,     1,   -68,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -18,   nil,   nil,   nil,   -38,   nil,     5,   -53,   -67,   nil,
   nil,   nil,   nil,   nil,   nil,  -270,   -49,   -51,   nil,   nil,
   nil,   -25,   nil,   -38,   -47,   -38,   -16,   nil,   -76,    59,
   -40,    12,   -50,   nil,   -49,   nil,  -236,   -32,  -283,  -165,
  -159,  -301,  -283 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    37,    38,    39,    40,    41,    42,    52,
    67,   nil,    54,   nil,   nil,   nil,   nil,    93,   nil,    56,
   nil,   253,    65,    66,   151,    71,   nil,   266,   nil,   nil,
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 100, :_reduce_1,
  1, 100, :_reduce_2,
  1, 101, :_reduce_3,
  3, 101, :_reduce_4,
  2, 101, :_reduce_5,
  1, 101, :_reduce_6,
  1, 102, :_reduce_7,
  1, 102, :_reduce_8,
  1, 102, :_reduce_9,
  1, 102, :_reduce_10,
  1, 102, :_reduce_11,
  1, 102, :_reduce_12,
  1, 102, :_reduce_13,
  1, 102, :_reduce_14,
  1, 102, :_reduce_15,
  1, 102, :_reduce_16,
  1, 102, :_reduce_17,
  1, 102, :_reduce_18,
  1, 102, :_reduce_19,
  1, 102, :_reduce_20,
  1, 102, :_reduce_21,
  1, 102, :_reduce_22,
  1, 102, :_reduce_23,
  1, 119, :_reduce_24,
  1, 119, :_reduce_25,
  1, 119, :_reduce_26,
  1, 119, :_reduce_27,
  1, 119, :_reduce_28,
  1, 119, :_reduce_29,
  1, 119, :_reduce_30,
  1, 119, :_reduce_31,
  1, 119, :_reduce_32,
  1, 119, :_reduce_33,
  1, 119, :_reduce_34,
  3, 119, :_reduce_35,
  1, 103, :_reduce_36,
  1, 103, :_reduce_37,
  1, 103, :_reduce_38,
  1, 126, :_reduce_39,
  1, 126, :_reduce_40,
  1, 126, :_reduce_41,
  1, 126, :_reduce_42,
  1, 126, :_reduce_43,
  1, 126, :_reduce_44,
  1, 126, :_reduce_45,
  1, 126, :_reduce_46,
  1, 126, :_reduce_47,
  1, 132, :_reduce_48,
  1, 133, :_reduce_49,
  1, 133, :_reduce_50,
  2, 128, :_reduce_51,
  1, 134, :_reduce_52,
  1, 137, :_reduce_53,
  1, 135, :_reduce_54,
  5, 139, :_reduce_55,
  3, 138, :_reduce_56,
  4, 138, :_reduce_57,
  0, 140, :_reduce_58,
  1, 140, :_reduce_59,
  3, 140, :_reduce_60,
  1, 136, :_reduce_61,
  3, 141, :_reduce_62,
  4, 141, :_reduce_63,
  0, 142, :_reduce_64,
  1, 142, :_reduce_65,
  3, 142, :_reduce_66,
  3, 143, :_reduce_67,
  2, 123, :_reduce_68,
  2, 123, :_reduce_69,
  2, 123, :_reduce_70,
  2, 124, :_reduce_71,
  3, 146, :_reduce_72,
  3, 146, :_reduce_73,
  4, 146, :_reduce_74,
  4, 146, :_reduce_75,
  3, 147, :_reduce_76,
  2, 147, :_reduce_77,
  2, 147, :_reduce_78,
  1, 147, :_reduce_79,
  1, 145, :_reduce_80,
  2, 145, :_reduce_81,
  2, 144, :_reduce_82,
  2, 144, :_reduce_83,
  5, 127, :_reduce_84,
  4, 127, :_reduce_85,
  4, 127, :_reduce_86,
  2, 127, :_reduce_87,
  4, 127, :_reduce_88,
  4, 120, :_reduce_89,
  2, 120, :_reduce_90,
  6, 104, :_reduce_91,
  5, 104, :_reduce_92,
  1, 148, :_reduce_93,
  0, 148, :_reduce_94,
  0, 150, :_reduce_95,
  1, 150, :_reduce_96,
  3, 150, :_reduce_97,
  3, 131, :_reduce_98,
  3, 131, :_reduce_99,
  3, 131, :_reduce_100,
  3, 131, :_reduce_101,
  3, 131, :_reduce_102,
  3, 131, :_reduce_103,
  3, 131, :_reduce_104,
  3, 131, :_reduce_105,
  3, 131, :_reduce_106,
  3, 131, :_reduce_107,
  3, 131, :_reduce_108,
  3, 131, :_reduce_109,
  3, 131, :_reduce_110,
  3, 131, :_reduce_111,
  3, 131, :_reduce_112,
  3, 131, :_reduce_113,
  3, 131, :_reduce_114,
  3, 131, :_reduce_115,
  3, 131, :_reduce_116,
  3, 131, :_reduce_117,
  3, 131, :_reduce_118,
  3, 131, :_reduce_119,
  3, 131, :_reduce_120,
  3, 131, :_reduce_121,
  3, 131, :_reduce_122,
  3, 131, :_reduce_123,
  3, 131, :_reduce_124,
  3, 131, :_reduce_125,
  3, 131, :_reduce_126,
  3, 131, :_reduce_127,
  3, 131, :_reduce_128,
  3, 131, :_reduce_129,
  3, 131, :_reduce_130,
  3, 131, :_reduce_131,
  2, 121, :_reduce_132,
  2, 121, :_reduce_133,
  2, 121, :_reduce_134,
  2, 122, :_reduce_135,
  1, 122, :_reduce_136,
  3, 151, :_reduce_137,
  3, 151, :_reduce_138,
  3, 151, :_reduce_139,
  3, 151, :_reduce_140,
  1, 152, :_reduce_141,
  1, 152, :_reduce_142,
  1, 152, :_reduce_143,
  1, 152, :_reduce_144,
  1, 152, :_reduce_145,
  2, 125, :_reduce_146,
  2, 125, :_reduce_147,
  2, 125, :_reduce_148,
  2, 107, :_reduce_149,
  2, 107, :_reduce_150,
  2, 107, :_reduce_151,
  4, 153, :_reduce_152,
  4, 153, :_reduce_153,
  2, 153, :_reduce_154,
  6, 105, :_reduce_155,
  9, 105, :_reduce_156,
  9, 105, :_reduce_157,
  11, 105, :_reduce_158,
  1, 154, :_reduce_159,
  1, 154, :_reduce_160,
  1, 154, :_reduce_161,
  1, 149, :_reduce_162,
  1, 149, :_reduce_163,
  1, 155, :_reduce_164,
  0, 155, :_reduce_165,
  0, 157, :_reduce_166,
  1, 157, :_reduce_167,
  3, 157, :_reduce_168,
  2, 106, :_reduce_169,
  2, 106, :_reduce_170,
  1, 118, :_reduce_171,
  4, 109, :_reduce_172,
  5, 109, :_reduce_173,
  3, 109, :_reduce_174,
  4, 110, :_reduce_175,
  5, 110, :_reduce_176,
  3, 110, :_reduce_177,
  5, 129, :_reduce_178,
  4, 112, :_reduce_179,
  1, 117, :_reduce_180,
  1, 117, :_reduce_181,
  4, 113, :_reduce_182,
  6, 111, :_reduce_183,
  6, 111, :_reduce_184,
  3, 114, :_reduce_185,
  4, 114, :_reduce_186,
  6, 114, :_reduce_187,
  0, 159, :_reduce_188,
  2, 159, :_reduce_189,
  3, 159, :_reduce_190,
  3, 159, :_reduce_191,
  4, 159, :_reduce_192,
  2, 156, :_reduce_193,
  1, 156, :_reduce_194,
  1, 158, :_reduce_195,
  3, 158, :_reduce_196,
  3, 158, :_reduce_197,
  4, 158, :_reduce_198,
  3, 160, :_reduce_199,
  4, 161, :_reduce_200,
  5, 161, :_reduce_201,
  4, 115, :_reduce_202,
  6, 115, :_reduce_203,
  2, 130, :_reduce_204,
  4, 116, :_reduce_205,
  1, 116, :_reduce_206,
  1, 108, :_reduce_207 ]

racc_reduce_n = 208

racc_shift_n = 382

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :ELSEIF => 4,
  :THEN => 5,
  :UNLESS => 6,
  :END => 7,
  :WHILE => 8,
  :UNTIL => 9,
  :BREAK => 10,
  :CONTINUE => 11,
  :TRY => 12,
  :CATCH => 13,
  :ENSURE => 14,
  :FOR => 15,
  :IN => 16,
  :DEF => 17,
  :DEF_BANG => 18,
  :SPLAT => 19,
  :CALL => 20,
  :BUILTIN_COMMAND => 21,
  :CLASS => 22,
  :NEW => 23,
  :DEFM => 24,
  :DEFM_BANG => 25,
  :SUPER => 26,
  :RIML_COMMAND => 27,
  :RETURN => 28,
  :NEWLINE => 29,
  :NUMBER => 30,
  :STRING_D => 31,
  :STRING_S => 32,
  :HEREDOC => 33,
  :EX_LITERAL => 34,
  :REGEXP => 35,
  :TRUE => 36,
  :FALSE => 37,
  :NIL => 38,
  :LET => 39,
  :UNLET => 40,
  :UNLET_BANG => 41,
  :IDENTIFIER => 42,
  :DICT_VAL => 43,
  :SCOPE_MODIFIER => 44,
  :SCOPE_MODIFIER_LITERAL => 45,
  :SPECIAL_VAR_PREFIX => 46,
  :FINISH => 47,
  "!" => 48,
  "*" => 49,
  "/" => 50,
  "%" => 51,
  "+" => 52,
  "-" => 53,
  "." => 54,
  ">" => 55,
  ">#" => 56,
  ">?" => 57,
  "<" => 58,
  "<#" => 59,
  "<?" => 60,
  ">=" => 61,
  ">=#" => 62,
  ">=?" => 63,
  "<=" => 64,
  "<=#" => 65,
  "<=?" => 66,
  "==" => 67,
  "==?" => 68,
  "==#" => 69,
  "=~" => 70,
  "=~?" => 71,
  "=~#" => 72,
  "!~" => 73,
  "!~?" => 74,
  "!~#" => 75,
  "!=" => 76,
  "!=?" => 77,
  "!=#" => 78,
  :IS => 79,
  :ISNOT => 80,
  "&&" => 81,
  "||" => 82,
  "?" => 83,
  "=" => 84,
  "+=" => 85,
  "-=" => 86,
  ".=" => 87,
  "," => 88,
  "(" => 89,
  ")" => 90,
  ";" => 91,
  "|" => 92,
  "[" => 93,
  "]" => 94,
  "{" => 95,
  "}" => 96,
  ":" => 97,
  "===" => 98 }

racc_nt_base = 99

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "ELSEIF",
  "THEN",
  "UNLESS",
  "END",
  "WHILE",
  "UNTIL",
  "BREAK",
  "CONTINUE",
  "TRY",
  "CATCH",
  "ENSURE",
  "FOR",
  "IN",
  "DEF",
  "DEF_BANG",
  "SPLAT",
  "CALL",
  "BUILTIN_COMMAND",
  "CLASS",
  "NEW",
  "DEFM",
  "DEFM_BANG",
  "SUPER",
  "RIML_COMMAND",
  "RETURN",
  "NEWLINE",
  "NUMBER",
  "STRING_D",
  "STRING_S",
  "HEREDOC",
  "EX_LITERAL",
  "REGEXP",
  "TRUE",
  "FALSE",
  "NIL",
  "LET",
  "UNLET",
  "UNLET_BANG",
  "IDENTIFIER",
  "DICT_VAL",
  "SCOPE_MODIFIER",
  "SCOPE_MODIFIER_LITERAL",
  "SPECIAL_VAR_PREFIX",
  "FINISH",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\".\"",
  "\">\"",
  "\">#\"",
  "\">?\"",
  "\"<\"",
  "\"<#\"",
  "\"<?\"",
  "\">=\"",
  "\">=#\"",
  "\">=?\"",
  "\"<=\"",
  "\"<=#\"",
  "\"<=?\"",
  "\"==\"",
  "\"==?\"",
  "\"==#\"",
  "\"=~\"",
  "\"=~?\"",
  "\"=~#\"",
  "\"!~\"",
  "\"!~?\"",
  "\"!~#\"",
  "\"!=\"",
  "\"!=?\"",
  "\"!=#\"",
  "IS",
  "ISNOT",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\"=\"",
  "\"+=\"",
  "\"-=\"",
  "\".=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"|\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\":\"",
  "\"===\"",
  "$start",
  "Root",
  "Expressions",
  "AnyExpression",
  "Terminator",
  "ExplicitCall",
  "Def",
  "Return",
  "UnletVariable",
  "ExLiteral",
  "If",
  "Unless",
  "For",
  "While",
  "Until",
  "Try",
  "ClassDefinition",
  "Super",
  "LoopKeyword",
  "EndScript",
  "ValueExpression",
  "RimlCommand",
  "UnaryOperator",
  "Assign",
  "DictGet",
  "ListOrDictGet",
  "VariableRetrieval",
  "Literal",
  "Call",
  "Heredoc",
  "Ternary",
  "ObjectInstantiation",
  "BinaryOperator",
  "Number",
  "String",
  "Regexp",
  "List",
  "Dictionary",
  "ScopeModifierLiteral",
  "ListLiteral",
  "ListUnpack",
  "ListItems",
  "DictionaryLiteral",
  "DictItems",
  "DictItem",
  "DictGetWithDotLiteral",
  "DictGetWithDot",
  "ListOrDictGetWithBrackets",
  "SubList",
  "Scope",
  "DefCallIdentifier",
  "ArgList",
  "AssignExpression",
  "AssignLHS",
  "CurlyBraceName",
  "FunctionType",
  "Keyword",
  "Block",
  "ParamList",
  "IfBlock",
  "Catch",
  "ElseBlock",
  "ElseifBlock" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_3(val, _values, result)
     result = Nodes.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_21(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_26(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_27(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_28(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_32(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_33(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_34(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_35(val, _values, result)
     result = WrapInParensNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_36(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_37(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_38(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_40(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_41(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_42(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_45(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_46(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_47(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_48(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_49(val, _values, result)
     result = StringNode.new(val[0], :s) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_50(val, _values, result)
     result = StringNode.new(val[0], :d) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_51(val, _values, result)
     result = HeredocNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 121)
  def _reduce_52(val, _values, result)
     result = RegexpNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 125)
  def _reduce_53(val, _values, result)
     result = ScopeModifierLiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_54(val, _values, result)
     result = ListNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_55(val, _values, result)
     result = ListUnpackNode.new(val[1] << val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_56(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_57(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_58(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_60(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_61(val, _values, result)
     result = DictionaryNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 153)
  def _reduce_62(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_63(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_64(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_65(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 161)
  def _reduce_66(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_67(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 170)
  def _reduce_68(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_69(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_70(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_71(val, _values, result)
     result = ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_72(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 181)
  def _reduce_73(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_74(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_75(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 187)
  def _reduce_76(val, _values, result)
     result = SublistNode.new([val[0], LiteralNode.new(' : '), val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 188)
  def _reduce_77(val, _values, result)
     result = SublistNode.new([val[0], LiteralNode.new(' :')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 189)
  def _reduce_78(val, _values, result)
     result = SublistNode.new([LiteralNode.new(': '), val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 190)
  def _reduce_79(val, _values, result)
     result = SublistNode.new([LiteralNode.new(':')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 194)
  def _reduce_80(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 195)
  def _reduce_81(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 199)
  def _reduce_82(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 200)
  def _reduce_83(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 204)
  def _reduce_84(val, _values, result)
     result = CallNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 205)
  def _reduce_85(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 206)
  def _reduce_86(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 207)
  def _reduce_87(val, _values, result)
     result = CallNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_88(val, _values, result)
     result = ExplicitCallNode.new(nil, nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 212)
  def _reduce_89(val, _values, result)
     result = RimlCommandNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_90(val, _values, result)
     result = RimlCommandNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 217)
  def _reduce_91(val, _values, result)
     result = ExplicitCallNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_92(val, _values, result)
     result = ExplicitCallNode.new(nil, val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 222)
  def _reduce_93(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 223)
  def _reduce_94(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 227)
  def _reduce_95(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 228)
  def _reduce_96(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_97(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_98(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_99(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_100(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_101(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 238)
  def _reduce_102(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 241)
  def _reduce_103(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 243)
  def _reduce_104(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_105(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_106(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 247)
  def _reduce_107(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 248)
  def _reduce_108(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 249)
  def _reduce_109(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 251)
  def _reduce_110(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_111(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 253)
  def _reduce_112(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 255)
  def _reduce_113(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 256)
  def _reduce_114(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_115(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 259)
  def _reduce_116(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 260)
  def _reduce_117(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 261)
  def _reduce_118(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_119(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 264)
  def _reduce_120(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 265)
  def _reduce_121(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 267)
  def _reduce_122(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 268)
  def _reduce_123(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 269)
  def _reduce_124(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 271)
  def _reduce_125(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 272)
  def _reduce_126(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 273)
  def _reduce_127(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_128(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 275)
  def _reduce_129(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 277)
  def _reduce_130(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 278)
  def _reduce_131(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 282)
  def _reduce_132(val, _values, result)
     result = UnaryOperatorNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 283)
  def _reduce_133(val, _values, result)
     result = UnaryOperatorNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 284)
  def _reduce_134(val, _values, result)
     result = UnaryOperatorNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 289)
  def _reduce_135(val, _values, result)
     result = AssignNode.new(val[1][0], val[1][1], val[1][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 290)
  def _reduce_136(val, _values, result)
     result = AssignNode.new(val[0][0], val[0][1], val[0][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 295)
  def _reduce_137(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 296)
  def _reduce_138(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 297)
  def _reduce_139(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 298)
  def _reduce_140(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 302)
  def _reduce_141(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 303)
  def _reduce_142(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 304)
  def _reduce_143(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 305)
  def _reduce_144(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_145(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 311)
  def _reduce_146(val, _values, result)
     result = GetVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 312)
  def _reduce_147(val, _values, result)
     result = GetSpecialVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 313)
  def _reduce_148(val, _values, result)
     result = GetCurlyBraceNameNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 317)
  def _reduce_149(val, _values, result)
     result = UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_150(val, _values, result)
     result = UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 319)
  def _reduce_151(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 323)
  def _reduce_152(val, _values, result)
     result = CurlyBraceVariable.new([ CurlyBracePart.new(val[0]), CurlyBracePart.new(val[2]) ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 324)
  def _reduce_153(val, _values, result)
     result = CurlyBraceVariable.new([ CurlyBracePart.new(val[1]), CurlyBracePart.new(val[3]) ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 325)
  def _reduce_154(val, _values, result)
     result = val[0] << CurlyBracePart.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 331)
  def _reduce_155(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], [], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 332)
  def _reduce_156(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], val[4], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 333)
  def _reduce_157(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], [val[4]], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_158(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], val[4] << val[6], val[8], val[9]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 338)
  def _reduce_159(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 339)
  def _reduce_160(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 340)
  def _reduce_161(val, _values, result)
     result = "DefMethodNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 345)
  def _reduce_162(val, _values, result)
     result = GetCurlyBraceNameNode.new('', val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 346)
  def _reduce_163(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 351)
  def _reduce_164(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 352)
  def _reduce_165(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 356)
  def _reduce_166(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_167(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 358)
  def _reduce_168(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 362)
  def _reduce_169(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 363)
  def _reduce_170(val, _values, result)
     result = ReturnNode.new(nil)    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 367)
  def _reduce_171(val, _values, result)
     result = FinishNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 372)
  def _reduce_172(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 373)
  def _reduce_173(val, _values, result)
     result = IfNode.new(val[1], Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 374)
  def _reduce_174(val, _values, result)
     result = IfNode.new(val[2], Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_175(val, _values, result)
     result = UnlessNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 379)
  def _reduce_176(val, _values, result)
     result = UnlessNode.new(val[1], Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 380)
  def _reduce_177(val, _values, result)
     result = UnlessNode.new(val[2], Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 384)
  def _reduce_178(val, _values, result)
     result = TernaryOperatorNode.new([val[0], val[2], val[4]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 388)
  def _reduce_179(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 392)
  def _reduce_180(val, _values, result)
     result = BreakNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 393)
  def _reduce_181(val, _values, result)
     result = ContinueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 397)
  def _reduce_182(val, _values, result)
     result = UntilNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 401)
  def _reduce_183(val, _values, result)
     result = ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 402)
  def _reduce_184(val, _values, result)
     result = ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 406)
  def _reduce_185(val, _values, result)
     result = TryNode.new(val[1], nil, nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 407)
  def _reduce_186(val, _values, result)
     result = TryNode.new(val[1], val[2], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 408)
  def _reduce_187(val, _values, result)
     result = TryNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 412)
  def _reduce_188(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 413)
  def _reduce_189(val, _values, result)
     result = [ CatchNode.new(nil, val[1]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 414)
  def _reduce_190(val, _values, result)
     result = [ CatchNode.new(val[1], val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 415)
  def _reduce_191(val, _values, result)
     result = val[0] << CatchNode.new(nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 416)
  def _reduce_192(val, _values, result)
     result = val[0] << CatchNode.new(val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 423)
  def _reduce_193(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 424)
  def _reduce_194(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 428)
  def _reduce_195(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 429)
  def _reduce_196(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 430)
  def _reduce_197(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 431)
  def _reduce_198(val, _values, result)
     result = val[1] << val[2] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 435)
  def _reduce_199(val, _values, result)
     result = ElseNode.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 439)
  def _reduce_200(val, _values, result)
     result = Nodes.new([ElseifNode.new(val[1], val[3])]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 440)
  def _reduce_201(val, _values, result)
     result = val[0] << ElseifNode.new(val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 444)
  def _reduce_202(val, _values, result)
     result = ClassDefinitionNode.new(val[1], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 445)
  def _reduce_203(val, _values, result)
     result = ClassDefinitionNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 449)
  def _reduce_204(val, _values, result)
     result = ObjectInstantiationNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 453)
  def _reduce_205(val, _values, result)
     result = SuperNode.new(val[2], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 454)
  def _reduce_206(val, _values, result)
     result = SuperNode.new([], false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 458)
  def _reduce_207(val, _values, result)
     result = ExLiteralNode.new(val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
