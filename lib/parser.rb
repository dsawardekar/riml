#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require File.expand_path("../ast_rewriter", __FILE__)
  require File.expand_path("../errors", __FILE__)
module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 450)
  # This code will be put as-is in the parser class

  # parses tokens or code into output nodes
  def parse(object, rewrite_ast = true)
    if tokens?(object)
      @tokens = object
    elsif code?(object)
      @lexer = Riml::Lexer.new(object)
    end
    ast = do_parse
    return ast if rewrite_ast == false
    AST_Rewriter.new(ast).rewrite
  end

  alias do_parse_without_error_handling do_parse
  def do_parse_with_error_handling
    do_parse_without_error_handling
  rescue Racc::ParseError => e
    raise unless @lexer
    raise Riml::ParseError,  "line #{@lexer.lineno}: #{e.message}"
  end
  alias do_parse do_parse_with_error_handling

  def next_token
    return @tokens.shift unless @lexer
    @lexer.next_token
  end

  private
  def tokens?(object)
    Array === object
  end

  def code?(object)
    String === object
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'120,128,180,183,121,136,136,327,355,241,56,57,308,349,56,57,239,240',
'310,309,183,-158,238,304,247,183,49,244,124,328,356,49,256,58,274,63',
'251,58,294,63,128,124,124,251,120,323,115,116,121,113,124,114,52,117',
'101,102,103,107,108,109,104,105,106,110,111,112,88,90,89,95,97,96,98',
'100,99,92,94,93,118,119,87,86,122,54,150,52,235,54,120,124,115,116,121',
'113,91,114,305,117,101,102,103,107,108,109,104,105,106,110,111,112,88',
'90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,115,116,115,116',
'251,120,320,115,116,121,113,91,114,302,117,101,102,103,107,108,109,104',
'105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87',
'86,122,115,116,115,116,91,120,91,115,116,121,113,91,114,243,117,101',
'102,103,107,108,109,104,105,106,110,111,112,88,90,89,95,97,96,98,100',
'99,92,94,93,118,119,87,86,122,115,116,47,46,91,120,91,115,116,121,113',
'91,114,299,117,101,102,103,107,108,109,104,105,106,110,111,112,88,90',
'89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,269,148,245,298,91',
'120,271,115,116,121,113,91,114,237,117,101,102,103,107,108,109,104,105',
'106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122',
'31,233,31,245,31,297,31,115,116,150,113,91,114,31,117,101,102,103,107',
'108,109,104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93',
'118,119,87,86,122,120,313,126,264,121,-157,124,346,347,150,276,91,56',
'57,58,314,63,32,33,32,33,32,33,32,33,126,261,244,236,124,32,33,148,227',
'-92,58,58,63,63,58,58,63,63,251,120,283,115,116,121,113,251,114,341',
'117,101,102,103,107,108,109,104,105,106,110,111,112,88,90,89,95,97,96',
'98,100,99,92,94,93,118,119,87,86,122,318,150,54,-92,344,120,343,115',
'116,121,113,91,114,227,117,101,102,103,107,108,109,104,105,106,110,111',
'112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,58,251,63',
'315,232,232,128,115,116,321,113,91,114,322,117,101,102,103,107,108,109',
'104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119',
'87,86,122,120,124,-195,332,121,227,227,317,183,293,280,91,188,187,184',
'183,58,183,251,183,183,291,91,-86,128,342,267,31,345,245,170,242,350',
'351,183,353,115,116,-85,113,298,114,244,117,298,358,115,116,268,113',
'281,114,183,117,101,102,103,107,108,109,104,105,106,110,111,112,88,90',
'89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,120,91,362,183,121',
'32,33,279,138,137,280,91,91,367,298,369,124,91,124,183,84,372,,,,,43',
'47,46,,,49,40,41,42,,,115,116,,113,50,114,,117,,115,116,45,113,44,114',
',117,101,102,103,107,108,109,104,105,106,110,111,112,88,90,89,95,97',
'96,98,100,99,92,94,93,118,119,87,86,122,120,,91,235,121,52,,54,286,',
',91,,,,,,,,,,,,,,,365,,,,,,,,,115,116,,113,,114,,117,,120,,115,116,121',
'113,,114,,117,101,102,103,107,108,109,104,105,106,110,111,112,88,90',
'89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,91,,,,,120,,115,116',
'121,113,91,114,,117,101,102,103,107,108,109,104,105,106,110,111,112',
'88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,,,,,,120,,115',
'116,121,113,91,114,,117,101,102,103,107,108,109,104,105,106,110,111',
'112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,,,,,,,,115',
'116,,113,91,114,,117,101,102,103,107,108,109,104,105,106,110,111,112',
'88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,120,,,,121,,',
',,,,91,,,,,,,,,,,,,,,183,,43,47,46,,,49,40,41,42,115,116,,113,,114,50',
'117,,115,116,,113,45,114,44,117,101,102,103,107,108,109,104,105,106',
'110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,120',
',91,,121,329,,52,,54,,91,,,,,,,,,,,,,,,43,47,46,,,49,40,41,42,,,115',
'116,,113,50,114,,117,,115,116,45,113,44,114,,117,101,102,103,107,108',
'109,104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118',
'119,87,86,122,120,,91,,121,52,,54,,,,91,,,,,,,,,,,,,,,183,,,,,,,,,115',
'116,,113,,114,,117,,120,,115,116,121,113,,114,,117,101,102,103,107,108',
'109,104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118',
'119,87,86,122,91,,,,,,,115,116,,113,91,114,,117,101,102,103,107,108',
'109,104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118',
'119,87,86,122,120,,,260,121,-139,,-139,,,,91,,,,,,,,,,,,,,,261,,,,,',
',,,,115,116,-139,113,,114,,117,,,115,116,,113,-139,114,,117,101,102',
'103,107,108,109,104,105,106,110,111,112,88,90,89,95,97,96,98,100,99',
'92,94,93,118,119,87,86,122,120,91,115,116,121,113,,114,,117,,91,,,,',
',,,,,,,,,,183,,,,,,,,,,115,116,,113,,114,,117,,,115,116,,113,91,114',
',117,101,102,103,107,108,109,104,105,106,110,111,112,88,90,89,95,97',
'96,98,100,99,92,94,93,118,119,87,86,122,120,91,,,121,333,,167,,168,',
'91,,,,,,,,,,,,,,,,,,,,,,,,,115,116,,113,166,114,,117,,,115,116,,113',
',114,169,117,101,102,103,107,108,109,104,105,106,110,111,112,88,90,89',
'95,97,96,98,100,99,92,94,93,118,119,87,86,122,120,91,115,116,121,113',
',114,,117,,91,,,,,,,,,,,,,,,183,,,,,,,,,115,116,,113,,114,,117,,120',
',115,116,121,113,91,114,,117,101,102,103,107,108,109,104,105,106,110',
'111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,91,,',
',,,,115,116,,113,91,114,,117,101,102,103,107,108,109,104,105,106,110',
'111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,120,',
',-138,121,-138,,,,,,91,,,,,,,,,,,,,,,360,,,,,,,,,,-138,,126,,,,124,',
',,115,116,-138,113,,114,,117,101,102,103,107,108,109,104,105,106,110',
'111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,72,,',
',73,,74,77,75,76,79,91,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48',
'83,49,40,41,42,60,64,65,,,58,50,63,71,59,,128,,45,,44,,,,,128,-140,',
'-140,,,,,,,-137,,-137,,,,,,,,,,,,,,,,,30,,,72,52,-140,54,73,230,74,77',
'75,76,79,-137,,78,-140,67,68,124,56,57,80,81,69,-137,82,70,,43,47,46',
'48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,115,116,,113,',
'114,,117,101,102,103,107,108,109,104,105,106,110,111,112,,,,,,,,,,,',
',,30,,,72,52,,54,73,230,74,77,75,76,79,,91,78,,67,68,,56,57,80,81,69',
',82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,',
'44,115,116,,113,,114,,117,101,102,103,107,108,109,104,105,106,110,111',
'112,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,91,67,68,,56,57',
'80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59',
',,,45,,44,115,116,,113,,114,,117,101,102,103,107,108,109,104,105,106',
'110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,,30,72,,,52,73,54,74',
'77,75,76,79,,,78,91,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49',
'40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,115,116,,113,,114,,117',
'101,102,103,107,108,109,104,105,106,110,111,112,,,,,,,,,,,,,,30,72,',
',52,73,54,74,77,75,76,79,,,78,91,67,68,,56,57,80,81,69,,82,70,,43,47',
'46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,115,116,,113',
',114,,117,101,102,103,107,108,109,104,105,106,110,111,112,,,,,,,,,,',
',,,30,72,,,52,73,54,74,77,75,76,79,,,78,91,67,68,,56,57,80,81,69,,82',
'70,31,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44',
'115,116,,113,,114,,117,101,102,103,107,108,109,104,105,106,110,111,112',
',,,,,,,,,,,,,30,72,32,33,52,73,54,74,77,75,76,79,,,78,91,67,68,,56,57',
'80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59',
',,,45,,44,115,116,,113,,114,,117,101,102,103,107,108,109,104,105,106',
'110,111,112,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,91,67',
'68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58',
'50,63,71,59,,,,45,,44,115,116,,113,,114,,117,101,102,103,107,108,109',
'104,105,106,110,111,112,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79',
',,78,91,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60',
'64,65,,,58,50,63,71,59,,,,45,,44,115,116,,113,,114,,117,101,102,103',
'107,108,109,104,105,106,110,111,112,,,,,,,,,,,,,,30,72,,,52,73,54,74',
'77,75,76,79,,,78,91,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49',
'40,41,42,60,64,65,-92,,58,50,63,71,59,,,,45,,44,115,116,,113,,114,,117',
'101,102,103,107,108,109,104,105,106,110,111,112,,,,,,,,,,,,,,157,72',
',,52,73,54,74,77,75,76,79,,,78,91,67,68,,56,57,80,81,69,,82,70,,43,47',
'46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,115,116,,113',
',114,,117,101,102,103,107,108,109,104,105,106,110,111,112,,,,,,,,,,',
',,,30,,,72,52,284,54,73,,74,77,75,76,79,,91,78,,67,68,,56,57,80,81,69',
',82,70,,43,47,46,48,83,49,40,41,42,60,64,65,-92,,58,50,63,71,59,,,,45',
',44,115,116,,113,,114,,117,101,102,103,107,108,109,104,105,106,110,111',
'112,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,91,67,68,,56,57',
'80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59',
',,,45,,44,115,116,,113,,114,,117,101,102,103,107,108,109,104,105,106',
'110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,,30,72,,,52,73,54,74',
'77,75,76,79,,,78,91,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49',
'40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,115,116,,113,,114,,117',
'101,102,103,107,108,109,104,105,106,110,111,112,,,,,,,,,,,,,,30,72,',
',52,73,54,74,77,75,76,79,,,78,91,67,68,,56,57,80,81,69,,82,70,,43,47',
'46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56',
'57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71',
'59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77',
'75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41',
'42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82',
'70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78',
',67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,',
',58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52',
'73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48',
'83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80',
'81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,',
',,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75',
'76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42',
'60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70',
',43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67',
'68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58',
'50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73',
'54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83',
'49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81',
'69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45',
',44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79',
',,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64',
'65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72',
',,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47',
'46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56',
'57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71',
'59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77',
'75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41',
'42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82',
'70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78',
',67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,',
',58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52',
'73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48',
'83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80',
'81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,',
',,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75',
'76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42',
'60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70',
',43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67',
'68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58',
'50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73',
'54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83',
'49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81',
'69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45',
',44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79',
',,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64',
'65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72',
',,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47',
'46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56',
'57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71',
'59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77',
'75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41',
'42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82',
'70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78',
',67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,',
',58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52',
'73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48',
'83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80',
'81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,',
',,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75',
'76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42',
'60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70',
',43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67',
'68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58',
'50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73',
'54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83',
'49,40,41,42,60,64,65,-92,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80',
'81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,-92,,58,50,63,71,59',
',,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75',
'76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42',
'60,64,65,-92,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82',
'70,,43,47,46,48,83,49,40,41,42,60,64,65,-92,,58,50,63,71,59,,,,45,,44',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78',
',67,68,,56,57,80,81,69,,82,70,31,43,47,46,48,83,49,40,41,42,60,64,65',
',,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,32',
'33,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47',
'46,48,83,49,40,41,42,60,64,65,-92,,58,50,63,71,59,,,,45,,44,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68',
',56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50',
'63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54',
'74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,31,43,47,46,48,83',
'49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,30,72,32,33,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57',
'80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59',
',,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75',
'76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42',
'60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70',
',43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67',
'68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58',
'50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73',
'54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,31,43,47,46,48',
'83,49,40,41,42,60,64,65,-92,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,30,72,32,33,52,73,54,74,77,75,76,79,,,78,,67,68,',
'56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63',
'71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74',
'77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40',
'41,42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,30,,,72,52,,54,73,-189,74,77,75,76,79,,,78,,67,68,,56,57,80,81',
'69,,82,70,31,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,',
',45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,32,33,52,73,54,74,77',
'75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41',
'42,60,64,65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82',
'70,31,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,,,,45,,44',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,32,33,52,73,54,74,77,75,76,79',
',,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64',
'65,,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72',
',,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47',
'46,48,83,49,40,41,42,60,64,65,-92,,58,50,63,71,59,,,,45,,44,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68',
',56,57,80,81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,-92,,58',
'50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73',
'54,74,77,75,76,79,,,78,,67,68,,56,57,80,81,69,,82,70,,43,47,46,48,83',
'49,40,41,42,60,64,65,-92,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80',
'81,69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,,,58,50,63,71,59,',
',,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,52,73,54,74,77,75',
'76,79,,,78,,67,68,,56,57,80,81,69,,82,70,31,43,47,46,48,83,49,40,41',
'42,60,64,65,-92,,58,50,63,71,59,,,,45,,44,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,30,72,32,33,52,73,54,74,77,75,76,79,,,78,,67,68,,56,57,80,81',
'69,,82,70,,43,47,46,48,83,49,40,41,42,60,64,65,-92,,58,50,63,71,59,',
'115,116,45,113,44,114,,117,101,102,103,107,108,109,104,105,106,110,111',
'112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,,30,,,,52',
',54,,115,116,91,113,,114,,117,101,102,103,107,108,109,104,105,106,110',
'111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,,,,,,,,115,116',
',113,,114,91,117,101,102,103,107,108,109,104,105,106,110,111,112,88',
'90,89,95,97,96,98,100,99,92,94,93,118,119,,,,,,,,,115,116,,113,,114',
'91,117,101,102,103,107,108,109,104,105,106,110,111,112,88,90,89,95,97',
'96,98,100,99,92,94,93,118,119,87,86,122,,,,,,115,116,,113,,114,91,117',
'101,102,103,107,108,109,104,105,106,110,111,112,88,90,89,95,97,96,98',
'100,99,92,94,93,118,119,87,86,122,,,,,,115,116,,113,,114,91,117,101',
'102,103,107,108,109,104,105,106,110,111,112,88,90,89,95,97,96,98,100',
'99,92,94,93,118,119,87,86,122,,,,,,,,,,,,91' ]
        racc_action_table = arr = ::Array.new(8419, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'249,152,78,184,249,151,38,297,344,144,56,56,270,334,60,60,140,144,270',
'270,271,148,140,265,154,310,271,148,154,297,344,310,173,56,184,56,250',
'60,250,60,161,151,38,292,195,292,249,249,195,249,152,249,78,249,249',
'249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249',
'249,249,249,249,249,249,249,249,249,249,249,56,173,60,249,60,189,161',
'195,195,189,195,249,195,266,195,195,195,195,195,195,195,195,195,195',
'195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195',
'195,195,195,254,254,253,253,289,3,289,189,189,3,189,195,189,263,189',
'189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189',
'189,189,189,189,189,189,189,189,189,189,189,189,217,217,218,218,254',
'159,253,3,3,159,3,189,3,147,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3',
'3,3,3,3,3,3,3,3,3,3,221,221,48,48,217,255,218,159,159,255,159,3,159',
'259,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159',
'159,159,159,159,159,159,159,159,159,159,159,159,159,159,182,156,257',
'258,221,226,182,255,255,226,255,159,255,136,255,255,255,255,255,255',
'255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255',
'255,255,255,255,255,255,255,2,131,272,149,370,258,364,226,226,156,226',
'255,226,366,226,226,226,226,226,226,226,226,226,226,226,226,226,226',
'226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,177',
'273,163,177,177,149,163,331,331,131,226,226,81,81,244,274,244,2,2,272',
'272,370,370,364,364,185,177,256,135,185,366,366,55,134,14,81,14,81,14',
'150,64,150,64,231,141,231,177,177,141,177,324,177,324,177,177,177,177',
'177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177',
'177,177,177,177,177,177,177,177,177,278,55,81,14,326,277,326,141,141',
'277,141,177,141,130,141,141,141,141,141,141,141,141,141,141,141,141',
'141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141',
'141,65,275,65,275,129,127,153,277,277,290,277,141,277,291,277,277,277',
'277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277',
'277,277,277,277,277,277,277,277,277,277,228,155,301,301,228,125,123',
'277,296,248,277,277,84,82,80,79,66,309,158,312,314,246,160,323,162,325',
'180,301,327,234,63,146,335,336,338,340,205,205,341,205,343,205,233,205',
'345,346,228,228,181,228,229,228,354,228,228,228,228,228,228,228,228',
'228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228',
'228,228,228,228,228,133,205,355,357,133,301,301,228,45,44,228,228,220',
'361,362,363,186,219,7,368,1,371,,,,,241,241,241,,,241,241,241,241,,',
'206,206,,206,241,206,,206,,133,133,241,133,241,133,,133,133,133,133',
'133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133',
'133,133,133,133,133,133,133,133,133,359,,206,133,359,241,,241,241,,',
'133,,,,,,,,,,,,,,,359,,,,,,,,,207,207,,207,,207,,207,,282,,359,359,282',
'359,,359,,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359',
'359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,207,,,,',
'316,,282,282,316,282,359,282,,282,282,282,282,282,282,282,282,282,282',
'282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282',
'282,282,282,,,,,,285,,316,316,285,316,282,316,,316,316,316,316,316,316',
'316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316',
'316,316,316,316,316,316,316,,,,,,,,285,285,,285,316,285,,285,285,285',
'285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285',
'285,285,285,285,285,285,285,285,285,285,307,,,,307,,,,,,,285,,,,,,,',
',,,,,,,307,,54,54,54,,,54,54,54,54,208,208,,208,,208,54,208,,307,307',
',307,54,307,54,307,307,307,307,307,307,307,307,307,307,307,307,307,307',
'307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,300',
',208,,300,300,,54,,54,,307,,,,,,,,,,,,,,,242,242,242,,,242,242,242,242',
',,209,209,,209,242,209,,209,,300,300,242,300,242,300,,300,300,300,300',
'300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300',
'300,300,300,300,300,300,300,300,300,179,,209,,179,242,,242,,,,300,,',
',,,,,,,,,,,,179,,,,,,,,,210,210,,210,,210,,210,,174,,179,179,174,179',
',179,,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179',
'179,179,179,179,179,179,179,179,179,179,179,179,179,179,210,,,,,,,174',
'174,,174,179,174,,174,174,174,174,174,174,174,174,174,174,174,174,174',
'174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174',
'176,,,176,176,37,,37,,,,174,,,,,,,,,,,,,,,176,,,,,,,,,,211,211,37,211',
',211,,211,,,176,176,,176,37,176,,176,176,176,176,176,176,176,176,176',
'176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176',
'176,176,176,176,178,211,212,212,178,212,,212,,212,,176,,,,,,,,,,,,,',
',178,,,,,,,,,,213,213,,213,,213,,213,,,178,178,,178,212,178,,178,178',
'178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178',
'178,178,178,178,178,178,178,178,178,178,178,303,213,,,303,303,,62,,62',
',178,,,,,,,,,,,,,,,,,,,,,,,,,214,214,,214,62,214,,214,,,303,303,,303',
',303,62,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,306,214',
'215,215,306,215,,215,,215,,303,,,,,,,,,,,,,,,306,,,,,,,,,216,216,,216',
',216,,216,,319,,306,306,319,306,215,306,,306,306,306,306,306,306,306',
'306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306',
'306,306,306,306,306,306,216,,,,,,,319,319,,319,306,319,,319,319,319',
'319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319',
'319,319,319,319,319,319,319,319,319,319,348,,,9,348,9,,,,,,319,,,,,',
',,,,,,,,,348,,,,,,,,,,9,,9,,,,9,,,,348,348,9,348,,348,,348,348,348,348',
'348,348,348,348,348,348,348,348,348,348,348,348,348,348,348,348,348',
'348,348,348,348,348,348,348,348,348,124,,,,124,,124,124,124,124,124',
'348,,124,,124,124,,124,124,124,124,124,,124,124,,124,124,124,124,124',
'124,124,124,124,124,124,124,,,124,124,124,124,124,,10,,124,,124,,,,',
'13,10,,10,,,,,,,13,,13,,,,,,,,,,,,,,,,,124,,,227,124,10,124,227,124',
'227,227,227,227,227,13,,227,10,227,227,13,227,227,227,227,227,13,227',
'227,,227,227,227,227,227,227,227,227,227,227,227,227,,,227,227,227,227',
'227,,,,227,,227,193,193,,193,,193,,193,193,193,193,193,193,193,193,193',
'193,193,193,193,,,,,,,,,,,,,,227,,,122,227,,227,122,227,122,122,122',
'122,122,,193,122,,122,122,,122,122,122,122,122,,122,122,,122,122,122',
'122,122,122,122,122,122,122,122,122,,,122,122,122,122,122,,,,122,,122',
'192,192,,192,,192,,192,192,192,192,192,192,192,192,192,192,192,192,192',
',,,,,,,,,,,,,122,73,,,122,73,122,73,73,73,73,73,,,73,192,73,73,,73,73',
'73,73,73,,73,73,,73,73,73,73,73,73,73,73,73,73,73,73,,,73,73,73,73,73',
',,,73,,73,222,222,,222,,222,,222,222,222,222,222,222,222,222,222,222',
'222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,,73,74,',
',73,74,73,74,74,74,74,74,,,74,222,74,74,,74,74,74,74,74,,74,74,,74,74',
'74,74,74,74,74,74,74,74,74,74,,,74,74,74,74,74,,,,74,,74,196,196,,196',
',196,,196,196,196,196,196,196,196,196,196,196,196,196,196,,,,,,,,,,',
',,,74,77,,,74,77,74,77,77,77,77,77,,,77,196,77,77,,77,77,77,77,77,,77',
'77,,77,77,77,77,77,77,77,77,77,77,77,77,,,77,77,77,77,77,,,,77,,77,197',
'197,,197,,197,,197,197,197,197,197,197,197,197,197,197,197,197,197,',
',,,,,,,,,,,,77,70,,,77,70,77,70,70,70,70,70,,,70,197,70,70,,70,70,70',
'70,70,,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,,,70,70,70,70,70',
',,,70,,70,198,198,,198,,198,,198,198,198,198,198,198,198,198,198,198',
'198,198,198,,,,,,,,,,,,,,70,332,70,70,70,332,70,332,332,332,332,332',
',,332,198,332,332,,332,332,332,332,332,,332,332,,332,332,332,332,332',
'332,332,332,332,332,332,332,,,332,332,332,332,332,,,,332,,332,199,199',
',199,,199,,199,199,199,199,199,199,199,199,199,199,199,199,199,,,,,',
',,,,,,,,332,347,,,332,347,332,347,347,347,347,347,,,347,199,347,347',
',347,347,347,347,347,,347,347,,347,347,347,347,347,347,347,347,347,347',
'347,347,,,347,347,347,347,347,,,,347,,347,200,200,,200,,200,,200,200',
'200,200,200,200,200,200,200,200,200,200,200,,,,,,,,,,,,,,347,59,,,347',
'59,347,59,59,59,59,59,,,59,200,59,59,,59,59,59,59,59,,59,59,,59,59,59',
'59,59,59,59,59,59,59,59,59,,,59,59,59,59,59,,,,59,,59,201,201,,201,',
'201,,201,201,201,201,201,201,201,201,201,201,201,201,201,,,,,,,,,,,',
',,59,57,,,59,57,59,57,57,57,57,57,,,57,201,57,57,,57,57,57,57,57,,57',
'57,,57,57,57,57,57,57,57,57,57,57,57,57,57,,57,57,57,57,57,,,,57,,57',
'202,202,,202,,202,,202,202,202,202,202,202,202,202,202,202,202,202,202',
',,,,,,,,,,,,,57,239,,,57,239,57,239,239,239,239,239,,,239,202,239,239',
',239,239,239,239,239,,239,239,,239,239,239,239,239,239,239,239,239,239',
'239,239,,,239,239,239,239,239,,,,239,,239,203,203,,203,,203,,203,203',
'203,203,203,203,203,203,203,203,203,203,203,,,,,,,,,,,,,,239,,,85,239',
'239,239,85,,85,85,85,85,85,,203,85,,85,85,,85,85,85,85,85,,85,85,,85',
'85,85,85,85,85,85,85,85,85,85,85,85,,85,85,85,85,85,,,,85,,85,204,204',
',204,,204,,204,204,204,204,204,204,204,204,204,204,204,204,204,,,,,',
',,,,,,,,85,86,,,85,86,85,86,86,86,86,86,,,86,204,86,86,,86,86,86,86',
'86,,86,86,,86,86,86,86,86,86,86,86,86,86,86,86,,,86,86,86,86,86,,,,86',
',86,223,223,,223,,223,,223,223,223,223,223,223,223,223,223,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,223,223,,86,87,,,86,87,86',
'87,87,87,87,87,,,87,223,87,87,,87,87,87,87,87,,87,87,,87,87,87,87,87',
'87,87,87,87,87,87,87,,,87,87,87,87,87,,,,87,,87,194,194,,194,,194,,194',
'194,194,194,194,194,194,194,194,194,194,194,194,,,,,,,,,,,,,,87,88,',
',87,88,87,88,88,88,88,88,,,88,194,88,88,,88,88,88,88,88,,88,88,,88,88',
'88,88,88,88,88,88,88,88,88,88,,,88,88,88,88,88,,,,88,,88,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,88,89,,,88,89,88,89,89,89,89,89,,,89,,89,89,,89',
'89,89,89,89,,89,89,,89,89,89,89,89,89,89,89,89,89,89,89,,,89,89,89,89',
'89,,,,89,,89,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,89,90,,,89,90,89,90,90',
'90,90,90,,,90,,90,90,,90,90,90,90,90,,90,90,,90,90,90,90,90,90,90,90',
'90,90,90,90,,,90,90,90,90,90,,,,90,,90,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,90,91,,,90,91,90,91,91,91,91,91,,,91,,91,91,,91,91,91,91,91,,91',
'91,,91,91,91,91,91,91,91,91,91,91,91,91,,,91,91,91,91,91,,,,91,,91,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,91,92,,,91,92,91,92,92,92,92,92,,,92',
',92,92,,92,92,92,92,92,,92,92,,92,92,92,92,92,92,92,92,92,92,92,92,',
',92,92,92,92,92,,,,92,,92,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,92,93,,,92',
'93,92,93,93,93,93,93,,,93,,93,93,,93,93,93,93,93,,93,93,,93,93,93,93',
'93,93,93,93,93,93,93,93,,,93,93,93,93,93,,,,93,,93,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,93,94,,,93,94,93,94,94,94,94,94,,,94,,94,94,,94,94,94',
'94,94,,94,94,,94,94,94,94,94,94,94,94,94,94,94,94,,,94,94,94,94,94,',
',,94,,94,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,94,95,,,94,95,94,95,95,95',
'95,95,,,95,,95,95,,95,95,95,95,95,,95,95,,95,95,95,95,95,95,95,95,95',
'95,95,95,,,95,95,95,95,95,,,,95,,95,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',95,96,,,95,96,95,96,96,96,96,96,,,96,,96,96,,96,96,96,96,96,,96,96',
',96,96,96,96,96,96,96,96,96,96,96,96,,,96,96,96,96,96,,,,96,,96,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,96,97,,,96,97,96,97,97,97,97,97,,,97,,97',
'97,,97,97,97,97,97,,97,97,,97,97,97,97,97,97,97,97,97,97,97,97,,,97',
'97,97,97,97,,,,97,,97,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,97,98,,,97,98',
'97,98,98,98,98,98,,,98,,98,98,,98,98,98,98,98,,98,98,,98,98,98,98,98',
'98,98,98,98,98,98,98,,,98,98,98,98,98,,,,98,,98,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,98,99,,,98,99,98,99,99,99,99,99,,,99,,99,99,,99,99,99,99',
'99,,99,99,,99,99,99,99,99,99,99,99,99,99,99,99,,,99,99,99,99,99,,,,99',
',99,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,99,100,,,99,100,99,100,100,100',
'100,100,,,100,,100,100,,100,100,100,100,100,,100,100,,100,100,100,100',
'100,100,100,100,100,100,100,100,,,100,100,100,100,100,,,,100,,100,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,100,101,,,100,101,100,101,101,101,101',
'101,,,101,,101,101,,101,101,101,101,101,,101,101,,101,101,101,101,101',
'101,101,101,101,101,101,101,,,101,101,101,101,101,,,,101,,101,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,101,102,,,101,102,101,102,102,102,102,102',
',,102,,102,102,,102,102,102,102,102,,102,102,,102,102,102,102,102,102',
'102,102,102,102,102,102,,,102,102,102,102,102,,,,102,,102,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,102,103,,,102,103,102,103,103,103,103,103,,,103',
',103,103,,103,103,103,103,103,,103,103,,103,103,103,103,103,103,103',
'103,103,103,103,103,,,103,103,103,103,103,,,,103,,103,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,103,104,,,103,104,103,104,104,104,104,104,,,104,',
'104,104,,104,104,104,104,104,,104,104,,104,104,104,104,104,104,104,104',
'104,104,104,104,,,104,104,104,104,104,,,,104,,104,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,104,105,,,104,105,104,105,105,105,105,105,,,105,,105',
'105,,105,105,105,105,105,,105,105,,105,105,105,105,105,105,105,105,105',
'105,105,105,,,105,105,105,105,105,,,,105,,105,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,105,106,,,105,106,105,106,106,106,106,106,,,106,,106,106',
',106,106,106,106,106,,106,106,,106,106,106,106,106,106,106,106,106,106',
'106,106,,,106,106,106,106,106,,,,106,,106,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,106,107,,,106,107,106,107,107,107,107,107,,,107,,107,107,,107',
'107,107,107,107,,107,107,,107,107,107,107,107,107,107,107,107,107,107',
'107,,,107,107,107,107,107,,,,107,,107,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,107,108,,,107,108,107,108,108,108,108,108,,,108,,108,108,,108,108',
'108,108,108,,108,108,,108,108,108,108,108,108,108,108,108,108,108,108',
',,108,108,108,108,108,,,,108,,108,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,108',
'109,,,108,109,108,109,109,109,109,109,,,109,,109,109,,109,109,109,109',
'109,,109,109,,109,109,109,109,109,109,109,109,109,109,109,109,,,109',
'109,109,109,109,,,,109,,109,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,109,110',
',,109,110,109,110,110,110,110,110,,,110,,110,110,,110,110,110,110,110',
',110,110,,110,110,110,110,110,110,110,110,110,110,110,110,,,110,110',
'110,110,110,,,,110,,110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,110,111,,,110',
'111,110,111,111,111,111,111,,,111,,111,111,,111,111,111,111,111,,111',
'111,,111,111,111,111,111,111,111,111,111,111,111,111,,,111,111,111,111',
'111,,,,111,,111,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,111,112,,,111,112,111',
'112,112,112,112,112,,,112,,112,112,,112,112,112,112,112,,112,112,,112',
'112,112,112,112,112,112,112,112,112,112,112,,,112,112,112,112,112,,',
',112,,112,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,113,,,112,113,112,113',
'113,113,113,113,,,113,,113,113,,113,113,113,113,113,,113,113,,113,113',
'113,113,113,113,113,113,113,113,113,113,,,113,113,113,113,113,,,,113',
',113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,113,114,,,113,114,113,114,114',
'114,114,114,,,114,,114,114,,114,114,114,114,114,,114,114,,114,114,114',
'114,114,114,114,114,114,114,114,114,,,114,114,114,114,114,,,,114,,114',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,114,115,,,114,115,114,115,115,115,115',
'115,,,115,,115,115,,115,115,115,115,115,,115,115,,115,115,115,115,115',
'115,115,115,115,115,115,115,,,115,115,115,115,115,,,,115,,115,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,115,116,,,115,116,115,116,116,116,116,116',
',,116,,116,116,,116,116,116,116,116,,116,116,,116,116,116,116,116,116',
'116,116,116,116,116,116,,,116,116,116,116,116,,,,116,,116,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,116,117,,,116,117,116,117,117,117,117,117,,,117',
',117,117,,117,117,117,117,117,,117,117,,117,117,117,117,117,117,117',
'117,117,117,117,117,,,117,117,117,117,117,,,,117,,117,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,117,118,,,117,118,117,118,118,118,118,118,,,118,',
'118,118,,118,118,118,118,118,,118,118,,118,118,118,118,118,118,118,118',
'118,118,118,118,,,118,118,118,118,118,,,,118,,118,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,118,119,,,118,119,118,119,119,119,119,119,,,119,,119',
'119,,119,119,119,119,119,,119,119,,119,119,119,119,119,119,119,119,119',
'119,119,119,,,119,119,119,119,119,,,,119,,119,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,119,120,,,119,120,119,120,120,120,120,120,,,120,,120,120',
',120,120,120,120,120,,120,120,,120,120,120,120,120,120,120,120,120,120',
'120,120,,,120,120,120,120,120,,,,120,,120,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,120,121,,,120,121,120,121,121,121,121,121,,,121,,121,121,,121',
'121,121,121,121,,121,121,,121,121,121,121,121,121,121,121,121,121,121',
'121,,,121,121,121,121,121,,,,121,,121,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,121,72,,,121,72,121,72,72,72,72,72,,,72,,72,72,,72,72,72,72,72,,72',
'72,,72,72,72,72,72,72,72,72,72,72,72,72,,,72,72,72,72,72,,,,72,,72,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,169,,,72,169,72,169,169,169,169,169',
',,169,,169,169,,169,169,169,169,169,,169,169,,169,169,169,169,169,169',
'169,169,169,169,169,169,,,169,169,169,169,169,,,,169,,169,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,169,157,,,169,157,169,157,157,157,157,157,,,157',
',157,157,,157,157,157,157,157,,157,157,,157,157,157,157,157,157,157',
'157,157,157,157,157,157,,157,157,157,157,157,,,,157,,157,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,157,293,,,157,293,157,293,293,293,293,293,,,293',
',293,293,,293,293,293,293,293,,293,293,,293,293,293,293,293,293,293',
'293,293,293,293,293,293,,293,293,293,293,293,,,,293,,293,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,293,126,,,293,126,293,126,126,126,126,126,,,126',
',126,126,,126,126,126,126,126,,126,126,,126,126,126,126,126,126,126',
'126,126,126,126,126,126,,126,126,126,126,126,,,,126,,126,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,126,52,,,126,52,126,52,52,52,52,52,,,52,,52,52',
',52,52,52,52,52,,52,52,,52,52,52,52,52,52,52,52,52,52,52,52,52,,52,52',
'52,52,52,,,,52,,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,52,358,,,52,358',
'52,358,358,358,358,358,,,358,,358,358,,358,358,358,358,358,,358,358',
'358,358,358,358,358,358,358,358,358,358,358,358,358,,,358,358,358,358',
'358,,,,358,,358,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,358,280,358,358,358',
'280,358,280,280,280,280,280,,,280,,280,280,,280,280,280,280,280,,280',
'280,,280,280,280,280,280,280,280,280,280,280,280,280,280,,280,280,280',
'280,280,,,,280,,280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280,168,,,280,168',
'280,168,168,168,168,168,,,168,,168,168,,168,168,168,168,168,,168,168',
',168,168,168,168,168,168,168,168,168,168,168,168,,,168,168,168,168,168',
',,,168,,168,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,168,360,,,168,360,168,360',
'360,360,360,360,,,360,,360,360,,360,360,360,360,360,,360,360,360,360',
'360,360,360,360,360,360,360,360,360,360,360,,,360,360,360,360,360,,',
',360,,360,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,360,30,360,360,360,30,360',
'30,30,30,30,30,,,30,,30,30,,30,30,30,30,30,,30,30,,30,30,30,30,30,30',
'30,30,30,30,30,30,,,30,30,30,30,30,,,,30,,30,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,30,276,,,30,276,30,276,276,276,276,276,,,276,,276,276,,276',
'276,276,276,276,,276,276,,276,276,276,276,276,276,276,276,276,276,276',
'276,,,276,276,276,276,276,,,,276,,276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,276,167,,,276,167,276,167,167,167,167,167,,,167,,167,167,,167,167',
'167,167,167,,167,167,,167,167,167,167,167,167,167,167,167,167,167,167',
',,167,167,167,167,167,,,,167,,167,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,167',
'268,,,167,268,167,268,268,268,268,268,,,268,,268,268,,268,268,268,268',
'268,,268,268,,268,268,268,268,268,268,268,268,268,268,268,268,,,268',
'268,268,268,268,,,,268,,268,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,268,183',
',,268,183,268,183,183,183,183,183,,,183,,183,183,,183,183,183,183,183',
',183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,,183',
'183,183,183,183,,,,183,,183,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,183,267',
'183,183,183,267,183,267,267,267,267,267,,,267,,267,267,,267,267,267',
'267,267,,267,267,,267,267,267,267,267,267,267,267,267,267,267,267,,',
'267,267,267,267,267,,,,267,,267,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,267',
'264,,,267,264,267,264,264,264,264,264,,,264,,264,264,,264,264,264,264',
'264,,264,264,,264,264,264,264,264,264,264,264,264,264,264,264,,,264',
'264,264,264,264,,,,264,,264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264,,,261',
'264,,264,261,261,261,261,261,261,261,,,261,,261,261,,261,261,261,261',
'261,,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,,,261',
'261,261,261,261,,,,261,,261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,261,260',
'261,261,261,260,261,260,260,260,260,260,,,260,,260,260,,260,260,260',
'260,260,,260,260,,260,260,260,260,260,260,260,260,260,260,260,260,,',
'260,260,260,260,260,,,,260,,260,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,260',
'365,,,260,365,260,365,365,365,365,365,,,365,,365,365,,365,365,365,365',
'365,,365,365,365,365,365,365,365,365,365,365,365,365,365,365,365,,,365',
'365,365,365,365,,,,365,,365,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,365,166',
'365,365,365,166,365,166,166,166,166,166,,,166,,166,166,,166,166,166',
'166,166,,166,166,,166,166,166,166,166,166,166,166,166,166,166,166,,',
'166,166,166,166,166,,,,166,,166,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,166',
'243,,,166,243,166,243,243,243,243,243,,,243,,243,243,,243,243,243,243',
'243,,243,243,,243,243,243,243,243,243,243,243,243,243,243,243,243,,243',
'243,243,243,243,,,,243,,243,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,243,187',
',,243,187,243,187,187,187,187,187,,,187,,187,187,,187,187,187,187,187',
',187,187,,187,187,187,187,187,187,187,187,187,187,187,187,187,,187,187',
'187,187,187,,,,187,,187,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,187,247,,,187',
'247,187,247,247,247,247,247,,,247,,247,247,,247,247,247,247,247,,247',
'247,,247,247,247,247,247,247,247,247,247,247,247,247,247,,247,247,247',
'247,247,,,,247,,247,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,247,251,,,247,251',
'247,251,251,251,251,251,,,251,,251,251,,251,251,251,251,251,,251,251',
',251,251,251,251,251,251,251,251,251,251,251,251,,,251,251,251,251,251',
',,,251,,251,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,251,0,,,251,0,251,0,0,0',
'0,0,,,0,,0,0,,0,0,0,0,0,,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,0,0',
',,,0,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,230,0,0,0,230,0,230,230,230',
'230,230,,,230,,230,230,,230,230,230,230,230,,230,230,,230,230,230,230',
'230,230,230,230,230,230,230,230,230,,230,230,230,230,230,,225,225,230',
'225,230,225,,225,225,225,225,225,225,225,225,225,225,225,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,,230',
',,,230,,230,,190,190,225,190,,190,,190,190,190,190,190,190,190,190,190',
'190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190',
'190,190,,,,,,,,191,191,,191,,191,190,191,191,191,191,191,191,191,191',
'191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191',
'191,191,,,,,,,,,295,295,,295,,295,191,295,295,295,295,295,295,295,295',
'295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295',
'295,295,295,295,295,,,,,,252,252,,252,,252,295,252,252,252,252,252,252',
'252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252',
'252,252,252,252,252,252,252,,,,,,224,224,,224,,224,252,224,224,224,224',
'224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224',
'224,224,224,224,224,224,224,224,224,,,,,,,,,,,,224' ]
        racc_action_check = arr = ::Array.new(8419, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  8021,   621,   275,   130,   nil,   nil,   nil,   528,   nil,  1519,
  1656,   nil,   nil,  1665,   340,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  6729,   nil,   nil,   nil,   nil,   nil,   nil,  1145,   -49,   nil,
   nil,   nil,   nil,   nil,   581,   580,   nil,   nil,   187,   nil,
   nil,   nil,  6299,   nil,   898,   338,   -10,  2513,   nil,  2427,
    -6,   nil,  1313,   507,   344,   431,   491,   nil,   nil,   nil,
  2169,   nil,  5869,  1911,  1997,   nil,   nil,  2083,   -39,   505,
   491,   339,   444,   nil,   530,  2687,  2773,  2859,  2945,  3031,
  3117,  3203,  3289,  3375,  3461,  3547,  3633,  3719,  3805,  3891,
  3977,  4063,  4149,  4235,  4321,  4407,  4493,  4579,  4665,  4751,
  4837,  4923,  5009,  5095,  5181,  5267,  5353,  5439,  5525,  5611,
  5697,  5783,  1825,   433,  1649,   432,  6213,   437,   nil,   436,
   352,   263,   nil,   599,   289,   333,   231,   nil,   nil,   nil,
   -70,   389,   nil,   nil,   -77,   nil,   454,    97,   -66,   265,
   343,   -50,   -41,   438,   -63,   428,   219,  6041,   450,   174,
   444,    -2,   500,   262,   nil,   nil,  7591,  6901,  6557,  5955,
   nil,   nil,   nil,    -9,  1107,   nil,  1190,   345,  1273,  1063,
   528,   550,   252,  7073,   -25,   285,   526,  7763,   nil,    86,
  8154,  8196,  1831,  1743,  2865,    42,  2003,  2089,  2175,  2261,
  2347,  2433,  2519,  2605,  2693,   506,   590,   671,   888,   971,
  1052,  1180,  1229,  1263,  1346,  1395,  1428,   123,   125,   522,
   517,   167,  1917,  2779,  8322,  8108,   262,  1737,   516,   476,
  8107,   304,   nil,   467,   506,   nil,   nil,   nil,   nil,  2599,
   nil,   598,   979,  7677,   318,   nil,   445,  7849,   440,    -2,
   -50,  7935,  8280,    81,    79,   218,   281,   220,   221,   221,
  7419,  7333,   nil,   133,  7245,    16,    89,  7159,  6987,   nil,
     5,    -8,   277,   341,   321,   389,  6815,   433,   338,   nil,
  6471,   nil,   726,   nil,   nil,   814,   nil,   nil,   nil,    45,
   389,   446,   -43,  6127,   nil,  8238,   498,   -12,   nil,   nil,
   980,   517,   nil,  1356,   nil,   nil,  1439,   897,   nil,   507,
    -3,   nil,   509,   nil,   510,   nil,   770,   nil,   nil,  1483,
   nil,   nil,   nil,   450,   311,   536,   348,   458,   nil,   nil,
   nil,   351,  2255,   nil,     6,   543,   544,   nil,   524,   nil,
   546,   465,   nil,   517,   -11,   521,   535,  2341,  1566,   nil,
   nil,   nil,   nil,   nil,   542,   515,   nil,   576,  6385,   682,
  6643,   607,   574,   609,   281,  7505,   288,   nil,   592,   nil,
   279,   615,   nil ]

racc_action_default = [
    -1,  -202,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,
   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -31,
   -92,   -33,   -34,   -35,   -36,   -37,   -38,   -39,   -40,   -41,
   -42,   -43,   -44,   -45,  -202,  -202,   -48,   -49,  -202,   -51,
   -52,   -53,   -56,   -59,   -62,  -202,   -92,   -93,   -91,   -92,
   -92,  -132,  -202,  -202,   -92,   -92,   -92,  -154,  -155,  -156,
   -92,  -166,   -92,   -92,   -92,  -175,  -176,   -92,  -202,  -202,
  -202,   -92,  -200,  -201,  -202,    -5,   -92,   -92,   -92,   -92,
   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,
   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,
   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,
   -92,   -92,   -92,   -72,   -92,   -71,   -93,   -69,   -81,   -68,
   -70,  -202,  -146,  -202,   -66,   -67,  -202,   -46,   -47,   -50,
  -202,   -57,   -39,   -40,  -202,   -63,  -202,  -202,  -141,  -143,
   -92,  -202,  -202,  -202,  -202,  -202,  -202,   -93,   -90,   -94,
  -130,  -137,  -140,  -138,  -131,  -139,   -92,   -92,   -92,   -92,
  -142,  -144,  -145,  -202,  -164,  -165,  -202,  -202,  -202,  -202,
  -202,  -202,  -183,  -189,  -202,  -202,  -198,   -93,   373,    -4,
   -96,   -97,   -98,   -99,  -100,  -101,  -102,  -103,  -104,  -105,
  -106,  -107,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -115,
  -116,  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,
  -126,  -127,  -128,  -129,  -169,  -172,  -202,   -92,  -202,  -202,
   -80,  -202,   -82,  -141,  -143,   -32,   -84,   -83,   -54,   -92,
   -60,  -202,  -202,   -93,   -92,  -149,  -202,   -93,  -202,   -94,
  -202,   -92,  -133,  -134,  -135,  -136,  -158,  -157,  -160,  -202,
   -92,   -92,  -190,  -202,   -92,  -202,  -202,   -92,   -92,  -180,
  -202,  -202,  -188,  -202,  -202,  -202,   -92,  -202,  -202,   -73,
   -78,   -74,   -79,   -86,   -55,   -58,   -61,   -64,   -65,  -202,
  -202,  -202,  -202,   -93,   -89,   -95,  -202,  -161,  -159,  -167,
  -202,  -188,  -170,  -202,  -174,  -177,  -202,  -202,  -181,  -202,
  -202,  -184,  -202,  -196,  -202,  -199,  -173,   -75,   -76,   -77,
   -85,  -147,  -148,   -88,  -202,  -202,  -202,  -202,  -162,  -168,
  -191,  -202,   -92,  -171,  -202,  -202,  -202,  -186,  -202,  -185,
  -202,   -87,  -150,  -160,  -202,  -160,  -202,   -92,  -202,  -178,
  -179,  -182,  -187,  -197,  -202,  -202,  -163,  -202,   -92,  -202,
   -92,  -202,  -160,  -202,  -192,   -92,  -193,  -151,  -202,  -152,
  -194,  -202,  -153 ]

racc_goto_table = [
    85,     2,   143,   234,   151,   146,   129,   142,   151,   145,
   312,   229,   182,   165,   133,   147,     1,   153,   164,   155,
   144,   162,   123,   155,   259,   263,   154,   140,   130,   151,
   163,   181,   326,   296,   139,   270,   141,   330,   158,   331,
   nil,   159,   153,   160,   186,   257,   nil,   nil,   nil,   338,
   nil,   185,   nil,   134,   174,   nil,   176,   177,   178,   nil,
   nil,   179,   nil,   nil,   nil,   nil,   nil,   nil,   175,   189,
   190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
   200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
   210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   231,   228,   nil,
   159,   265,   266,   132,   278,   nil,   248,   273,   354,   nil,
   357,   nil,   nil,   131,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   258,   nil,   nil,   nil,   368,   250,   nil,
   nil,   249,   nil,   nil,   nil,   129,   nil,   nil,   nil,   nil,
   252,   253,   254,   255,   129,   152,   nil,   nil,   nil,   161,
   nil,   nil,   nil,   171,   172,   156,   134,   130,   275,   nil,
   123,   159,   nil,   131,   131,   173,   130,   nil,   nil,   nil,
   152,   nil,   nil,   nil,   272,   nil,   nil,   nil,   nil,   143,
   143,   nil,   146,   288,   142,   142,   287,   nil,   nil,   nil,
   nil,   123,   nil,   nil,   311,   nil,   nil,   nil,   nil,   nil,
   nil,   277,   nil,   nil,   282,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   285,   289,   nil,   nil,   159,   292,   325,
   nil,   159,   nil,   nil,   nil,   295,   nil,   nil,   nil,   334,
   335,   nil,   336,   337,   300,   339,   nil,   340,   303,   246,
   nil,   306,   307,   nil,   nil,   nil,   nil,   nil,   nil,   131,
   316,   nil,   301,   nil,   319,   nil,   nil,   nil,   nil,   nil,
    85,   352,   nil,   nil,   324,   nil,   nil,   159,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   361,   nil,   nil,
   363,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    85,
   nil,   371,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   348,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   359,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   290,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   131,   nil,   nil,   nil,   nil,   nil,   364,
   nil,   366,    85,   nil,    85,   nil,   370,   nil,    85 ]

racc_goto_check = [
     4,     2,    34,    50,    34,    15,    43,    33,    34,    40,
    32,    44,    53,    33,     3,    46,     1,    10,    48,     7,
    39,    10,    41,     7,    55,    55,     9,    37,    41,    34,
     9,    33,    54,    52,    31,    56,     3,    57,    47,    58,
   nil,     3,    10,     3,     7,    50,   nil,   nil,   nil,    32,
   nil,     9,   nil,    41,     3,   nil,     3,     3,     3,   nil,
   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,     4,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,    47,     3,   nil,
     3,    53,    53,    13,    44,   nil,    46,    53,    52,   nil,
    52,   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    46,   nil,   nil,   nil,    52,    47,   nil,
   nil,     3,   nil,   nil,   nil,    43,   nil,   nil,   nil,   nil,
     3,     3,     3,     3,    43,    13,   nil,   nil,   nil,    13,
   nil,   nil,   nil,    13,    13,    45,    41,    41,    47,   nil,
    41,     3,   nil,    45,    45,    45,    41,   nil,   nil,   nil,
    13,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,    34,
    34,   nil,    15,    15,    33,    33,    40,   nil,   nil,   nil,
   nil,    41,   nil,   nil,    53,   nil,   nil,   nil,   nil,   nil,
   nil,     3,   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     3,    47,   nil,   nil,     3,    47,    53,
   nil,     3,   nil,   nil,   nil,     3,   nil,   nil,   nil,    53,
    53,   nil,    53,    53,     3,    53,   nil,    53,     3,    13,
   nil,     3,     3,   nil,   nil,   nil,   nil,   nil,   nil,    45,
     3,   nil,     2,   nil,     3,   nil,   nil,   nil,   nil,   nil,
     4,    53,   nil,   nil,    47,   nil,   nil,     3,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    53,   nil,   nil,
    53,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,
   nil,    53,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,     2,
   nil,     2,     4,   nil,     4,   nil,     2,   nil,     4 ]

racc_goto_pointer = [
   nil,    16,     1,   -16,    -2,   nil,   nil,   -37,   nil,   -30,
   -39,   nil,   nil,    99,   nil,   -49,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -14,  -261,   -47,   -52,   nil,   nil,   -25,   nil,   -34,
   -45,    15,   nil,    -7,  -113,   109,   -40,   -19,   -42,   nil,
  -128,   nil,  -225,   -67,  -265,  -152,  -147,  -264,  -262 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    34,    35,    36,    37,    38,    39,    51,   nil,    53,   nil,
   nil,   125,   135,   127,   nil,    55,   nil,   nil,    61,    62,
   149,    66,   nil,   262,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 99, :_reduce_1,
  1, 99, :_reduce_2,
  1, 100, :_reduce_3,
  3, 100, :_reduce_4,
  2, 100, :_reduce_5,
  1, 100, :_reduce_6,
  1, 101, :_reduce_7,
  1, 101, :_reduce_8,
  1, 101, :_reduce_9,
  1, 101, :_reduce_10,
  1, 101, :_reduce_11,
  1, 101, :_reduce_12,
  1, 101, :_reduce_13,
  1, 101, :_reduce_14,
  1, 101, :_reduce_15,
  1, 101, :_reduce_16,
  1, 101, :_reduce_17,
  1, 101, :_reduce_18,
  1, 101, :_reduce_19,
  1, 101, :_reduce_20,
  1, 101, :_reduce_21,
  1, 101, :_reduce_22,
  1, 101, :_reduce_23,
  1, 101, :_reduce_24,
  1, 101, :_reduce_25,
  1, 101, :_reduce_26,
  1, 101, :_reduce_27,
  1, 101, :_reduce_28,
  1, 101, :_reduce_29,
  1, 101, :_reduce_30,
  1, 101, :_reduce_31,
  3, 101, :_reduce_32,
  1, 102, :_reduce_33,
  1, 102, :_reduce_34,
  1, 102, :_reduce_35,
  1, 113, :_reduce_36,
  1, 113, :_reduce_37,
  1, 113, :_reduce_38,
  1, 113, :_reduce_39,
  1, 113, :_reduce_40,
  1, 113, :_reduce_41,
  1, 113, :_reduce_42,
  1, 113, :_reduce_43,
  1, 113, :_reduce_44,
  1, 128, :_reduce_45,
  2, 128, :_reduce_46,
  2, 128, :_reduce_47,
  1, 129, :_reduce_48,
  1, 129, :_reduce_49,
  2, 115, :_reduce_50,
  1, 130, :_reduce_51,
  1, 133, :_reduce_52,
  1, 131, :_reduce_53,
  3, 134, :_reduce_54,
  4, 134, :_reduce_55,
  0, 135, :_reduce_56,
  1, 135, :_reduce_57,
  3, 135, :_reduce_58,
  1, 132, :_reduce_59,
  3, 136, :_reduce_60,
  4, 136, :_reduce_61,
  0, 137, :_reduce_62,
  1, 137, :_reduce_63,
  3, 137, :_reduce_64,
  3, 138, :_reduce_65,
  2, 107, :_reduce_66,
  2, 107, :_reduce_67,
  2, 107, :_reduce_68,
  2, 107, :_reduce_69,
  2, 108, :_reduce_70,
  2, 108, :_reduce_71,
  2, 108, :_reduce_72,
  3, 139, :_reduce_73,
  3, 139, :_reduce_74,
  4, 139, :_reduce_75,
  4, 139, :_reduce_76,
  3, 142, :_reduce_77,
  2, 142, :_reduce_78,
  2, 142, :_reduce_79,
  1, 142, :_reduce_80,
  1, 141, :_reduce_81,
  2, 141, :_reduce_82,
  2, 140, :_reduce_83,
  2, 140, :_reduce_84,
  5, 105, :_reduce_85,
  4, 105, :_reduce_86,
  6, 105, :_reduce_87,
  5, 105, :_reduce_88,
  4, 105, :_reduce_89,
  2, 105, :_reduce_90,
  1, 143, :_reduce_91,
  0, 143, :_reduce_92,
  0, 145, :_reduce_93,
  1, 145, :_reduce_94,
  3, 145, :_reduce_95,
  3, 103, :_reduce_96,
  3, 103, :_reduce_97,
  3, 103, :_reduce_98,
  3, 103, :_reduce_99,
  3, 103, :_reduce_100,
  3, 103, :_reduce_101,
  3, 103, :_reduce_102,
  3, 103, :_reduce_103,
  3, 103, :_reduce_104,
  3, 103, :_reduce_105,
  3, 103, :_reduce_106,
  3, 103, :_reduce_107,
  3, 103, :_reduce_108,
  3, 103, :_reduce_109,
  3, 103, :_reduce_110,
  3, 103, :_reduce_111,
  3, 103, :_reduce_112,
  3, 103, :_reduce_113,
  3, 103, :_reduce_114,
  3, 103, :_reduce_115,
  3, 103, :_reduce_116,
  3, 103, :_reduce_117,
  3, 103, :_reduce_118,
  3, 103, :_reduce_119,
  3, 103, :_reduce_120,
  3, 103, :_reduce_121,
  3, 103, :_reduce_122,
  3, 103, :_reduce_123,
  3, 103, :_reduce_124,
  3, 103, :_reduce_125,
  3, 103, :_reduce_126,
  3, 103, :_reduce_127,
  3, 103, :_reduce_128,
  3, 103, :_reduce_129,
  2, 104, :_reduce_130,
  2, 106, :_reduce_131,
  1, 106, :_reduce_132,
  3, 146, :_reduce_133,
  3, 146, :_reduce_134,
  3, 146, :_reduce_135,
  3, 146, :_reduce_136,
  1, 147, :_reduce_137,
  1, 147, :_reduce_138,
  1, 147, :_reduce_139,
  1, 147, :_reduce_140,
  2, 111, :_reduce_141,
  2, 111, :_reduce_142,
  2, 111, :_reduce_143,
  2, 112, :_reduce_144,
  2, 112, :_reduce_145,
  2, 112, :_reduce_146,
  4, 148, :_reduce_147,
  4, 148, :_reduce_148,
  2, 148, :_reduce_149,
  6, 109, :_reduce_150,
  9, 109, :_reduce_151,
  9, 109, :_reduce_152,
  11, 109, :_reduce_153,
  1, 149, :_reduce_154,
  1, 149, :_reduce_155,
  1, 149, :_reduce_156,
  1, 144, :_reduce_157,
  1, 144, :_reduce_158,
  1, 150, :_reduce_159,
  0, 150, :_reduce_160,
  0, 152, :_reduce_161,
  1, 152, :_reduce_162,
  3, 152, :_reduce_163,
  2, 110, :_reduce_164,
  2, 110, :_reduce_165,
  1, 127, :_reduce_166,
  4, 116, :_reduce_167,
  5, 116, :_reduce_168,
  3, 116, :_reduce_169,
  4, 117, :_reduce_170,
  5, 117, :_reduce_171,
  3, 117, :_reduce_172,
  5, 118, :_reduce_173,
  4, 119, :_reduce_174,
  1, 126, :_reduce_175,
  1, 126, :_reduce_176,
  4, 120, :_reduce_177,
  6, 121, :_reduce_178,
  6, 121, :_reduce_179,
  3, 122, :_reduce_180,
  4, 122, :_reduce_181,
  6, 122, :_reduce_182,
  0, 154, :_reduce_183,
  2, 154, :_reduce_184,
  3, 154, :_reduce_185,
  3, 154, :_reduce_186,
  4, 154, :_reduce_187,
  2, 151, :_reduce_188,
  1, 151, :_reduce_189,
  1, 153, :_reduce_190,
  3, 153, :_reduce_191,
  4, 155, :_reduce_192,
  4, 156, :_reduce_193,
  5, 156, :_reduce_194,
  0, 156, :_reduce_195,
  4, 123, :_reduce_196,
  6, 123, :_reduce_197,
  2, 124, :_reduce_198,
  4, 125, :_reduce_199,
  1, 125, :_reduce_200,
  1, 114, :_reduce_201 ]

racc_reduce_n = 202

racc_shift_n = 373

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :ELSEIF => 4,
  :THEN => 5,
  :UNLESS => 6,
  :END => 7,
  :WHILE => 8,
  :UNTIL => 9,
  :BREAK => 10,
  :CONTINUE => 11,
  :TRY => 12,
  :CATCH => 13,
  :ENSURE => 14,
  :FOR => 15,
  :IN => 16,
  :DEF => 17,
  :DEF_BANG => 18,
  :SPLAT => 19,
  :CALL => 20,
  :BUILTIN_COMMAND => 21,
  :CLASS => 22,
  :NEW => 23,
  :DEFM => 24,
  :DEFM_BANG => 25,
  :SUPER => 26,
  :RETURN => 27,
  :NEWLINE => 28,
  :NUMBER => 29,
  :STRING_D => 30,
  :STRING_S => 31,
  :HEREDOC => 32,
  :EX_LITERAL => 33,
  :REGEXP => 34,
  :TRUE => 35,
  :FALSE => 36,
  :NIL => 37,
  :LET => 38,
  :UNLET => 39,
  :UNLET_BANG => 40,
  :IDENTIFIER => 41,
  :DICT_VAL => 42,
  :SCOPE_MODIFIER => 43,
  :SCOPE_MODIFIER_LITERAL => 44,
  :SPECIAL_VAR_PREFIX => 45,
  :FINISH => 46,
  "!" => 47,
  "*" => 48,
  "/" => 49,
  "%" => 50,
  "+" => 51,
  "+=" => 52,
  "-" => 53,
  "-=" => 54,
  "." => 55,
  ">" => 56,
  ">#" => 57,
  ">?" => 58,
  "<" => 59,
  "<#" => 60,
  "<?" => 61,
  ">=" => 62,
  ">=#" => 63,
  ">=?" => 64,
  "<=" => 65,
  "<=#" => 66,
  "<=?" => 67,
  "==" => 68,
  "==?" => 69,
  "==#" => 70,
  "=~" => 71,
  "=~?" => 72,
  "=~#" => 73,
  "!~" => 74,
  "!~?" => 75,
  "!~#" => 76,
  "!=" => 77,
  "!=?" => 78,
  "!=#" => 79,
  :IS => 80,
  :ISNOT => 81,
  "&&" => 82,
  "||" => 83,
  "?" => 84,
  "=" => 85,
  "," => 86,
  "(" => 87,
  ")" => 88,
  ";" => 89,
  "|" => 90,
  "[" => 91,
  "]" => 92,
  "{" => 93,
  "}" => 94,
  ":" => 95,
  "===" => 96,
  ".=" => 97 }

racc_nt_base = 98

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "ELSEIF",
  "THEN",
  "UNLESS",
  "END",
  "WHILE",
  "UNTIL",
  "BREAK",
  "CONTINUE",
  "TRY",
  "CATCH",
  "ENSURE",
  "FOR",
  "IN",
  "DEF",
  "DEF_BANG",
  "SPLAT",
  "CALL",
  "BUILTIN_COMMAND",
  "CLASS",
  "NEW",
  "DEFM",
  "DEFM_BANG",
  "SUPER",
  "RETURN",
  "NEWLINE",
  "NUMBER",
  "STRING_D",
  "STRING_S",
  "HEREDOC",
  "EX_LITERAL",
  "REGEXP",
  "TRUE",
  "FALSE",
  "NIL",
  "LET",
  "UNLET",
  "UNLET_BANG",
  "IDENTIFIER",
  "DICT_VAL",
  "SCOPE_MODIFIER",
  "SCOPE_MODIFIER_LITERAL",
  "SPECIAL_VAR_PREFIX",
  "FINISH",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"+=\"",
  "\"-\"",
  "\"-=\"",
  "\".\"",
  "\">\"",
  "\">#\"",
  "\">?\"",
  "\"<\"",
  "\"<#\"",
  "\"<?\"",
  "\">=\"",
  "\">=#\"",
  "\">=?\"",
  "\"<=\"",
  "\"<=#\"",
  "\"<=?\"",
  "\"==\"",
  "\"==?\"",
  "\"==#\"",
  "\"=~\"",
  "\"=~?\"",
  "\"=~#\"",
  "\"!~\"",
  "\"!~?\"",
  "\"!~#\"",
  "\"!=\"",
  "\"!=?\"",
  "\"!=#\"",
  "IS",
  "ISNOT",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\"=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"|\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\":\"",
  "\"===\"",
  "\".=\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "BinaryOperator",
  "UnaryOperator",
  "Call",
  "Assign",
  "DictGet",
  "ListOrDictGet",
  "Def",
  "Return",
  "VariableRetrieval",
  "UnletVariable",
  "Literal",
  "ExLiteral",
  "Heredoc",
  "If",
  "Unless",
  "Ternary",
  "While",
  "Until",
  "For",
  "Try",
  "ClassDefinition",
  "ObjectInstantiation",
  "Super",
  "LoopKeyword",
  "EndScript",
  "Number",
  "String",
  "Regexp",
  "List",
  "Dictionary",
  "ScopeModifierLiteral",
  "ListLiteral",
  "ListItems",
  "DictionaryLiteral",
  "DictItems",
  "DictItem",
  "ListOrDictGetWithBrackets",
  "DictGetWithDotLiteral",
  "DictGetWithDot",
  "SubList",
  "Scope",
  "DefCallIdentifier",
  "ArgList",
  "AssignExpression",
  "AssignLHS",
  "CurlyBraceName",
  "FunctionType",
  "Keyword",
  "Block",
  "ParamList",
  "IfBlock",
  "Catch",
  "ElseBlock",
  "ElseifBlock" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_3(val, _values, result)
     result = Nodes.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_21(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_26(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 73)
  def _reduce_27(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_28(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_32(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_33(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_34(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_35(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_37(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_38(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_40(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_41(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_42(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_43(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_44(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_45(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_46(val, _values, result)
     result = NumberNode.new(val[1].insert(0, val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_47(val, _values, result)
     result = NumberNode.new(val[1].insert(0, val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_48(val, _values, result)
     result = StringNode.new(val[0], :s) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_49(val, _values, result)
     result = StringNode.new(val[0], :d) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_50(val, _values, result)
     result = HeredocNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_51(val, _values, result)
     result = RegexpNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_52(val, _values, result)
     result = ScopeModifierLiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_53(val, _values, result)
     result = ListNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_54(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_55(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_56(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 134)
  def _reduce_57(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_58(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_59(val, _values, result)
     result = DictionaryNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_60(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_61(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_62(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_63(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_64(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_65(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 161)
  def _reduce_66(val, _values, result)
     result = DictGetBracketNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_67(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_68(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_69(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_70(val, _values, result)
     result = ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_71(val, _values, result)
     result = ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 170)
  def _reduce_72(val, _values, result)
     result = ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_73(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_74(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_75(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_76(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 181)
  def _reduce_77(val, _values, result)
     result = Nodes.new([val[0], LiteralNode.new(' : '), val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_78(val, _values, result)
     result = Nodes.new([val[0], LiteralNode.new(' :')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_79(val, _values, result)
     result = Nodes.new([LiteralNode.new(': '), val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_80(val, _values, result)
     result = Nodes.new([LiteralNode.new(':')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 188)
  def _reduce_81(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 189)
  def _reduce_82(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 193)
  def _reduce_83(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 194)
  def _reduce_84(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 198)
  def _reduce_85(val, _values, result)
     result = CallNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 199)
  def _reduce_86(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 200)
  def _reduce_87(val, _values, result)
     result = ExplicitCallNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 201)
  def _reduce_88(val, _values, result)
     result = ExplicitCallNode.new(nil, val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_89(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 203)
  def _reduce_90(val, _values, result)
     result = CallNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 207)
  def _reduce_91(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_92(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 212)
  def _reduce_93(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_94(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 214)
  def _reduce_95(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_96(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 219)
  def _reduce_97(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 221)
  def _reduce_98(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 222)
  def _reduce_99(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 223)
  def _reduce_100(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_101(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 228)
  def _reduce_102(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_103(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 230)
  def _reduce_104(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 232)
  def _reduce_105(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_106(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_107(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_108(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_109(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 238)
  def _reduce_110(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 240)
  def _reduce_111(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 241)
  def _reduce_112(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 242)
  def _reduce_113(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_114(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_115(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_116(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 248)
  def _reduce_117(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 249)
  def _reduce_118(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 250)
  def _reduce_119(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_120(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 253)
  def _reduce_121(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 254)
  def _reduce_122(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 256)
  def _reduce_123(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_124(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 258)
  def _reduce_125(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 259)
  def _reduce_126(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 260)
  def _reduce_127(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_128(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_129(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 267)
  def _reduce_130(val, _values, result)
     result = UnaryOperatorNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 272)
  def _reduce_131(val, _values, result)
     result = AssignNode.new(val[1][0], val[1][1], val[1][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 273)
  def _reduce_132(val, _values, result)
     result = AssignNode.new(val[0][0], val[0][1], val[0][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 278)
  def _reduce_133(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 279)
  def _reduce_134(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_135(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_136(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 285)
  def _reduce_137(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 286)
  def _reduce_138(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 287)
  def _reduce_139(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 288)
  def _reduce_140(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_141(val, _values, result)
     result = GetVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 294)
  def _reduce_142(val, _values, result)
     result = GetSpecialVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 295)
  def _reduce_143(val, _values, result)
     result = GetCurlyBraceNameNode.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 299)
  def _reduce_144(val, _values, result)
     result = UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 300)
  def _reduce_145(val, _values, result)
     result = UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 301)
  def _reduce_146(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 305)
  def _reduce_147(val, _values, result)
     result = CurlyBraceVariable.new([ CurlyBracePart.new(val[0]), CurlyBracePart.new(val[2]) ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_148(val, _values, result)
     result = CurlyBraceVariable.new([ CurlyBracePart.new(val[1]), CurlyBracePart.new(val[3]) ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 307)
  def _reduce_149(val, _values, result)
     result = val[0] << CurlyBracePart.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 313)
  def _reduce_150(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], [], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 314)
  def _reduce_151(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], val[4], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 315)
  def _reduce_152(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], [val[4]], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_153(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], val[4] << val[6], val[8], val[9]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 320)
  def _reduce_154(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 321)
  def _reduce_155(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 322)
  def _reduce_156(val, _values, result)
     result = "DefMethodNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 327)
  def _reduce_157(val, _values, result)
     result = GetCurlyBraceNameNode.new('', val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_158(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 333)
  def _reduce_159(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_160(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 338)
  def _reduce_161(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 339)
  def _reduce_162(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 340)
  def _reduce_163(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 344)
  def _reduce_164(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 345)
  def _reduce_165(val, _values, result)
     result = ReturnNode.new(nil)    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 349)
  def _reduce_166(val, _values, result)
     result = FinishNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 354)
  def _reduce_167(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 355)
  def _reduce_168(val, _values, result)
     result = IfNode.new(val[1], Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 356)
  def _reduce_169(val, _values, result)
     result = IfNode.new(val[2], Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 360)
  def _reduce_170(val, _values, result)
     result = UnlessNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 361)
  def _reduce_171(val, _values, result)
     result = UnlessNode.new(val[1], Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 362)
  def _reduce_172(val, _values, result)
     result = UnlessNode.new(val[2], Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 366)
  def _reduce_173(val, _values, result)
     result = TernaryOperatorNode.new([val[0], val[2], val[4]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 370)
  def _reduce_174(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 374)
  def _reduce_175(val, _values, result)
     result = BreakNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 375)
  def _reduce_176(val, _values, result)
     result = ContinueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 379)
  def _reduce_177(val, _values, result)
     result = UntilNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 383)
  def _reduce_178(val, _values, result)
     result = ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 384)
  def _reduce_179(val, _values, result)
     result = ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 388)
  def _reduce_180(val, _values, result)
     result = TryNode.new(val[1], nil, nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 389)
  def _reduce_181(val, _values, result)
     result = TryNode.new(val[1], val[2], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 390)
  def _reduce_182(val, _values, result)
     result = TryNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 394)
  def _reduce_183(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 395)
  def _reduce_184(val, _values, result)
     result = [ CatchNode.new(nil, val[1]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 396)
  def _reduce_185(val, _values, result)
     result = [ CatchNode.new(val[1], val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 397)
  def _reduce_186(val, _values, result)
     result = val[0] << CatchNode.new(nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 398)
  def _reduce_187(val, _values, result)
     result = val[0] << CatchNode.new(val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 405)
  def _reduce_188(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 406)
  def _reduce_189(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 410)
  def _reduce_190(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 411)
  def _reduce_191(val, _values, result)
     result = val[1].concat(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 415)
  def _reduce_192(val, _values, result)
     result = [val[0], ElseNode.new(val[3])].compact 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 419)
  def _reduce_193(val, _values, result)
     result = Nodes.new([ElseifNode.new(val[1], val[3])]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 420)
  def _reduce_194(val, _values, result)
     result = val[0] << ElseifNode.new(val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 421)
  def _reduce_195(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 425)
  def _reduce_196(val, _values, result)
     result = ClassDefinitionNode.new(val[1], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 426)
  def _reduce_197(val, _values, result)
     result = ClassDefinitionNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 430)
  def _reduce_198(val, _values, result)
     result = ObjectInstantiationNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 434)
  def _reduce_199(val, _values, result)
     result = SuperNode.new(val[2], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 435)
  def _reduce_200(val, _values, result)
     result = SuperNode.new([], false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 439)
  def _reduce_201(val, _values, result)
     result = ExLiteralNode.new(val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
