#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require 'pp'

module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 191)
  # This code will be put as-is in the parser class

  # parses tokens or code into output nodes
  def parse(object, show_tokens=false)
    @tokens = if tokens?(object)
      object
    elsif code?(object)
      Riml::Lexer.new.tokenize(object)
    end
    pp(@tokens) if show_tokens
    do_parse
  end

  def next_token
    @tokens.shift
  end

  private
  # is an array of arrays and first five inner arrays are all doubles
  def tokens?(object)
    Array === object and object[0..4].all? {|e| e.respond_to?(:size) and e.size == 2}
  end

  def code?(object)
    String === object
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    31,    53,    18,    18,    32,    93,    33,    80,    28,    29,
    38,    39,   115,    18,    20,    21,    22,    23,    24,   -29,
    27,    26,    30,    94,    18,    92,    78,    84,    77,    31,
    19,    19,   102,    32,   101,    33,   105,    28,    29,    16,
   106,    19,    18,    20,    21,    22,    23,    24,    55,    27,
    26,    30,    19,   113,    26,   112,    38,    39,    31,    94,
    52,    94,    32,   -70,    33,    94,    28,    29,    16,   114,
    19,    18,    20,    21,    22,    23,    24,    97,    27,    26,
    30,    83,    48,    49,    81,    93,   117,   118,    84,    34,
    94,    84,    59,   nil,   nil,   nil,   nil,    16,   nil,    19,
    38,    39,    48,    49,    44,    45,    46,    47,    50,    40,
    41,    42,    43,    37,    36,    86,    48,    49,   nil,   nil,
    38,    39,   nil,   nil,   nil,    84,   nil,   nil,   nil,   nil,
   nil,    48,    49,   nil,    38,    39,    48,    49,    44,    45,
    46,    47,    50,    40,    41,    42,    43,    37,    36,    38,
    39,   nil,    31,   nil,    38,    39,    32,   nil,    33,   nil,
    28,    29,    48,    49,   nil,   nil,    20,    21,    22,    23,
    24,   nil,    27,    26,    30,   nil,   nil,   nil,    31,   nil,
    38,    39,    32,   nil,    33,   nil,    28,    29,   nil,   nil,
   nil,    16,    20,    21,    22,    23,    24,   nil,    27,    26,
    30,   nil,   nil,   nil,    31,   nil,   nil,   nil,    32,   nil,
    33,   nil,    28,    29,   nil,   nil,   nil,    16,    20,    21,
    22,    23,    24,   -29,    27,    26,    30,   nil,   nil,   nil,
    31,   nil,   nil,   nil,    32,   nil,    33,   nil,    28,    29,
   nil,   nil,   nil,    16,    20,    21,    22,    23,    24,   nil,
    27,    26,    30,   nil,   nil,   nil,    31,   nil,   nil,   nil,
    32,   nil,    33,   nil,    28,    29,   nil,   nil,   nil,    16,
    20,    21,    22,    23,    24,   nil,    27,    26,    30,   nil,
   nil,   nil,    31,   nil,   nil,   nil,    32,   nil,    33,   nil,
    28,    29,   nil,   nil,   nil,    16,    20,    21,    22,    23,
    24,   nil,    27,    26,    30,   nil,   nil,   nil,    31,   nil,
   nil,   nil,    32,   nil,    33,   nil,    28,    29,   nil,   nil,
   nil,    16,    20,    21,    22,    23,    24,   nil,    27,    26,
    30,   nil,   nil,   nil,    31,   nil,   nil,   nil,    32,   nil,
    33,   nil,    28,    29,   nil,   nil,   nil,    16,    20,    21,
    22,    23,    24,   -29,    27,    26,    30,   nil,   nil,   nil,
    31,   nil,   nil,   nil,    32,   nil,    33,   nil,    28,    29,
   nil,   nil,   nil,    16,    20,    21,    22,    23,    24,   nil,
    27,    26,    30,   nil,   nil,   nil,    31,   nil,   nil,   nil,
    32,   nil,    33,   nil,    28,    29,   nil,   nil,   nil,    16,
    20,    21,    22,    23,    24,   nil,    27,    26,    30,   nil,
   nil,   nil,    31,   nil,   nil,   nil,    32,   nil,    33,   nil,
    28,    29,   nil,   nil,   nil,    16,    20,    21,    22,    23,
    24,   nil,    27,    26,    30,   nil,   nil,   nil,    31,   nil,
   nil,   nil,    32,   nil,    33,   nil,    28,    29,   nil,   nil,
   nil,    16,    20,    21,    22,    23,    24,   nil,    27,    26,
    30,   nil,   nil,   nil,    31,   nil,   nil,   nil,    32,   nil,
    33,   nil,    28,    29,   nil,   nil,   nil,    16,    20,    21,
    22,    23,    24,   nil,    27,    26,    30,   nil,   nil,   nil,
    31,   nil,   nil,   nil,    32,   nil,    33,   nil,    28,    29,
   nil,   nil,   nil,    16,    20,    21,    22,    23,    24,   nil,
    27,    26,    30,   nil,   nil,   nil,    31,   nil,   nil,   nil,
    32,   nil,    33,   nil,    28,    29,   nil,   nil,   nil,    16,
    20,    21,    22,    23,    24,   nil,    27,    26,    30,   nil,
   nil,   nil,    31,   nil,   nil,   nil,    32,   nil,    33,   nil,
    28,    29,   nil,   nil,   nil,    16,    20,    21,    22,    23,
    24,   nil,    27,    26,    30,   nil,   nil,   nil,    31,   nil,
   nil,   nil,    32,   nil,    33,   nil,    28,    29,   nil,   nil,
   nil,    16,    20,    21,    22,    23,    24,   nil,    27,    26,
    30,   nil,   nil,   nil,    31,   nil,   nil,   nil,    32,   nil,
    33,   nil,    28,    29,   nil,   nil,   nil,    16,    20,    21,
    22,    23,    24,   nil,    27,    26,    30,   nil,   nil,   nil,
    31,   nil,   nil,   nil,    32,   nil,    33,   nil,    28,    29,
   nil,   nil,   nil,    16,    20,    21,    22,    23,    24,   nil,
    27,    26,    30,   nil,   nil,   nil,    31,   nil,   nil,   nil,
    32,   nil,    33,   nil,    28,    29,   nil,   nil,   nil,    16,
    20,    21,    22,    23,    24,   nil,    27,    26,    30,   nil,
   nil,   nil,    31,   nil,   nil,   nil,    32,   nil,    33,   nil,
    28,    29,   nil,   nil,   nil,    16,    20,    21,    22,    23,
    24,   nil,    27,    26,    30,   nil,   nil,   nil,    31,   nil,
   nil,   nil,    32,   nil,    33,   nil,    28,    29,   nil,   nil,
   nil,    16,    20,    21,    22,    23,    24,   nil,    27,    26,
    30,   nil,   nil,   nil,    31,   nil,   nil,   nil,    32,   nil,
    33,   nil,    28,    29,   nil,   nil,   nil,    16,    20,    21,
    22,    23,    24,   nil,    27,    26,    30,   nil,   nil,   nil,
    31,   nil,   nil,   nil,    32,   nil,    33,   nil,    28,    29,
   nil,   nil,   nil,    16,    20,    21,    22,    23,    24,   nil,
    27,    26,    30,   nil,   nil,   nil,    31,   nil,   nil,   nil,
    32,   nil,    33,   nil,    28,    29,   nil,   nil,   nil,    16,
    20,    21,    22,    23,    24,   nil,    27,    26,    30,   nil,
   nil,   nil,    31,   nil,   nil,   nil,    32,    94,    33,   nil,
    28,    29,   nil,   nil,   nil,    16,    20,    21,    22,    23,
    24,   nil,    27,    26,    30,   nil,    48,    49,    44,    45,
    46,    47,    50,    40,    41,    42,    43,    37,    36,    94,
   nil,    16,   nil,   nil,    38,    39,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,    49,
    44,    45,    46,    47,    50,    40,    41,    42,    43,    37,
    36,    84,   nil,   nil,   nil,   nil,    38,    39,   nil,   nil,
   nil,   nil,    48,    49,    44,    45,    46,    47,    50,    40,
    41,    42,    43,    37,    36,   nil,   nil,   nil,   nil,   nil,
    38,    39,    48,    49,    44,    45,    46,    47,    50,    40,
    41,    42,    43,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    38,    39,    48,    49,    44,    45,    46,    47,    50,    40,
    41,    42,    43,    37,    36,   nil,   nil,   nil,   nil,   nil,
    38,    39,    48,    49,    44,    45,    46,    47,    50,    40,
    41,    42,    43,    37,    36,   nil,   nil,   nil,   nil,   nil,
    38,    39,    48,    49,    44,    45,    46,    47,    50,    40,
    41,    42,    43,    37,    36,   nil,   nil,   nil,   nil,   nil,
    38,    39,    48,    49,    44,    45,    46,    47,    50,    48,
    49,    44,    45,    46,    47,    50,   nil,   nil,   nil,   nil,
    38,    39,   nil,   nil,   nil,   nil,   nil,    38,    39,    48,
    49,    44,    45,    46,    47,    50,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,    48,
    49,    44,    45,    46,    47,    50,    40,    41,    42,    43,
    37,   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,    48,
    49,    44,    45,    46,    47,    50,    40,    41,    42,    43,
    37,    36,   nil,   nil,   nil,   nil,   nil,    38,    39,    48,
    49,    44,    45,    46,    47,    50,    40,    41,    42,    43,
    37,    36,   nil,   nil,   nil,   nil,   nil,    38,    39,    48,
    49,    44,    45,    46,    47,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,    48,
    49,    44,    45,    46,    47,    50,    40,    41,    42,    43,
    37,    36,   nil,   nil,   nil,   nil,   nil,    38,    39,    48,
    49,    44,    45,    46,    47,    50,    40,    41,    42,    43,
    37,    36,   nil,   nil,   nil,    76,   nil,    38,    39,    48,
    49,    44,    45,    46,    47,    50,    40,    41,    42,    43,
    37,    36,   nil,   nil,   nil,   nil,   nil,    38,    39,    48,
    49,    44,    45,    46,    47,    50,    40,    41,    42,    43,
    37,    36,   nil,   nil,   nil,   nil,   nil,    38,    39,    48,
    49,    44,    45,    46,    47,    50,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,    39 ]

racc_action_check = [
     0,    27,     2,   120,     0,    80,     0,    54,     0,     0,
    74,    74,   108,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    82,   108,    80,    52,    91,    52,   118,
     2,   120,    88,   118,    88,   118,    92,   118,   118,     0,
    94,     0,   118,   118,   118,   118,   118,   118,    29,   118,
   118,   118,   108,   104,    28,   104,    73,    73,    97,    87,
    25,   103,    97,    97,    97,    85,    97,    97,   118,   106,
   118,    97,    97,    97,    97,    97,    97,    84,    97,    97,
    97,    56,    70,    70,    55,   112,   113,   115,   116,     1,
   119,    56,    34,   nil,   nil,   nil,   nil,    97,   nil,    97,
    70,    70,    56,    56,    56,    56,    56,    56,    56,    56,
    56,    56,    56,    56,    56,    57,    69,    69,   nil,   nil,
    56,    56,   nil,   nil,   nil,    57,   nil,   nil,   nil,   nil,
   nil,    71,    71,   nil,    69,    69,    57,    57,    57,    57,
    57,    57,    57,    57,    57,    57,    57,    57,    57,    71,
    71,   nil,    40,   nil,    57,    57,    40,   nil,    40,   nil,
    40,    40,    72,    72,   nil,   nil,    40,    40,    40,    40,
    40,   nil,    40,    40,    40,   nil,   nil,   nil,   102,   nil,
    72,    72,   102,   nil,   102,   nil,   102,   102,   nil,   nil,
   nil,    40,   102,   102,   102,   102,   102,   nil,   102,   102,
   102,   nil,   nil,   nil,    77,   nil,   nil,   nil,    77,   nil,
    77,   nil,    77,    77,   nil,   nil,   nil,   102,    77,    77,
    77,    77,    77,    77,    77,    77,    77,   nil,   nil,   nil,
    31,   nil,   nil,   nil,    31,   nil,    31,   nil,    31,    31,
   nil,   nil,   nil,    77,    31,    31,    31,    31,    31,   nil,
    31,    31,    31,   nil,   nil,   nil,    32,   nil,   nil,   nil,
    32,   nil,    32,   nil,    32,    32,   nil,   nil,   nil,    31,
    32,    32,    32,    32,    32,   nil,    32,    32,    32,   nil,
   nil,   nil,    33,   nil,   nil,   nil,    33,   nil,    33,   nil,
    33,    33,   nil,   nil,   nil,    32,    33,    33,    33,    33,
    33,   nil,    33,    33,    33,   nil,   nil,   nil,    86,   nil,
   nil,   nil,    86,   nil,    86,   nil,    86,    86,   nil,   nil,
   nil,    33,    86,    86,    86,    86,    86,   nil,    86,    86,
    86,   nil,   nil,   nil,    35,   nil,   nil,   nil,    35,   nil,
    35,   nil,    35,    35,   nil,   nil,   nil,    86,    35,    35,
    35,    35,    35,    35,    35,    35,    35,   nil,   nil,   nil,
    36,   nil,   nil,   nil,    36,   nil,    36,   nil,    36,    36,
   nil,   nil,   nil,    35,    36,    36,    36,    36,    36,   nil,
    36,    36,    36,   nil,   nil,   nil,    37,   nil,   nil,   nil,
    37,   nil,    37,   nil,    37,    37,   nil,   nil,   nil,    36,
    37,    37,    37,    37,    37,   nil,    37,    37,    37,   nil,
   nil,   nil,    38,   nil,   nil,   nil,    38,   nil,    38,   nil,
    38,    38,   nil,   nil,   nil,    37,    38,    38,    38,    38,
    38,   nil,    38,    38,    38,   nil,   nil,   nil,    39,   nil,
   nil,   nil,    39,   nil,    39,   nil,    39,    39,   nil,   nil,
   nil,    38,    39,    39,    39,    39,    39,   nil,    39,    39,
    39,   nil,   nil,   nil,    16,   nil,   nil,   nil,    16,   nil,
    16,   nil,    16,    16,   nil,   nil,   nil,    39,    16,    16,
    16,    16,    16,   nil,    16,    16,    16,   nil,   nil,   nil,
    41,   nil,   nil,   nil,    41,   nil,    41,   nil,    41,    41,
   nil,   nil,   nil,    16,    41,    41,    41,    41,    41,   nil,
    41,    41,    41,   nil,   nil,   nil,    42,   nil,   nil,   nil,
    42,   nil,    42,   nil,    42,    42,   nil,   nil,   nil,    41,
    42,    42,    42,    42,    42,   nil,    42,    42,    42,   nil,
   nil,   nil,    53,   nil,   nil,   nil,    53,   nil,    53,   nil,
    53,    53,   nil,   nil,   nil,    42,    53,    53,    53,    53,
    53,   nil,    53,    53,    53,   nil,   nil,   nil,    44,   nil,
   nil,   nil,    44,   nil,    44,   nil,    44,    44,   nil,   nil,
   nil,    53,    44,    44,    44,    44,    44,   nil,    44,    44,
    44,   nil,   nil,   nil,    45,   nil,   nil,   nil,    45,   nil,
    45,   nil,    45,    45,   nil,   nil,   nil,    44,    45,    45,
    45,    45,    45,   nil,    45,    45,    45,   nil,   nil,   nil,
    46,   nil,   nil,   nil,    46,   nil,    46,   nil,    46,    46,
   nil,   nil,   nil,    45,    46,    46,    46,    46,    46,   nil,
    46,    46,    46,   nil,   nil,   nil,    47,   nil,   nil,   nil,
    47,   nil,    47,   nil,    47,    47,   nil,   nil,   nil,    46,
    47,    47,    47,    47,    47,   nil,    47,    47,    47,   nil,
   nil,   nil,    48,   nil,   nil,   nil,    48,   nil,    48,   nil,
    48,    48,   nil,   nil,   nil,    47,    48,    48,    48,    48,
    48,   nil,    48,    48,    48,   nil,   nil,   nil,    49,   nil,
   nil,   nil,    49,   nil,    49,   nil,    49,    49,   nil,   nil,
   nil,    48,    49,    49,    49,    49,    49,   nil,    49,    49,
    49,   nil,   nil,   nil,    50,   nil,   nil,   nil,    50,   nil,
    50,   nil,    50,    50,   nil,   nil,   nil,    49,    50,    50,
    50,    50,    50,   nil,    50,    50,    50,   nil,   nil,   nil,
    83,   nil,   nil,   nil,    83,   nil,    83,   nil,    83,    83,
   nil,   nil,   nil,    50,    83,    83,    83,    83,    83,   nil,
    83,    83,    83,   nil,   nil,   nil,    78,   nil,   nil,   nil,
    78,   nil,    78,   nil,    78,    78,   nil,   nil,   nil,    83,
    78,    78,    78,    78,    78,   nil,    78,    78,    78,   nil,
   nil,   nil,    43,   nil,   nil,   nil,    43,    96,    43,   nil,
    43,    43,   nil,   nil,   nil,    78,    43,    43,    43,    43,
    43,   nil,    43,    43,    43,   nil,    96,    96,    96,    96,
    96,    96,    96,    96,    96,    96,    96,    96,    96,    99,
   nil,    43,   nil,   nil,    96,    96,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    58,   nil,   nil,   nil,   nil,    99,    99,   nil,   nil,
   nil,   nil,    58,    58,    58,    58,    58,    58,    58,    58,
    58,    58,    58,    58,    58,   nil,   nil,   nil,   nil,   nil,
    58,    58,    62,    62,    62,    62,    62,    62,    62,    62,
    62,    62,    62,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    62,    62,    63,    63,    63,    63,    63,    63,    63,    63,
    63,    63,    63,    63,    63,   nil,   nil,   nil,   nil,   nil,
    63,    63,    64,    64,    64,    64,    64,    64,    64,    64,
    64,    64,    64,    64,    64,   nil,   nil,   nil,   nil,   nil,
    64,    64,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   nil,   nil,   nil,   nil,   nil,
   110,   110,    66,    66,    66,    66,    66,    66,    66,    67,
    67,    67,    67,    67,    67,    67,   nil,   nil,   nil,   nil,
    66,    66,   nil,   nil,   nil,   nil,   nil,    67,    67,    68,
    68,    68,    68,    68,    68,    68,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    68,    68,    61,
    61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
    61,   nil,   nil,   nil,   nil,   nil,   nil,    61,    61,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,   nil,   nil,   nil,   nil,   nil,     3,     3,    90,
    90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
    90,    90,   nil,   nil,   nil,   nil,   nil,    90,    90,    75,
    75,    75,    75,    75,    75,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    75,    75,    89,
    89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
    89,    89,   nil,   nil,   nil,   nil,   nil,    89,    89,    51,
    51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
    51,    51,   nil,   nil,   nil,    51,   nil,    51,    51,    79,
    79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
    79,    79,   nil,   nil,   nil,   nil,   nil,    79,    79,    60,
    60,    60,    60,    60,    60,    60,    60,    60,    60,    60,
    60,    60,   nil,   nil,   nil,   nil,   nil,    60,    60,    65,
    65,    65,    65,    65,    65,    65,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    65,    65 ]

racc_action_pointer = [
    -2,    89,   -13,  1023,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   462,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,   nil,   -38,    31,    36,
   nil,   228,   254,   280,    92,   332,   358,   384,   410,   436,
   150,   488,   514,   800,   566,   592,   618,   644,   670,   696,
   722,  1103,   -13,   540,   -14,    63,    76,   110,   856,   nil,
  1143,  1003,   876,   896,   916,  1163,   956,   963,   983,    90,
    56,   105,   136,    12,   -34,  1063,   nil,   202,   774,  1123,
   -16,   nil,    16,   748,    64,    58,   306,    52,    -8,  1083,
  1043,    12,    15,   nil,    25,   nil,   800,    56,   nil,   832,
   nil,   nil,   176,    54,    13,   nil,    55,   nil,     9,   nil,
   936,   nil,    64,    65,   nil,    72,    73,   nil,    27,    83,
   -12,   nil ]

racc_action_default = [
    -1,   -71,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -16,   -17,   -29,   -19,   -20,   -21,
   -22,   -23,   -24,   -25,   -26,   -71,   -28,   -48,   -29,   -71,
   -59,   -29,   -29,   -29,   -71,    -5,   -29,   -29,   -29,   -29,
   -29,   -29,   -29,   -29,   -29,   -29,   -29,   -29,   -29,   -29,
   -29,   -71,   -51,   -29,   -71,   -71,   -71,   -71,   -71,   122,
    -4,   -33,   -34,   -35,   -36,   -37,   -38,   -39,   -40,   -41,
   -42,   -43,   -44,   -45,   -46,   -47,   -18,   -30,   -29,   -50,
   -55,   -56,   -71,   -29,   -71,   -71,   -29,   -71,   -71,   -31,
   -49,   -71,   -60,   -54,   -58,   -63,   -71,   -29,   -65,   -71,
   -67,   -27,   -29,   -71,   -71,   -61,   -71,   -64,   -69,   -66,
   -32,   -52,   -55,   -71,   -57,   -71,   -71,   -62,   -29,   -71,
   -68,   -53 ]

racc_goto_table = [
     2,    35,    51,    88,    54,    82,    85,    87,     1,   104,
    91,   nil,   nil,   nil,   nil,   nil,   nil,    56,    57,    58,
   nil,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,   nil,    95,    79,
   103,    98,   116,   100,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   107,   nil,   nil,   109,   nil,   nil,   nil,   111,
   nil,   nil,   nil,    89,    90,   119,   nil,   nil,   nil,    96,
   nil,   nil,    99,   nil,   nil,   121,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   110,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   108,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   120,    35 ]

racc_goto_check = [
     2,     4,     3,    18,    17,    20,    20,    20,     1,    22,
    19,   nil,   nil,   nil,   nil,   nil,   nil,     3,     3,     3,
   nil,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,   nil,    21,     3,
    20,    21,    19,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,   nil,   nil,    21,   nil,   nil,   nil,    21,
   nil,   nil,   nil,     3,     3,    20,   nil,   nil,   nil,     3,
   nil,   nil,     3,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,     4 ]

racc_goto_pointer = [
   nil,     8,     0,   -14,    -1,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -24,   -74,   -70,
   -51,   -44,   -83 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    17,    25,   nil,   nil,
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 47, :_reduce_1,
  1, 47, :_reduce_2,
  1, 48, :_reduce_3,
  3, 48, :_reduce_4,
  2, 48, :_reduce_5,
  1, 48, :_reduce_6,
  1, 49, :_reduce_7,
  1, 49, :_reduce_8,
  1, 49, :_reduce_9,
  1, 49, :_reduce_10,
  1, 49, :_reduce_11,
  1, 49, :_reduce_12,
  1, 49, :_reduce_13,
  1, 49, :_reduce_14,
  1, 49, :_reduce_15,
  1, 49, :_reduce_16,
  1, 49, :_reduce_17,
  3, 49, :_reduce_18,
  1, 49, :_reduce_19,
  1, 50, :_reduce_none,
  1, 50, :_reduce_none,
  1, 57, :_reduce_22,
  1, 57, :_reduce_23,
  1, 57, :_reduce_24,
  1, 57, :_reduce_25,
  1, 57, :_reduce_26,
  5, 52, :_reduce_27,
  1, 63, :_reduce_28,
  0, 63, :_reduce_29,
  0, 64, :_reduce_30,
  1, 64, :_reduce_31,
  3, 64, :_reduce_32,
  3, 51, :_reduce_33,
  3, 51, :_reduce_34,
  3, 51, :_reduce_35,
  3, 51, :_reduce_36,
  3, 51, :_reduce_37,
  3, 51, :_reduce_38,
  3, 51, :_reduce_39,
  3, 51, :_reduce_40,
  3, 51, :_reduce_41,
  3, 51, :_reduce_42,
  3, 51, :_reduce_43,
  3, 51, :_reduce_44,
  3, 51, :_reduce_45,
  3, 51, :_reduce_46,
  3, 51, :_reduce_47,
  1, 58, :_reduce_48,
  4, 53, :_reduce_49,
  3, 53, :_reduce_50,
  2, 56, :_reduce_51,
  6, 54, :_reduce_52,
  9, 54, :_reduce_53,
  1, 65, :_reduce_54,
  0, 65, :_reduce_55,
  3, 55, :_reduce_56,
  3, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 62, :_reduce_59,
  0, 68, :_reduce_60,
  1, 68, :_reduce_61,
  3, 68, :_reduce_62,
  4, 59, :_reduce_63,
  5, 59, :_reduce_64,
  4, 60, :_reduce_65,
  5, 60, :_reduce_66,
  4, 61, :_reduce_67,
  6, 66, :_reduce_68,
  3, 66, :_reduce_69,
  2, 66, :_reduce_70 ]

racc_reduce_n = 71

racc_shift_n = 122

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :ELSIF => 4,
  :THEN => 5,
  :UNLESS => 6,
  :END => 7,
  :WHILE => 8,
  :UNTIL => 9,
  :DEF => 10,
  :COMMAND => 11,
  :NARGS => 12,
  :INDENT => 13,
  :DEDENT => 14,
  :NEWLINE => 15,
  :NUMBER => 16,
  :STRING => 17,
  :TRUE => 18,
  :FALSE => 19,
  :NIL => 20,
  :IDENTIFIER => 21,
  :CONSTANT => 22,
  :SCOPE_MODIFIER => 23,
  :FINISH => 24,
  "!" => 25,
  "*" => 26,
  "/" => 27,
  "+" => 28,
  "+=" => 29,
  "-" => 30,
  "-=" => 31,
  "." => 32,
  ">" => 33,
  ">=" => 34,
  "<" => 35,
  "<=" => 36,
  "&&" => 37,
  "||" => 38,
  "=" => 39,
  "," => 40,
  "(" => 41,
  ")" => 42,
  ";" => 43,
  "==" => 44,
  "!=" => 45 }

racc_nt_base = 46

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "ELSIF",
  "THEN",
  "UNLESS",
  "END",
  "WHILE",
  "UNTIL",
  "DEF",
  "COMMAND",
  "NARGS",
  "INDENT",
  "DEDENT",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "SCOPE_MODIFIER",
  "FINISH",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"+=\"",
  "\"-\"",
  "\"-=\"",
  "\".\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"==\"",
  "\"!=\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Operator",
  "Call",
  "Assign",
  "Def",
  "Command",
  "VariableRetrieval",
  "Literal",
  "Constant",
  "If",
  "Unless",
  "While",
  "EndScript",
  "Scope",
  "ArgList",
  "Keyword",
  "Block",
  "End",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 33)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 38)
  def _reduce_3(val, _values, result)
     result = Nodes.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 41)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 51)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_18(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 20 omitted

# reduce 21 omitted

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_22(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_23(val, _values, result)
     result = StringNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_24(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_25(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_26(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_27(val, _values, result)
     result = CallNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_28(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_29(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_31(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_32(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_33(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_34(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_35(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_36(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_37(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_38(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_39(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_40(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_41(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_42(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_43(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_44(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_45(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_46(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_47(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_48(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_49(val, _values, result)
     result = SetVariableNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_50(val, _values, result)
     result = SetConstantNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 125)
  def _reduce_51(val, _values, result)
     result = GetVariableNode.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_52(val, _values, result)
     indent = val[4].pop; result = DefNode.new(val[1], val[2], [],     val[3], val[4], indent) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_53(val, _values, result)
     indent = val[7].pop; result = DefNode.new(val[1], val[2], val[4], val[6], val[7], indent) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_55(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_56(val, _values, result)
    
    result
  end
.,.,

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_59(val, _values, result)
     result = FinishNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_60(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_61(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_62(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_63(val, _values, result)
     indent = val[2].pop; result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_64(val, _values, result)
     result = IfNode.new( val[1], Nodes.new([val[3]]) ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_65(val, _values, result)
     indent = val[2].pop; result = UnlessNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_66(val, _values, result)
     result = UnlessNode.new( val[1], Nodes.new([val[3]]) ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_67(val, _values, result)
     indent = val[2].pop; result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_68(val, _values, result)
     result = val[2] << ElseNode.new(val[5]) << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_69(val, _values, result)
     result = val[2] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_70(val, _values, result)
     result = Nodes.new([]) << val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
