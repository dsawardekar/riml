#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require File.expand_path("../ast_rewriter", __FILE__)
  require File.expand_path("../errors", __FILE__)
module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 497)
  # This code will be put as-is in the parser class

  attr_accessor :ast_rewriter

  # parses tokens or code into output nodes
  def parse(object, ast_rewriter = AST_Rewriter.new, include_file = nil)
    if tokens?(object)
      @tokens = object
    elsif code?(object)
      @lexer = Riml::Lexer.new(object)
    end

    begin
      ast = do_parse
    rescue Racc::ParseError => e
      raise unless @lexer
      raise Riml::ParseError,  "line #{@lexer.lineno}: #{e.message}"
    end

    @ast_rewriter ||= ast_rewriter
    return ast unless @ast_rewriter
    @ast_rewriter.ast = ast
    @ast_rewriter.rewrite(include_file)
  end

  # get the next token from either the list of tokens provided, or
  # the lexer getting the next token
  def next_token
    return @tokens.shift unless @lexer
    @lexer.next_token
  end

  private
  def tokens?(object)
    Array === object
  end

  def code?(object)
    String === object
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'77,35,254,35,78,35,79,82,80,81,84,35,383,83,35,72,73,256,57,56,85,86',
'74,187,87,58,75,35,46,48,47,88,49,43,44,45,63,69,70,-100,156,59,50,67',
'76,60,354,388,251,61,62,360,361,191,248,159,250,59,50,67,247,254,36',
'37,36,37,36,37,355,389,159,339,36,37,52,36,37,35,191,248,140,292,246',
'49,254,247,26,340,36,37,52,77,54,159,156,78,-210,79,82,80,81,84,256',
'273,83,256,72,73,159,57,56,85,86,74,159,87,58,75,35,46,48,47,88,49,43',
'44,45,63,69,70,132,-175,59,50,67,76,60,159,36,37,61,62,281,334,262,287',
'314,159,191,336,335,289,-174,49,241,159,159,132,159,-150,-150,-150,-150',
'263,138,252,278,-32,59,50,67,140,245,124,125,245,323,26,344,36,37,52',
'262,54,303,124,125,243,122,123,126,110,111,112,116,117,118,113,114,115',
'119,120,121,97,99,98,104,106,105,107,109,108,101,103,102,127,128,96',
'95,130,77,132,100,322,78,330,79,82,80,81,84,124,125,83,100,72,73,245',
'57,56,85,86,74,235,87,58,75,240,46,48,47,88,49,43,44,45,63,69,70,-100',
'140,59,50,67,76,60,262,239,371,61,62,329,124,125,348,122,123,126,159',
'311,100,124,125,349,122,123,126,174,175,176,177,46,48,47,235,49,43,44',
'45,143,142,-151,-151,-151,-151,50,26,77,360,378,52,78,54,79,82,80,81',
'84,253,132,83,100,72,73,198,57,56,85,86,74,100,87,58,75,35,46,48,47',
'88,49,43,44,45,63,69,70,140,191,59,50,67,76,60,151,327,54,61,62,195',
'124,125,194,122,123,126,110,111,112,116,117,118,113,114,115,119,120',
'121,192,46,48,47,191,49,43,44,45,59,-147,-147,-147,-147,262,50,26,77',
'36,37,52,78,54,79,82,80,81,84,191,324,83,100,72,73,191,57,56,85,86,74',
'191,87,58,75,35,46,48,47,88,49,43,44,45,63,69,70,132,178,59,50,67,76',
'60,151,-91,54,61,62,262,124,125,372,122,123,126,110,111,112,116,117',
'118,113,114,115,119,120,121,97,99,98,104,106,105,107,109,108,101,103',
'102,127,128,96,100,26,77,36,37,52,78,54,79,82,80,81,84,124,125,83,100',
'72,73,375,57,56,85,86,74,376,87,58,75,35,46,48,47,88,49,43,44,45,63',
'69,70,284,379,59,50,67,76,60,285,124,125,61,62,277,-100,381,59,50,67',
'374,382,373,100,-148,-148,-148,-148,262,235,318,59,50,67,262,262,350',
'347,278,262,262,320,341,384,124,125,59,50,67,26,191,36,37,52,386,54',
'-90,124,125,100,122,123,126,110,111,112,116,117,118,113,114,115,119',
'120,121,97,99,98,104,106,105,107,109,108,101,103,102,127,128,96,95,130',
'77,100,323,286,78,323,79,82,80,81,84,132,319,83,100,72,73,-36,57,56',
'85,86,74,91,87,58,75,35,46,48,47,88,49,43,44,45,63,69,70,-100,191,59',
'50,67,76,60,397,376,191,61,62,129,100,100,134,132,401,323,403,299,91',
'191,89,406,,,,46,48,47,,49,43,44,45,,,,,,,50,,,,,26,,36,37,52,,54,124',
'125,,122,123,126,110,111,112,116,117,118,113,114,115,119,120,121,97',
'99,98,104,106,105,107,109,108,101,103,102,127,128,96,95,130,362,151',
',54,307,,,,,,,,,,100,,,,,,,,,,,,,,124,125,,122,123,126,124,125,,122',
'123,126,,124,125,,122,123,126,110,111,112,116,117,118,113,114,115,119',
'120,121,97,99,98,104,106,105,107,109,108,101,103,102,127,128,96,95,130',
'357,100,,,,,,100,137,56,,86,,,100,,,,46,48,47,,49,43,44,45,63,,,,,59',
'50,67,,60,,,,61,62,124,125,,122,123,126,110,111,112,116,117,118,113',
'114,115,119,120,121,97,99,98,104,106,105,107,109,108,101,103,102,127',
'128,96,95,130,26,,,,52,,54,,238,137,56,,86,,100,,,,,46,48,47,,49,43',
'44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,,86,124,125,,122,123,126,46',
'48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,,,26,,,,52,,54,,238',
',,137,56,,86,,,,100,,,46,48,47,,49,43,44,45,63,,,-100,26,59,50,67,52',
'60,54,,,61,62,137,56,,86,124,125,,122,123,126,46,48,47,,49,43,44,45',
'63,,,-100,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49',
'43,44,45,63,,100,-100,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,',
'46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,160,86,,,52',
',54,,46,48,47,,49,43,44,45,63,,,-100,,59,50,67,,60,,,,61,62,137,56,26',
'86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137',
'56,167,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61',
'62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60',
',,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67',
',60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59',
'50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,',
',,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45',
'63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43',
'44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,',
'49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48',
'47,,49,43,44,45,63,,,-100,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,',
'54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86',
',,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56',
'26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137',
'56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62',
'137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,',
'61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,',
'60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,-100,',
'59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63',
',,-100,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43',
'44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,',
'49,43,44,45,63,,,-100,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,',
'46,48,47,,49,43,44,45,63,,,-100,,59,50,67,,60,,,,61,62,137,56,26,86',
',,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56',
'26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,-100,,59,50,67,,60,,,,61',
'62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,-100,,59,50,67',
',60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59',
'50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,',
',,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45',
'63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43',
'44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,',
'49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48',
'47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,',
'46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52',
',54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86',
',,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56',
'26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137',
'56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62',
'137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,',
'61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,',
'60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50',
'67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,',
'59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63',
',,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44',
'45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49',
'43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47',
',49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46',
'48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54',
',46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52',
',54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86',
',,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56',
'26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137',
'56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,-100,,59,50,67,,60,,,',
'61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,',
'60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50',
'67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,',
'59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63',
',,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44',
'45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49',
'43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47',
',49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46',
'48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54',
',46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52',
',54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86',
',,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56',
'26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137',
'56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62',
'137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,',
'61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,-100,,59,50',
'67,,60,,,,61,62,137,56,26,86,,,52,305,54,,46,48,47,,49,43,44,45,63,',
',,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45',
'63,,,,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43',
'44,45,63,,,-100,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,,54,,46,48',
'47,,49,43,44,45,63,,,-100,,59,50,67,,60,,,,61,62,137,56,26,86,,,52,',
'54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56,26,86',
',,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60,,,,61,62,137,56',
'26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,-100,,59,50,67,,60,,,,61',
'62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67,,60',
',,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59,50,67',
',60,,,,61,62,137,56,26,86,,,52,,54,,46,48,47,,49,43,44,45,63,,,,,59',
'50,67,,60,,,,61,62,137,56,172,86,124,125,52,122,123,126,46,48,47,,49',
'43,44,45,63,,,,,59,50,67,,60,,,,61,62,,,164,,,,52,,,,,,,,,,,,191,,100',
',,,124,125,,122,123,126,,,,,,172,,124,125,52,122,123,126,110,111,112',
'116,117,118,113,114,115,119,120,121,97,99,98,104,106,105,107,109,108',
'101,103,102,127,128,96,95,130,191,100,,,,,124,125,,122,123,126,124,125',
'100,122,123,126,,124,125,,122,123,126,110,111,112,116,117,118,113,114',
'115,119,120,121,97,99,98,104,106,105,107,109,108,101,103,102,127,128',
'96,95,130,191,100,,,,,,100,124,125,,122,123,126,100,,,,,124,125,,122',
'123,126,110,111,112,116,117,118,113,114,115,119,120,121,97,99,98,104',
'106,105,107,109,108,101,103,102,127,128,96,95,130,191,,,100,,,124,125',
',122,123,126,,,100,,,,,124,125,,122,123,126,110,111,112,116,117,118',
'113,114,115,119,120,121,97,99,98,104,106,105,107,109,108,101,103,102',
'127,128,96,95,130,395,100,,,,,,,,,,,,,100,,,,,124,125,,122,123,126,110',
'111,112,116,117,118,113,114,115,119,120,121,97,99,98,104,106,105,107',
'109,108,101,103,102,127,128,96,95,130,399,,,,,,,,,,,,,,100,,,,,124,125',
',122,123,126,110,111,112,116,117,118,113,114,115,119,120,121,97,99,98',
'104,106,105,107,109,108,101,103,102,127,128,96,95,130,191,,,,,,,,,,',
',,,100,,,,,124,125,,122,123,126,110,111,112,116,117,118,113,114,115',
'119,120,121,97,99,98,104,106,105,107,109,108,101,103,102,127,128,96',
'95,130,,,,,,,,,,,,,124,125,100,122,123,126,110,111,112,116,117,118,113',
'114,115,119,120,121,97,99,98,104,106,105,107,109,108,101,103,102,127',
'128,96,95,130,,,,,,,,,,,,,124,125,100,122,123,126,110,111,112,116,117',
'118,113,114,115,119,120,121,97,99,98,104,106,105,107,109,108,101,103',
'102,127,128,96,95,130,,,,,,,,,,,,,124,125,100,122,123,126,110,111,112',
'116,117,118,113,114,115,119,120,121,97,99,98,104,106,105,107,109,108',
'101,103,102,127,128,96,95,130,,,,,,,317,,,,,,124,125,100,122,123,126',
'110,111,112,116,117,118,113,114,115,119,120,121,97,99,98,104,106,105',
'107,109,108,101,103,102,127,128,96,95,130,,,,,,,,,,,,,124,125,100,122',
'123,126,110,111,112,116,117,118,113,114,115,119,120,121,97,99,98,104',
'106,105,107,109,108,101,103,102,127,128,96,95,130,,,,,,,317,,,,,,124',
'125,100,122,123,126,110,111,112,116,117,118,113,114,115,119,120,121',
'97,99,98,104,106,105,107,109,108,101,103,102,127,128,96,95,130,,,,,',
',,,,,,,124,125,100,122,123,126,110,111,112,116,117,118,113,114,115,119',
'120,121,97,99,98,104,106,105,107,109,108,101,103,102,127,128,96,95,130',
',,,,,,,,,,,,124,125,100,122,123,126,110,111,112,116,117,118,113,114',
'115,119,120,121,97,99,98,104,106,105,107,109,108,101,103,102,127,128',
'96,95,130,,,,,,,,,,,,,124,125,100,122,123,126,110,111,112,116,117,118',
'113,114,115,119,120,121,97,99,98,104,106,105,107,109,108,101,103,102',
'127,128,,,,,,,,,,,,,,,,124,125,100,122,123,126,110,111,112,116,117,118',
'113,114,115,119,120,121,124,125,,122,123,126,110,111,112,116,117,118',
'113,114,115,119,120,121,,,,,,,,,,,,,,100,,,,,,,,,,,,,,,,124,125,100',
'122,123,126,110,111,112,116,117,118,113,114,115,119,120,121,97,99,98',
'104,106,105,107,109,108,101,103,102,127,128,96,95,130,,,,,,,,,,,,,124',
'125,100,122,123,126,110,111,112,116,117,118,113,114,115,119,120,121',
'124,125,,122,123,126,110,111,112,116,117,118,113,114,115,119,120,121',
',,,,,,,,,,,124,125,100,122,123,126,110,111,112,116,117,118,113,114,115',
'119,120,121,124,125,100,122,123,126,110,111,112,116,117,118,113,114',
'115,119,120,121,,,,,,,,,,,,124,125,100,122,123,126,110,111,112,116,117',
'118,113,114,115,119,120,121,124,125,100,122,123,126,110,111,112,116',
'117,118,113,114,115,119,120,121,,,,,,,,,,,,124,125,100,122,123,126,110',
'111,112,116,117,118,113,114,115,119,120,121,124,125,100,122,123,126',
'110,111,112,116,117,118,113,114,115,119,120,121,,,,,,,,,,,,,,100,,,',
',,,,,,,,,,,,124,125,100,122,123,126,110,111,112,116,117,118,113,114',
'115,119,120,121,97,99,98,104,106,105,107,109,108,101,103,102,127,128',
'96,95,130,,,,,,,,,,,,,124,125,100,122,123,126,110,111,112,116,117,118',
'113,114,115,119,120,121,97,99,98,104,106,105,107,109,108,101,103,102',
'127,128,96,95,130,,,,,,,242,,,,,,124,125,100,122,123,126,110,111,112',
'116,117,118,113,114,115,119,120,121,97,99,98,104,106,105,107,109,108',
'101,103,102,127,128,96,95,130,,,,,,,,,,,,,124,125,100,122,123,126,110',
'111,112,116,117,118,113,114,115,119,120,121,97,99,98,104,106,105,107',
'109,108,101,103,102,,,,,,,,,,,,,,,,,,124,125,100,122,123,126,110,111',
'112,116,117,118,113,114,115,119,120,121,97,99,98,104,106,105,107,109',
'108,101,103,102,,,,,,,,,,,,,,,,,,124,125,100,122,123,126,110,111,112',
'116,117,118,113,114,115,119,120,121,97,99,98,104,106,105,107,109,108',
'101,103,102,127,128,96,95,130,,,,,,,,,,,,,124,125,100,122,123,126,110',
'111,112,116,117,118,113,114,115,119,120,121,97,99,98,104,106,105,107',
'109,108,101,103,102,127,128,96,95,130,,,,,,,,,,,,,,294,100,124,125,',
'122,123,126,110,111,112,116,117,118,113,114,115,119,120,121,97,99,98',
'104,106,105,107,109,108,101,103,102,127,128,96,95,130,,,,,,,,,,,,,124',
'125,100,122,123,126,110,111,112,116,117,118,113,114,115,119,120,121',
'97,99,98,104,106,105,107,109,108,101,103,102,127,128,96,95,130,,,,,',
',,,,,297,,,298,100,124,125,,122,123,126,110,111,112,116,117,118,113',
'114,115,119,120,121,97,99,98,104,106,105,107,109,108,101,103,102,127',
'128,96,95,130,,,,,,,,,,,,,124,125,100,122,123,126,110,111,112,116,117',
'118,113,114,115,119,120,121,97,99,98,104,106,105,107,109,108,101,103',
'102,127,128,96,95,130,,,,,,,,,,,,,124,125,100,122,123,126,110,111,112',
'116,117,118,113,114,115,119,120,121,97,99,98,104,106,105,107,109,108',
'101,103,102,127,128,96,95,130,,,,,,,,,,,,,124,125,100,122,123,126,110',
'111,112,116,117,118,113,114,115,119,120,121,97,99,98,104,106,105,107',
'109,108,101,103,102,127,128,96,95,130,,,,,,,,,,,346,,124,125,100,122',
'123,126,110,111,112,116,117,118,113,114,115,119,120,121,97,99,98,104',
'106,105,107,109,108,101,103,102,127,128,96,95,130,,,,,,,,,,,,,124,125',
'100,122,123,126,110,111,112,116,117,118,113,114,115,119,120,121,97,99',
'98,104,106,105,107,109,108,101,103,102,127,128,96,95,130,,,,,,,242,',
',,,,124,125,100,122,123,126,110,111,112,116,117,118,113,114,115,119',
'120,121,97,99,98,104,106,105,107,109,108,101,103,102,127,128,96,95,130',
',,,,,,,,,,343,,,298,100,124,125,,122,123,126,110,111,112,116,117,118',
'113,114,115,119,120,121,97,99,98,104,106,105,107,109,108,101,103,102',
'127,128,96,95,130,,,,,,,,,,,,,124,125,100,122,123,126,110,111,112,116',
'117,118,113,114,115,119,120,121,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,100' ]
        racc_action_table = arr = ::Array.new(5625, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,400,254,290,0,394,0,0,0,0,0,2,365,0,404,0,0,255,0,0,0,0,0,83,0,0,0',
'0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,322,374,152,0,0,326,326,192,249',
'254,152,159,159,159,249,273,400,400,290,290,394,394,322,374,255,291',
'2,2,83,404,404,326,336,145,317,192,145,336,156,145,0,292,0,0,0,278,0',
'55,166,278,278,278,278,278,278,278,274,181,278,157,278,278,159,278,278',
'278,278,278,273,278,278,278,278,278,278,278,278,278,278,278,278,278',
'278,278,317,156,278,278,278,278,278,156,326,326,278,278,184,288,261',
'190,261,166,289,288,288,190,157,289,135,274,181,135,157,29,29,29,29',
'163,29,154,184,163,69,69,69,242,141,171,171,139,275,278,296,278,278',
'278,244,278,244,184,184,137,184,184,184,184,184,184,184,184,184,184',
'184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184',
'184,184,184,184,184,90,242,171,275,90,283,90,90,90,90,90,170,170,90',
'184,90,90,301,90,90,90,90,90,302,90,90,90,134,90,90,90,90,90,90,90,90',
'90,90,90,90,30,90,90,90,90,90,351,133,351,90,90,282,222,222,312,222',
'222,222,258,258,170,214,214,313,214,214,214,65,65,65,65,252,252,252',
'131,252,252,252,252,39,39,30,30,30,30,252,90,399,359,359,90,399,90,399',
'399,399,399,399,155,93,399,222,399,399,92,399,399,399,399,399,214,399',
'399,399,399,399,399,399,399,399,399,399,399,399,399,399,31,321,399,399',
'399,399,399,252,280,252,399,399,89,201,201,87,201,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,85,54,54,54,84,54,54,54,54,71,31',
'31,31,31,161,54,399,379,399,399,399,379,399,379,379,379,379,379,335',
'276,379,201,379,379,338,379,379,379,379,379,340,379,379,379,379,379',
'379,379,379,379,379,379,379,379,379,379,165,67,379,379,379,379,379,54',
'350,54,379,379,168,199,199,352,199,199,199,199,199,199,199,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199',
'199,199,199,169,379,395,379,379,379,395,379,395,395,395,395,395,226',
'226,395,199,395,395,354,395,395,395,395,395,355,395,395,395,395,395',
'395,395,395,395,395,395,395,395,395,395,187,360,395,395,395,395,395',
'188,227,227,395,395,183,8,363,8,8,8,353,364,353,226,41,41,41,41,265',
'144,265,259,259,259,316,310,316,310,183,267,293,267,293,366,230,230',
'70,70,70,395,368,395,395,395,370,395,371,183,183,227,183,183,183,183',
'183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183',
'183,183,183,183,183,183,183,183,183,183,183,191,230,373,189,191,375',
'191,191,191,191,191,42,266,191,183,191,191,193,191,191,191,191,191,196',
'191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,387',
'191,191,191,191,191,388,389,391,191,191,20,228,229,23,22,396,397,398',
'237,3,402,1,405,,,,251,251,251,,251,251,251,251,,,,,,,251,,,,,191,,191',
'191,191,,191,20,20,,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20',
'20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,328,251,,251,251,,,',
',,,,,,20,,,,,,,,,,,,,,215,215,,215,215,215,216,216,,216,216,216,,328',
'328,,328,328,328,328,328,328,328,328,328,328,328,328,328,328,328,328',
'328,328,328,328,328,328,328,328,328,328,328,328,328,328,328,328,325',
'215,,,,,,216,235,235,,235,,,328,,,,235,235,235,,235,235,235,235,235',
',,,,235,235,235,,235,,,,235,235,325,325,,325,325,325,325,325,325,325',
'325,325,325,325,325,325,325,325,325,325,325,325,325,325,325,325,325',
'325,325,325,325,325,325,325,325,235,,,,235,,235,,235,132,132,,132,,325',
',,,,132,132,132,,132,132,132,132,132,,,,,132,132,132,,132,,,,132,132',
'119,119,,119,217,217,,217,217,217,119,119,119,,119,119,119,119,119,',
',,,119,119,119,,119,,,,119,119,,,132,,,,132,,132,,132,,,194,194,,194',
',,,217,,,194,194,194,,194,194,194,194,194,,,194,119,194,194,194,119',
'194,119,,,194,194,263,263,,263,218,218,,218,218,218,263,263,263,,263',
'263,263,263,263,,,263,,263,263,263,,263,,,,263,263,56,56,194,56,,,194',
',194,,56,56,56,,56,56,56,56,56,,218,56,,56,56,56,,56,,,,56,56,376,376',
'263,376,,,263,,263,,376,376,376,,376,376,376,376,376,,,,,376,376,376',
',376,,,,376,376,58,58,56,58,,,56,,56,,58,58,58,,58,58,58,58,58,,,58',
',58,58,58,,58,,,,58,58,60,60,376,60,,,376,,376,,60,60,60,,60,60,60,60',
'60,,,,,60,60,60,,60,,,,60,60,61,61,58,61,,,58,,58,,61,61,61,,61,61,61',
'61,61,,,,,61,61,61,,61,,,,61,61,62,62,60,62,,,60,,60,,62,62,62,,62,62',
'62,62,62,,,,,62,62,62,,62,,,,62,62,378,378,61,378,,,61,,61,,378,378',
'378,,378,378,378,378,378,,,,,378,378,378,,378,,,,378,378,361,361,62',
'361,,,62,,62,,361,361,361,,361,361,361,361,361,,,,,361,361,361,,361',
',,,361,361,262,262,378,262,,,378,,378,,262,262,262,,262,262,262,262',
'262,,,,,262,262,262,,262,,,,262,262,177,177,361,177,,,361,,361,,177',
'177,177,,177,177,177,177,177,,,,,177,177,177,,177,,,,177,177,176,176',
'262,176,,,262,,262,,176,176,176,,176,176,176,176,176,,,,,176,176,176',
',176,,,,176,176,175,175,177,175,,,177,,177,,175,175,175,,175,175,175',
'175,175,,,,,175,175,175,,175,,,,175,175,75,75,176,75,,,176,,176,,75',
'75,75,,75,75,75,75,75,,,75,,75,75,75,,75,,,,75,75,77,77,175,77,,,175',
',175,,77,77,77,,77,77,77,77,77,,,,,77,77,77,,77,,,,77,77,78,78,75,78',
',,75,,75,,78,78,78,,78,78,78,78,78,,,,,78,78,78,,78,,,,78,78,79,79,77',
'79,,,77,,77,,79,79,79,,79,79,79,79,79,,,,,79,79,79,,79,,,,79,79,82,82',
'78,82,,,78,,78,,82,82,82,,82,82,82,82,82,,,,,82,82,82,,82,,,,82,82,174',
'174,79,174,,,79,,79,,174,174,174,,174,174,174,174,174,,,,,174,174,174',
',174,,,,174,174,172,172,82,172,,,82,,82,,172,172,172,,172,172,172,172',
'172,,,,,172,172,172,,172,,,,172,172,238,238,174,238,,,174,,174,,238',
'238,238,,238,238,238,238,238,,,238,,238,238,238,,238,,,,238,238,167',
'167,172,167,,,172,,172,,167,167,167,,167,167,167,167,167,,,167,,167',
'167,167,,167,,,,167,167,26,26,238,26,,,238,,238,,26,26,26,,26,26,26',
'26,26,,,,,26,26,26,,26,,,,26,26,243,243,167,243,,,167,,167,,243,243',
'243,,243,243,243,243,243,,,243,,243,243,243,,243,,,,243,243,253,253',
'26,253,,,26,,26,,253,253,253,,253,253,253,253,253,,,253,,253,253,253',
',253,,,,253,253,91,91,243,91,,,243,,243,,91,91,91,,91,91,91,91,91,,',
',,91,91,91,,91,,,,91,91,319,319,253,319,,,253,,253,,319,319,319,,319',
'319,319,319,319,,,319,,319,319,319,,319,,,,319,319,164,164,91,164,,',
'91,,91,,164,164,164,,164,164,164,164,164,,,164,,164,164,164,,164,,,',
'164,164,286,286,319,286,,,319,,319,,286,286,286,,286,286,286,286,286',
',,,,286,286,286,,286,,,,286,286,96,96,164,96,,,164,,164,,96,96,96,,96',
'96,96,96,96,,,,,96,96,96,,96,,,,96,96,97,97,286,97,,,286,,286,,97,97',
'97,,97,97,97,97,97,,,,,97,97,97,,97,,,,97,97,98,98,96,98,,,96,,96,,98',
'98,98,,98,98,98,98,98,,,,,98,98,98,,98,,,,98,98,99,99,97,99,,,97,,97',
',99,99,99,,99,99,99,99,99,,,,,99,99,99,,99,,,,99,99,100,100,98,100,',
',98,,98,,100,100,100,,100,100,100,100,100,,,,,100,100,100,,100,,,,100',
'100,101,101,99,101,,,99,,99,,101,101,101,,101,101,101,101,101,,,,,101',
'101,101,,101,,,,101,101,102,102,100,102,,,100,,100,,102,102,102,,102',
'102,102,102,102,,,,,102,102,102,,102,,,,102,102,103,103,101,103,,,101',
',101,,103,103,103,,103,103,103,103,103,,,,,103,103,103,,103,,,,103,103',
'104,104,102,104,,,102,,102,,104,104,104,,104,104,104,104,104,,,,,104',
'104,104,,104,,,,104,104,105,105,103,105,,,103,,103,,105,105,105,,105',
'105,105,105,105,,,,,105,105,105,,105,,,,105,105,106,106,104,106,,,104',
',104,,106,106,106,,106,106,106,106,106,,,,,106,106,106,,106,,,,106,106',
'107,107,105,107,,,105,,105,,107,107,107,,107,107,107,107,107,,,,,107',
'107,107,,107,,,,107,107,108,108,106,108,,,106,,106,,108,108,108,,108',
'108,108,108,108,,,,,108,108,108,,108,,,,108,108,109,109,107,109,,,107',
',107,,109,109,109,,109,109,109,109,109,,,,,109,109,109,,109,,,,109,109',
'110,110,108,110,,,108,,108,,110,110,110,,110,110,110,110,110,,,,,110',
'110,110,,110,,,,110,110,111,111,109,111,,,109,,109,,111,111,111,,111',
'111,111,111,111,,,,,111,111,111,,111,,,,111,111,112,112,110,112,,,110',
',110,,112,112,112,,112,112,112,112,112,,,,,112,112,112,,112,,,,112,112',
'113,113,111,113,,,111,,111,,113,113,113,,113,113,113,113,113,,,,,113',
'113,113,,113,,,,113,113,114,114,112,114,,,112,,112,,114,114,114,,114',
'114,114,114,114,,,,,114,114,114,,114,,,,114,114,115,115,113,115,,,113',
',113,,115,115,115,,115,115,115,115,115,,,,,115,115,115,,115,,,,115,115',
'116,116,114,116,,,114,,114,,116,116,116,,116,116,116,116,116,,,,,116',
'116,116,,116,,,,116,116,117,117,115,117,,,115,,115,,117,117,117,,117',
'117,117,117,117,,,,,117,117,117,,117,,,,117,117,118,118,116,118,,,116',
',116,,118,118,118,,118,118,118,118,118,,,,,118,118,118,,118,,,,118,118',
'52,52,117,52,,,117,,117,,52,52,52,,52,52,52,52,52,,,52,,52,52,52,,52',
',,,52,52,120,120,118,120,,,118,,118,,120,120,120,,120,120,120,120,120',
',,,,120,120,120,,120,,,,120,120,121,121,52,121,,,52,,52,,121,121,121',
',121,121,121,121,121,,,,,121,121,121,,121,,,,121,121,122,122,120,122',
',,120,,120,,122,122,122,,122,122,122,122,122,,,,,122,122,122,,122,,',
',122,122,123,123,121,123,,,121,,121,,123,123,123,,123,123,123,123,123',
',,,,123,123,123,,123,,,,123,123,124,124,122,124,,,122,,122,,124,124',
'124,,124,124,124,124,124,,,,,124,124,124,,124,,,,124,124,125,125,123',
'125,,,123,,123,,125,125,125,,125,125,125,125,125,,,,,125,125,125,,125',
',,,125,125,126,126,124,126,,,124,,124,,126,126,126,,126,126,126,126',
'126,,,,,126,126,126,,126,,,,126,126,127,127,125,127,,,125,,125,,127',
'127,127,,127,127,127,127,127,,,,,127,127,127,,127,,,,127,127,128,128',
'126,128,,,126,,126,,128,128,128,,128,128,128,128,128,,,,,128,128,128',
',128,,,,128,128,129,129,127,129,,,127,,127,,129,129,129,,129,129,129',
'129,129,,,,,129,129,129,,129,,,,129,129,130,130,128,130,,,128,,128,',
'130,130,130,,130,130,130,130,130,,,,,130,130,130,,130,,,,130,130,277',
'277,129,277,,,129,,129,,277,277,277,,277,277,277,277,277,,,,,277,277',
'277,,277,,,,277,277,246,246,130,246,,,130,,130,,246,246,246,,246,246',
'246,246,246,,,,,246,246,246,,246,,,,246,246,248,248,277,248,,,277,,277',
',248,248,248,,248,248,248,248,248,,,,,248,248,248,,248,,,,248,248,160',
'160,246,160,,,246,,246,,160,160,160,,160,160,160,160,160,,,160,,160',
'160,160,,160,,,,160,160,281,281,248,281,,,248,248,248,,281,281,281,',
'281,281,281,281,281,,,,,281,281,281,,281,,,,281,281,284,284,160,284',
',,160,,160,,284,284,284,,284,284,284,284,284,,,,,284,284,284,,284,,',
',284,284,298,298,281,298,,,281,,281,,298,298,298,,298,298,298,298,298',
',,298,,298,298,298,,298,,,,298,298,138,138,284,138,,,284,,284,,138,138',
'138,,138,138,138,138,138,,,138,,138,138,138,,138,,,,138,138,285,285',
'298,285,,,298,,298,,285,285,285,,285,285,285,285,285,,,,,285,285,285',
',285,,,,285,285,294,294,138,294,,,138,,138,,294,294,294,,294,294,294',
'294,294,,,,,294,294,294,,294,,,,294,294,151,151,285,151,,,285,,285,',
'151,151,151,,151,151,151,151,151,,,151,,151,151,151,,151,,,,151,151',
'95,95,294,95,,,294,,294,,95,95,95,,95,95,95,95,95,,,,,95,95,95,,95,',
',,95,95,86,86,151,86,,,151,,151,,86,86,86,,86,86,86,86,86,,,,,86,86',
'86,,86,,,,86,86,57,57,95,57,,,95,,95,,57,57,57,,57,57,57,57,57,,,,,57',
'57,57,,57,,,,57,57,63,63,86,63,219,219,86,219,219,219,63,63,63,,63,63',
'63,63,63,,,,,63,63,63,,63,,,,63,63,,,57,,,,57,,,,,,,,,,,,333,,219,,',
',220,220,,220,220,220,,,,,,63,,333,333,63,333,333,333,333,333,333,333',
'333,333,333,333,333,333,333,333,333,333,333,333,333,333,333,333,333',
'333,333,333,333,333,333,333,333,185,220,,,,,221,221,,221,221,221,223',
'223,333,223,223,223,,185,185,,185,185,185,185,185,185,185,185,185,185',
'185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185',
'185,185,185,185,185,332,221,,,,,,223,224,224,,224,224,224,185,,,,,332',
'332,,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332',
'332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,331',
',,224,,,225,225,,225,225,225,,,332,,,,,331,331,,331,331,331,331,331',
'331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,331',
'331,331,331,331,331,331,331,331,331,331,380,225,,,,,,,,,,,,,331,,,,',
'380,380,,380,380,380,380,380,380,380,380,380,380,380,380,380,380,380',
'380,380,380,380,380,380,380,380,380,380,380,380,380,380,380,380,380',
'393,,,,,,,,,,,,,,380,,,,,393,393,,393,393,393,393,393,393,393,393,393',
'393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393',
'393,393,393,393,393,393,186,,,,,,,,,,,,,,393,,,,,186,186,,186,186,186',
'186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186',
'186,186,186,186,186,186,186,186,186,186,186,186,,,,,,,,,,,,,270,270',
'186,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270',
'270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,,,,',
',,,,,,,,269,269,270,269,269,269,269,269,269,269,269,269,269,269,269',
'269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269',
'269,269,269,,,,,,,,,,,,,268,268,269,268,268,268,268,268,268,268,268',
'268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268',
'268,268,268,268,268,268,268,,,,,,,268,,,,,,345,345,268,345,345,345,345',
'345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345',
'345,345,345,345,345,345,345,345,345,345,345,,,,,,,,,,,,,264,264,345',
'264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264',
'264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,,,,,,,264',
',,,,,182,182,264,182,182,182,182,182,182,182,182,182,182,182,182,182',
'182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182',
'182,182,,,,,,,,,,,,,342,342,182,342,342,342,342,342,342,342,342,342',
'342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342',
'342,342,342,342,342,342,,,,,,,,,,,,,197,197,342,197,197,197,197,197',
'197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197',
'197,197,197,197,197,197,197,197,197,197,,,,,,,,,,,,,200,200,197,200',
'200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200',
'200,200,200,200,200,200,200,200,200,200,200,,,,,,,,,,,,,,,,202,202,200',
'202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,203,203',
',203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,,,,,,,',
',,,,,,202,,,,,,,,,,,,,,,,204,204,203,204,204,204,204,204,204,204,204',
'204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204',
'204,204,204,204,204,204,204,,,,,,,,,,,,,205,205,204,205,205,205,205',
'205,205,205,205,205,205,205,205,205,205,205,206,206,,206,206,206,206',
'206,206,206,206,206,206,206,206,206,206,206,,,,,,,,,,,,207,207,205,207',
'207,207,207,207,207,207,207,207,207,207,207,207,207,207,208,208,206',
'208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,,,,,,,,',
',,,210,210,207,210,210,210,210,210,210,210,210,210,210,210,210,210,210',
'210,211,211,208,211,211,211,211,211,211,211,211,211,211,211,211,211',
'211,211,,,,,,,,,,,,212,212,210,212,212,212,212,212,212,212,212,212,212',
'212,212,212,212,212,213,213,211,213,213,213,213,213,213,213,213,213',
'213,213,213,213,213,213,,,,,,,,,,,,,,212,,,,,,,,,,,,,,,,271,271,213',
'271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271',
'271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,,,,,,,,',
',,,,260,260,271,260,260,260,260,260,260,260,260,260,260,260,260,260',
'260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260',
'260,260,,,,,,,260,,,,,,272,272,260,272,272,272,272,272,272,272,272,272',
'272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272',
'272,272,272,272,272,272,,,,,,,,,,,,,231,231,272,231,231,231,231,231',
'231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231',
'231,231,231,231,231,,,,,,,,,,,,,,,,,,232,232,231,232,232,232,232,232',
'232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232',
'232,232,232,232,232,,,,,,,,,,,,,,,,,,233,233,232,233,233,233,233,233',
'233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233',
'233,233,233,233,233,233,233,233,233,233,,,,,,,,,,,,,234,234,233,234',
'234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234',
'234,234,234,234,234,234,234,234,234,234,234,234,234,234,,,,,,,,,,,,',
',234,234,392,392,,392,392,392,392,392,392,392,392,392,392,392,392,392',
'392,392,392,392,392,392,392,392,392,392,392,392,392,392,392,392,392',
'392,392,,,,,,,,,,,,,236,236,392,236,236,236,236,236,236,236,236,236',
'236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236',
'236,236,236,236,236,236,,,,,,,,,,,236,,,236,236,315,315,,315,315,315',
'315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315',
'315,315,315,315,315,315,315,315,315,315,315,315,,,,,,,,,,,,,162,162',
'315,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162',
'162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,,,,',
',,,,,,,,306,306,162,306,306,306,306,306,306,306,306,306,306,306,306',
'306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306',
'306,306,306,,,,,,,,,,,,,304,304,306,304,304,304,304,304,304,304,304',
'304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304',
'304,304,304,304,304,304,304,,,,,,,,,,,304,,300,300,304,300,300,300,300',
'300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300',
'300,300,300,300,300,300,300,300,300,300,300,,,,,,,,,,,,,136,136,300',
'136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136',
'136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,,,,,,,136',
',,,,,295,295,136,295,295,295,295,295,295,295,295,295,295,295,295,295',
'295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295',
'295,295,,,,,,,,,,,295,,,295,295,146,146,,146,146,146,146,146,146,146',
'146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146',
'146,146,146,146,146,146,146,146,,,,,,,,,,,,,209,209,146,209,209,209',
'209,209,209,209,209,209,209,209,209,209,209,209,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,209' ]
        racc_action_check = arr = ::Array.new(5625, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   672,   -18,   668,   nil,   nil,   nil,   nil,   492,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   655,   nil,   573,   611,   nil,   nil,  1717,   nil,   nil,    76,
   218,   304,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   268,
   nil,   459,   529,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  2707,   nil,   348,    -1,  1024,  3532,  1090,   nil,
  1123,  1156,  1189,  3565,   nil,   204,   nil,   393,   nil,   125,
   521,   343,   nil,   nil,   nil,  1420,   nil,  1453,  1486,  1519,
   nil,   nil,  1552,   -18,   352,   336,  3499,   273,   nil,   358,
   218,  1816,   283,   227,   nil,  3466,  1948,  1981,  2014,  2047,
  2080,  2113,  2146,  2179,  2212,  2245,  2278,  2311,  2344,  2377,
  2410,  2443,  2476,  2509,  2542,  2575,  2608,  2641,  2674,   912,
  2740,  2773,  2806,  2839,  2872,  2905,  2938,  2971,  3004,  3037,
  3070,   202,   879,   225,   206,    65,  5383,    99,  3334,   133,
   nil,   130,   nil,   nil,   455,    -8,  5480,   nil,   nil,   nil,
   nil,  3433,   -39,   nil,    69,   230,    43,    64,   nil,    14,
  3202,   304,  5195,    75,  1882,   341,    53,  1684,   358,   382,
   183,   125,  1618,   nil,  1585,  1387,  1354,  1321,   nil,   nil,
   nil,    62,  4213,   527,   137,  3661,  3931,   504,   511,   597,
   138,   608,    24,   535,   958,   nil,   631,  4307,   nil,   398,
  4354,   311,  4401,  4419,  4466,  4513,  4531,  4560,  4578,  5527,
  4607,  4625,  4654,  4672,   233,   718,   724,   888,   967,  3541,
  3594,  3648,   224,  3654,  3704,  3756,   444,   480,   565,   566,
   514,  4860,  4907,  4954,  5001,   802,  5098,   576,  1651,   nil,
   nil,   nil,   129,  1750,    95,   nil,  3136,   nil,  3169,   -33,
   nil,   647,   261,  1783,   -39,   -24,   nil,   nil,   184,   506,
  4766,    57,  1288,   991,  4166,   459,   534,   470,  4072,  4025,
  3978,  4719,  4813,    20,    61,   135,   399,  3103,    89,   nil,
   347,  3235,   264,   218,  3268,  3367,  1915,   nil,   136,   119,
   -26,    64,    46,   471,  3400,  5430,    85,   nil,  3301,   nil,
  5336,   195,   151,   nil,  5289,   nil,  5242,   nil,   nil,   nil,
   466,   nil,   179,   188,   nil,  5148,   465,    38,   nil,  1849,
   nil,   318,    27,   nil,   nil,   807,    48,   nil,   731,   nil,
   nil,  3769,  3715,  3607,   nil,   376,    49,   nil,   382,   nil,
   388,   nil,  4260,   nil,   nil,  4119,   nil,   nil,   nil,   nil,
   349,   179,   441,   451,   409,   421,   nil,   nil,   nil,   305,
   492,  1255,   nil,   527,   532,     5,   554,   nil,   539,   nil,
   565,   482,   nil,   571,    28,   574,  1057,   nil,  1222,   392,
  3823,   nil,   nil,   nil,   nil,   nil,   nil,   621,   567,   574,
   nil,   629,  5051,  3877,   -24,   479,   659,   626,   661,   305,
   -28,   nil,   642,   nil,   -15,   666,   nil ]

racc_action_default = [
    -1,  -224,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,
   -22,   -23,   -24,   -25,   -27,   -28,  -100,   -30,   -31,   -32,
   -33,   -34,   -35,   -36,   -37,   -39,   -40,   -41,   -44,   -45,
   -46,   -47,   -48,   -49,   -50,   -51,   -52,   -53,   -54,   -57,
   -58,   -59,   -63,   -66,   -69,  -224,  -101,  -100,  -101,   -99,
  -100,  -100,  -100,  -100,  -142,  -224,  -149,  -224,  -155,  -100,
  -100,  -100,  -171,  -172,  -173,  -185,  -186,  -100,  -100,  -100,
  -195,  -196,  -100,  -224,  -224,  -224,  -100,  -222,  -223,  -224,
    -5,  -100,  -224,  -224,  -159,  -100,  -100,  -100,  -100,  -100,
  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
  -100,   -76,  -100,   -26,  -224,   -24,  -224,  -224,  -101,   -74,
   -86,   -73,   -55,   -56,  -154,  -224,   -64,   -42,   -43,   -47,
   -48,   -63,  -224,   -70,  -224,  -224,  -152,  -156,  -160,  -100,
  -101,   -93,  -102,  -150,  -101,  -224,  -224,  -101,   -96,  -138,
  -139,  -140,  -100,  -141,  -100,  -100,  -100,  -100,  -153,  -157,
  -158,  -224,  -184,  -224,  -224,  -224,  -224,  -224,  -224,  -224,
  -204,  -210,  -224,  -220,  -101,   407,    -4,  -189,  -152,  -104,
  -105,  -106,  -107,  -108,  -109,  -110,  -111,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,
  -125,  -126,  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,
  -135,  -136,  -137,  -192,  -224,  -100,  -224,  -224,   -85,   -89,
   -88,   -38,   -29,  -101,  -224,   -87,  -100,   -61,  -100,  -224,
   -67,  -224,  -224,  -101,  -224,  -161,  -162,  -163,  -224,  -100,
  -102,  -224,  -100,  -101,  -102,  -224,  -224,  -224,  -224,  -143,
  -144,  -145,  -146,  -175,  -174,  -177,  -224,  -100,  -100,  -211,
  -224,  -100,  -224,  -224,  -100,  -100,  -100,  -201,  -224,  -224,
  -209,  -224,  -224,  -224,  -100,  -224,  -224,   -78,   -83,   -79,
   -84,   -75,   -77,   -91,  -224,   -62,   -65,   -68,   -71,   -72,
  -224,  -164,  -224,  -224,   -92,  -103,  -224,  -224,   -94,  -101,
   -95,  -224,  -178,  -176,  -187,  -224,  -209,  -190,  -224,  -194,
  -197,  -224,  -224,  -224,  -202,  -224,  -224,  -205,  -224,  -218,
  -224,  -221,  -193,   -80,   -81,   -82,   -60,   -90,  -165,  -166,
   -98,  -224,  -224,  -224,  -224,  -179,  -180,  -188,  -212,  -213,
  -224,  -100,  -191,  -224,  -224,  -224,  -224,  -207,  -224,  -206,
  -224,   -97,  -167,  -177,  -224,  -177,  -100,  -214,  -100,  -100,
  -224,  -198,  -199,  -200,  -203,  -208,  -219,  -224,  -224,  -181,
  -182,  -224,  -183,  -224,  -215,  -100,  -224,  -177,  -224,  -100,
  -216,  -168,  -224,  -169,  -217,  -224,  -170 ]

racc_goto_table = [
    90,     2,   144,   148,   356,   135,    20,   147,    92,   149,
   358,    94,   153,     1,   338,   276,   280,   139,   141,   173,
   152,   189,   309,   193,   353,   163,   133,   288,   196,   155,
   157,   359,   136,   nil,   nil,   nil,   165,   nil,   188,   nil,
   nil,   237,   165,   377,   nil,   nil,   nil,   321,   nil,   145,
   nil,   nil,   nil,   144,   nil,   nil,   390,   166,   146,   190,
   161,   368,   168,   nil,   nil,   165,   169,   170,   171,    92,
    92,   181,   179,   180,   257,   nil,   259,   nil,   nil,   nil,
   nil,   182,   nil,   183,   184,   185,   nil,   nil,   186,   nil,
   nil,    93,   nil,   nil,   nil,   nil,    20,   197,   nil,   nil,
   nil,   199,   200,   201,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   230,   231,   232,   233,   234,   150,   236,   135,
   266,   157,   244,   135,   296,   387,   135,   391,   249,   nil,
   nil,   135,    93,    93,   nil,   275,   274,   146,   nil,    92,
   282,   283,   258,   nil,   261,   nil,   260,   291,   nil,   402,
   264,   267,   257,   260,   nil,   312,   nil,   nil,   268,   nil,
   269,   270,   271,   272,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   257,   290,   nil,   nil,   nil,   nil,    20,   293,   nil,
   148,   148,   302,   nil,   147,   147,   149,   149,   nil,   308,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   295,    93,   nil,   300,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   304,   nil,   306,   nil,   nil,   310,   nil,    92,
   nil,   nil,   313,   nil,   337,   nil,   nil,   316,   315,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   302,   nil,   326,
   nil,   nil,   nil,   325,    20,   nil,   nil,   328,    90,   nil,
   331,   332,   333,   nil,   nil,   nil,   352,   nil,   nil,   nil,
   342,   nil,   nil,   nil,   345,   nil,   363,   364,   365,   nil,
   366,   367,   nil,   369,   nil,   370,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   351,    90,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   150,   150,   nil,   nil,   nil,   nil,
   nil,   nil,    93,   385,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   396,   nil,   nil,   nil,   398,   380,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   405,   nil,   nil,
   394,   nil,   392,   nil,   393,    20,   nil,   nil,   nil,   nil,
   nil,   nil,    90,   nil,   nil,   nil,   400,   nil,    90,   nil,
   404,    20,    90,   nil,   nil,    20 ]

racc_goto_check = [
     4,     2,    48,    23,    62,    22,    20,    32,    50,    39,
    65,    55,    46,     1,    38,    63,    63,    47,    47,    53,
    45,    42,    35,    33,    61,    29,    24,    64,     3,    51,
    56,    66,    20,   nil,   nil,   nil,    22,   nil,    39,   nil,
   nil,    49,    22,    65,   nil,   nil,   nil,    59,   nil,    43,
   nil,   nil,   nil,    48,   nil,   nil,    62,    50,    20,    60,
    52,    38,    52,   nil,   nil,    22,    20,    20,    20,    50,
    50,    50,    55,    55,    57,   nil,    57,   nil,   nil,   nil,
   nil,    20,   nil,    20,    20,    20,   nil,   nil,    20,   nil,
   nil,    40,   nil,   nil,   nil,   nil,    20,    20,   nil,   nil,
   nil,    20,    20,    20,    20,    20,    20,    20,    20,    20,
    20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
    20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
    20,    20,    20,    20,    20,    20,    20,    40,    20,    22,
    51,    56,    52,    22,    49,    59,    22,    59,    43,   nil,
   nil,    22,    40,    40,   nil,    51,    56,    20,   nil,    50,
    60,    60,    55,   nil,    52,   nil,    20,    60,   nil,    59,
    20,    52,    57,    20,   nil,    57,   nil,   nil,    20,   nil,
    20,    20,    20,    20,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    57,     2,   nil,   nil,   nil,   nil,    20,    52,   nil,
    23,    23,    48,   nil,    32,    32,    39,    39,   nil,    46,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    20,    40,   nil,    20,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    20,   nil,    20,   nil,   nil,    52,   nil,    50,
   nil,   nil,    55,   nil,    60,   nil,   nil,    52,    20,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,   nil,     2,
   nil,   nil,   nil,    20,    20,   nil,   nil,    20,     4,   nil,
    20,    20,    20,   nil,   nil,   nil,    60,   nil,   nil,   nil,
    20,   nil,   nil,   nil,    20,   nil,    60,    60,    60,   nil,
    60,    60,   nil,    60,   nil,    60,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    52,     4,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    40,    40,   nil,   nil,   nil,   nil,
   nil,   nil,    40,    60,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    60,   nil,   nil,   nil,    60,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    60,   nil,   nil,
     2,   nil,    20,   nil,    20,    20,   nil,   nil,   nil,   nil,
   nil,   nil,     4,   nil,   nil,   nil,     2,   nil,     4,   nil,
     2,    20,     4,   nil,   nil,    20 ]

racc_goto_pointer = [
   nil,    13,     1,   -62,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     6,   nil,   -21,   -51,     3,   nil,   nil,   nil,   nil,   -32,
   nil,   nil,   -47,   -63,   nil,  -230,   nil,   nil,  -275,   -45,
    83,   nil,   -62,    -3,   nil,   -34,   -42,   -13,   -40,   -91,
     0,   -26,     4,   -44,   nil,     3,   -25,   -83,   nil,  -228,
   -25,  -298,  -318,  -168,  -163,  -316,  -295 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
   162,    21,    22,    23,   nil,    24,    25,    27,    28,    29,
    30,    31,    32,    33,    34,   154,    38,    39,    40,    41,
    42,    51,    66,   nil,    53,   nil,   nil,   301,   131,   nil,
    55,   nil,   265,    64,    65,    68,   255,   158,    71,   nil,
   279,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 99, :_reduce_1,
  1, 99, :_reduce_2,
  1, 100, :_reduce_3,
  3, 100, :_reduce_4,
  2, 100, :_reduce_5,
  1, 100, :_reduce_6,
  1, 101, :_reduce_7,
  1, 101, :_reduce_8,
  1, 101, :_reduce_9,
  1, 101, :_reduce_10,
  1, 101, :_reduce_11,
  1, 101, :_reduce_12,
  1, 101, :_reduce_13,
  1, 101, :_reduce_14,
  1, 101, :_reduce_15,
  1, 101, :_reduce_16,
  1, 101, :_reduce_17,
  1, 101, :_reduce_18,
  1, 101, :_reduce_19,
  1, 101, :_reduce_20,
  1, 101, :_reduce_21,
  1, 101, :_reduce_22,
  1, 101, :_reduce_23,
  1, 118, :_reduce_24,
  1, 118, :_reduce_25,
  2, 118, :_reduce_26,
  1, 118, :_reduce_27,
  1, 118, :_reduce_28,
  3, 118, :_reduce_29,
  1, 120, :_reduce_30,
  1, 120, :_reduce_31,
  1, 120, :_reduce_32,
  1, 120, :_reduce_33,
  1, 120, :_reduce_34,
  1, 120, :_reduce_35,
  1, 120, :_reduce_36,
  1, 120, :_reduce_37,
  3, 120, :_reduce_38,
  1, 102, :_reduce_39,
  1, 102, :_reduce_40,
  1, 102, :_reduce_41,
  1, 133, :_reduce_42,
  1, 133, :_reduce_43,
  1, 130, :_reduce_44,
  1, 130, :_reduce_45,
  1, 130, :_reduce_46,
  1, 130, :_reduce_47,
  1, 130, :_reduce_48,
  1, 130, :_reduce_49,
  1, 130, :_reduce_50,
  1, 130, :_reduce_51,
  1, 134, :_reduce_52,
  1, 135, :_reduce_53,
  1, 135, :_reduce_54,
  2, 135, :_reduce_55,
  2, 135, :_reduce_56,
  1, 136, :_reduce_57,
  1, 138, :_reduce_58,
  1, 137, :_reduce_59,
  5, 140, :_reduce_60,
  3, 139, :_reduce_61,
  4, 139, :_reduce_62,
  0, 141, :_reduce_63,
  1, 141, :_reduce_64,
  3, 141, :_reduce_65,
  1, 121, :_reduce_66,
  3, 142, :_reduce_67,
  4, 142, :_reduce_68,
  0, 143, :_reduce_69,
  1, 143, :_reduce_70,
  3, 143, :_reduce_71,
  3, 144, :_reduce_72,
  2, 127, :_reduce_73,
  2, 127, :_reduce_74,
  4, 127, :_reduce_75,
  2, 128, :_reduce_76,
  4, 128, :_reduce_77,
  3, 146, :_reduce_78,
  3, 146, :_reduce_79,
  4, 146, :_reduce_80,
  4, 146, :_reduce_81,
  3, 147, :_reduce_82,
  2, 147, :_reduce_83,
  2, 147, :_reduce_84,
  1, 147, :_reduce_85,
  1, 145, :_reduce_86,
  2, 145, :_reduce_87,
  2, 122, :_reduce_88,
  2, 122, :_reduce_89,
  5, 131, :_reduce_90,
  4, 131, :_reduce_91,
  4, 131, :_reduce_92,
  2, 131, :_reduce_93,
  4, 131, :_reduce_94,
  4, 119, :_reduce_95,
  2, 119, :_reduce_96,
  6, 103, :_reduce_97,
  5, 103, :_reduce_98,
  1, 148, :_reduce_99,
  0, 148, :_reduce_100,
  0, 150, :_reduce_101,
  1, 150, :_reduce_102,
  3, 150, :_reduce_103,
  3, 123, :_reduce_104,
  3, 123, :_reduce_105,
  3, 123, :_reduce_106,
  3, 123, :_reduce_107,
  3, 123, :_reduce_108,
  3, 123, :_reduce_109,
  3, 123, :_reduce_110,
  3, 123, :_reduce_111,
  3, 123, :_reduce_112,
  3, 123, :_reduce_113,
  3, 123, :_reduce_114,
  3, 123, :_reduce_115,
  3, 123, :_reduce_116,
  3, 123, :_reduce_117,
  3, 123, :_reduce_118,
  3, 123, :_reduce_119,
  3, 123, :_reduce_120,
  3, 123, :_reduce_121,
  3, 123, :_reduce_122,
  3, 123, :_reduce_123,
  3, 123, :_reduce_124,
  3, 123, :_reduce_125,
  3, 123, :_reduce_126,
  3, 123, :_reduce_127,
  3, 123, :_reduce_128,
  3, 123, :_reduce_129,
  3, 123, :_reduce_130,
  3, 123, :_reduce_131,
  3, 123, :_reduce_132,
  3, 123, :_reduce_133,
  3, 123, :_reduce_134,
  3, 123, :_reduce_135,
  3, 123, :_reduce_136,
  3, 123, :_reduce_137,
  2, 125, :_reduce_138,
  2, 125, :_reduce_139,
  2, 125, :_reduce_140,
  2, 126, :_reduce_141,
  1, 126, :_reduce_142,
  3, 151, :_reduce_143,
  3, 151, :_reduce_144,
  3, 151, :_reduce_145,
  3, 151, :_reduce_146,
  1, 152, :_reduce_147,
  1, 152, :_reduce_148,
  1, 152, :_reduce_149,
  1, 152, :_reduce_150,
  1, 152, :_reduce_151,
  2, 153, :_reduce_152,
  2, 153, :_reduce_153,
  2, 153, :_reduce_154,
  1, 129, :_reduce_155,
  2, 129, :_reduce_156,
  2, 106, :_reduce_157,
  2, 106, :_reduce_158,
  2, 106, :_reduce_159,
  1, 154, :_reduce_160,
  2, 154, :_reduce_161,
  2, 154, :_reduce_162,
  2, 154, :_reduce_163,
  3, 155, :_reduce_164,
  4, 155, :_reduce_165,
  4, 155, :_reduce_166,
  6, 104, :_reduce_167,
  9, 104, :_reduce_168,
  9, 104, :_reduce_169,
  11, 104, :_reduce_170,
  1, 156, :_reduce_171,
  1, 156, :_reduce_172,
  1, 156, :_reduce_173,
  1, 149, :_reduce_174,
  1, 149, :_reduce_175,
  1, 157, :_reduce_176,
  0, 157, :_reduce_177,
  0, 159, :_reduce_178,
  1, 159, :_reduce_179,
  1, 159, :_reduce_180,
  3, 159, :_reduce_181,
  3, 159, :_reduce_182,
  3, 160, :_reduce_183,
  2, 105, :_reduce_184,
  1, 105, :_reduce_185,
  1, 117, :_reduce_186,
  4, 108, :_reduce_187,
  5, 108, :_reduce_188,
  3, 108, :_reduce_189,
  4, 109, :_reduce_190,
  5, 109, :_reduce_191,
  3, 109, :_reduce_192,
  5, 124, :_reduce_193,
  4, 111, :_reduce_194,
  1, 116, :_reduce_195,
  1, 116, :_reduce_196,
  4, 112, :_reduce_197,
  6, 110, :_reduce_198,
  6, 110, :_reduce_199,
  6, 110, :_reduce_200,
  3, 113, :_reduce_201,
  4, 113, :_reduce_202,
  6, 113, :_reduce_203,
  0, 162, :_reduce_204,
  2, 162, :_reduce_205,
  3, 162, :_reduce_206,
  3, 162, :_reduce_207,
  4, 162, :_reduce_208,
  2, 158, :_reduce_209,
  1, 158, :_reduce_210,
  1, 161, :_reduce_211,
  3, 161, :_reduce_212,
  3, 161, :_reduce_213,
  4, 161, :_reduce_214,
  3, 163, :_reduce_215,
  4, 164, :_reduce_216,
  5, 164, :_reduce_217,
  4, 114, :_reduce_218,
  6, 114, :_reduce_219,
  2, 132, :_reduce_220,
  4, 115, :_reduce_221,
  1, 115, :_reduce_222,
  1, 107, :_reduce_223 ]

racc_reduce_n = 224

racc_shift_n = 407

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :ELSEIF => 4,
  :THEN => 5,
  :UNLESS => 6,
  :END => 7,
  :WHILE => 8,
  :UNTIL => 9,
  :BREAK => 10,
  :CONTINUE => 11,
  :TRY => 12,
  :CATCH => 13,
  :FINALLY => 14,
  :FOR => 15,
  :IN => 16,
  :DEF => 17,
  :DEF_BANG => 18,
  :SPLAT => 19,
  :CALL => 20,
  :BUILTIN_COMMAND => 21,
  :CLASS => 22,
  :NEW => 23,
  :DEFM => 24,
  :DEFM_BANG => 25,
  :SUPER => 26,
  :RIML_COMMAND => 27,
  :RETURN => 28,
  :NEWLINE => 29,
  :NUMBER => 30,
  :STRING_D => 31,
  :STRING_S => 32,
  :EX_LITERAL => 33,
  :REGEXP => 34,
  :TRUE => 35,
  :FALSE => 36,
  :NIL => 37,
  :LET => 38,
  :UNLET => 39,
  :UNLET_BANG => 40,
  :IDENTIFIER => 41,
  :DICT_VAL => 42,
  :SCOPE_MODIFIER => 43,
  :SCOPE_MODIFIER_LITERAL => 44,
  :SPECIAL_VAR_PREFIX => 45,
  :FINISH => 46,
  "!" => 47,
  "*" => 48,
  "/" => 49,
  "%" => 50,
  "+" => 51,
  "-" => 52,
  "." => 53,
  ">" => 54,
  ">#" => 55,
  ">?" => 56,
  "<" => 57,
  "<#" => 58,
  "<?" => 59,
  ">=" => 60,
  ">=#" => 61,
  ">=?" => 62,
  "<=" => 63,
  "<=#" => 64,
  "<=?" => 65,
  "==" => 66,
  "==?" => 67,
  "==#" => 68,
  "=~" => 69,
  "=~?" => 70,
  "=~#" => 71,
  "!~" => 72,
  "!~?" => 73,
  "!~#" => 74,
  "!=" => 75,
  "!=?" => 76,
  "!=#" => 77,
  :IS => 78,
  :ISNOT => 79,
  "&&" => 80,
  "||" => 81,
  "?" => 82,
  "=" => 83,
  "+=" => 84,
  "-=" => 85,
  ".=" => 86,
  "," => 87,
  "(" => 88,
  ")" => 89,
  ";" => 90,
  "|" => 91,
  "[" => 92,
  "]" => 93,
  "{" => 94,
  "}" => 95,
  ":" => 96,
  "===" => 97 }

racc_nt_base = 98

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "ELSEIF",
  "THEN",
  "UNLESS",
  "END",
  "WHILE",
  "UNTIL",
  "BREAK",
  "CONTINUE",
  "TRY",
  "CATCH",
  "FINALLY",
  "FOR",
  "IN",
  "DEF",
  "DEF_BANG",
  "SPLAT",
  "CALL",
  "BUILTIN_COMMAND",
  "CLASS",
  "NEW",
  "DEFM",
  "DEFM_BANG",
  "SUPER",
  "RIML_COMMAND",
  "RETURN",
  "NEWLINE",
  "NUMBER",
  "STRING_D",
  "STRING_S",
  "EX_LITERAL",
  "REGEXP",
  "TRUE",
  "FALSE",
  "NIL",
  "LET",
  "UNLET",
  "UNLET_BANG",
  "IDENTIFIER",
  "DICT_VAL",
  "SCOPE_MODIFIER",
  "SCOPE_MODIFIER_LITERAL",
  "SPECIAL_VAR_PREFIX",
  "FINISH",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\".\"",
  "\">\"",
  "\">#\"",
  "\">?\"",
  "\"<\"",
  "\"<#\"",
  "\"<?\"",
  "\">=\"",
  "\">=#\"",
  "\">=?\"",
  "\"<=\"",
  "\"<=#\"",
  "\"<=?\"",
  "\"==\"",
  "\"==?\"",
  "\"==#\"",
  "\"=~\"",
  "\"=~?\"",
  "\"=~#\"",
  "\"!~\"",
  "\"!~?\"",
  "\"!~#\"",
  "\"!=\"",
  "\"!=?\"",
  "\"!=#\"",
  "IS",
  "ISNOT",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\"=\"",
  "\"+=\"",
  "\"-=\"",
  "\".=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"|\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\":\"",
  "\"===\"",
  "$start",
  "Root",
  "Expressions",
  "AnyExpression",
  "Terminator",
  "ExplicitCall",
  "Def",
  "Return",
  "UnletVariable",
  "ExLiteral",
  "If",
  "Unless",
  "For",
  "While",
  "Until",
  "Try",
  "ClassDefinition",
  "Super",
  "LoopKeyword",
  "EndScript",
  "ValueExpression",
  "RimlCommand",
  "ValueExpressionWithoutDictLiteral",
  "Dictionary",
  "DictGetWithDotLiteral",
  "BinaryOperator",
  "Ternary",
  "UnaryOperator",
  "Assign",
  "DictGet",
  "ListOrDictGet",
  "AllVariableRetrieval",
  "LiteralWithoutDictLiteral",
  "Call",
  "ObjectInstantiation",
  "Literal",
  "Number",
  "String",
  "Regexp",
  "List",
  "ScopeModifierLiteral",
  "ListLiteral",
  "ListUnpack",
  "ListItems",
  "DictionaryLiteral",
  "DictItems",
  "DictItem",
  "DictGetWithDot",
  "ListOrDictGetWithBrackets",
  "SubList",
  "Scope",
  "DefCallIdentifier",
  "ArgList",
  "AssignExpression",
  "AssignLHS",
  "VariableRetrieval",
  "CurlyBraceName",
  "CurlyBraceVarPart",
  "FunctionType",
  "DefKeyword",
  "Block",
  "ParamList",
  "DefaultParam",
  "IfBlock",
  "Catch",
  "ElseBlock",
  "ElseifBlock" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_3(val, _values, result)
     result = Nodes.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_21(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_26(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_27(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_28(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_29(val, _values, result)
     result = WrapInParensNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_32(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_33(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 87)
  def _reduce_34(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_35(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_37(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_38(val, _values, result)
     result = WrapInParensNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_39(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_40(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_41(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_42(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_45(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_47(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_48(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_49(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_50(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_51(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_52(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 122)
  def _reduce_53(val, _values, result)
     result = StringNode.new(val[0], :s) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_54(val, _values, result)
     result = StringNode.new(val[0], :d) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_55(val, _values, result)
     result = StringLiteralConcatNode.new(val[0], StringNode.new(val[1], :s)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 125)
  def _reduce_56(val, _values, result)
     result = StringLiteralConcatNode.new(val[0], StringNode.new(val[1], :d)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_57(val, _values, result)
     result = RegexpNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_58(val, _values, result)
     result = ScopeModifierLiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_59(val, _values, result)
     result = ListNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_60(val, _values, result)
     result = ListUnpackNode.new(val[1] << val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_61(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 146)
  def _reduce_62(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_63(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_64(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_65(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_66(val, _values, result)
     result = DictionaryNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 161)
  def _reduce_67(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_68(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_69(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_70(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_71(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_72(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_73(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_74(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_75(val, _values, result)
     result = DictGetDotNode.new(WrapInParensNode.new(val[1]), val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_76(val, _values, result)
     result = ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_77(val, _values, result)
     result = ListOrDictGetNode.new(WrapInParensNode.new(val[1]), val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 189)
  def _reduce_78(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 190)
  def _reduce_79(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_80(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 192)
  def _reduce_81(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 196)
  def _reduce_82(val, _values, result)
     result = SublistNode.new([val[0], LiteralNode.new(' : '), val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 197)
  def _reduce_83(val, _values, result)
     result = SublistNode.new([val[0], LiteralNode.new(' :')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 198)
  def _reduce_84(val, _values, result)
     result = SublistNode.new([LiteralNode.new(': '), val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 199)
  def _reduce_85(val, _values, result)
     result = SublistNode.new([LiteralNode.new(':')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 203)
  def _reduce_86(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 204)
  def _reduce_87(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_88(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 209)
  def _reduce_89(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_90(val, _values, result)
     result = CallNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 214)
  def _reduce_91(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 215)
  def _reduce_92(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 216)
  def _reduce_93(val, _values, result)
     result = CallNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 217)
  def _reduce_94(val, _values, result)
     result = ExplicitCallNode.new(nil, nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 221)
  def _reduce_95(val, _values, result)
     result = RimlCommandNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 222)
  def _reduce_96(val, _values, result)
     result = RimlCommandNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_97(val, _values, result)
     result = ExplicitCallNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 227)
  def _reduce_98(val, _values, result)
     result = ExplicitCallNode.new(nil, val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 231)
  def _reduce_99(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 232)
  def _reduce_100(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_101(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_102(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 238)
  def _reduce_103(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 242)
  def _reduce_104(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 243)
  def _reduce_105(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_106(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_107(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 247)
  def _reduce_108(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 250)
  def _reduce_109(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_110(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 253)
  def _reduce_111(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 254)
  def _reduce_112(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 256)
  def _reduce_113(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_114(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 258)
  def _reduce_115(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 260)
  def _reduce_116(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 261)
  def _reduce_117(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_118(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 264)
  def _reduce_119(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 265)
  def _reduce_120(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 266)
  def _reduce_121(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 268)
  def _reduce_122(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 269)
  def _reduce_123(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 270)
  def _reduce_124(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 272)
  def _reduce_125(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 273)
  def _reduce_126(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_127(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 276)
  def _reduce_128(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 277)
  def _reduce_129(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 278)
  def _reduce_130(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_131(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_132(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 282)
  def _reduce_133(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 283)
  def _reduce_134(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 284)
  def _reduce_135(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 286)
  def _reduce_136(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 287)
  def _reduce_137(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 291)
  def _reduce_138(val, _values, result)
     result = UnaryOperatorNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_139(val, _values, result)
     result = UnaryOperatorNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_140(val, _values, result)
     result = UnaryOperatorNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 298)
  def _reduce_141(val, _values, result)
     result = AssignNode.new(val[1][0], val[1][1], val[1][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 299)
  def _reduce_142(val, _values, result)
     result = AssignNode.new(val[0][0], val[0][1], val[0][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 304)
  def _reduce_143(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 305)
  def _reduce_144(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_145(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 307)
  def _reduce_146(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 311)
  def _reduce_147(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 312)
  def _reduce_148(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 313)
  def _reduce_149(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 314)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 315)
  def _reduce_151(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 320)
  def _reduce_152(val, _values, result)
     result = GetVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 321)
  def _reduce_153(val, _values, result)
     result = GetSpecialVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 322)
  def _reduce_154(val, _values, result)
     result = GetVariableByScopeAndDictNameNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 326)
  def _reduce_155(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 327)
  def _reduce_156(val, _values, result)
     result = GetCurlyBraceNameNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 331)
  def _reduce_157(val, _values, result)
     result = UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 332)
  def _reduce_158(val, _values, result)
     result = UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 333)
  def _reduce_159(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 337)
  def _reduce_160(val, _values, result)
     result = CurlyBraceVariable.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 338)
  def _reduce_161(val, _values, result)
     result = CurlyBraceVariable.new([ CurlyBracePart.new(val[0]), val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 339)
  def _reduce_162(val, _values, result)
     result = val[0] << CurlyBracePart.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 340)
  def _reduce_163(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 344)
  def _reduce_164(val, _values, result)
     result = CurlyBracePart.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 345)
  def _reduce_165(val, _values, result)
     result = CurlyBracePart.new([val[1], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 346)
  def _reduce_166(val, _values, result)
     result = CurlyBracePart.new([val[1], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 352)
  def _reduce_167(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], [], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 353)
  def _reduce_168(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], val[4], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 354)
  def _reduce_169(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], [val[4]], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 355)
  def _reduce_170(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], val[4] << val[6], val[8], val[9]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 359)
  def _reduce_171(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 360)
  def _reduce_172(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 361)
  def _reduce_173(val, _values, result)
     result = "DefMethodNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 366)
  def _reduce_174(val, _values, result)
     result = GetCurlyBraceNameNode.new('', val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 367)
  def _reduce_175(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 372)
  def _reduce_176(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 373)
  def _reduce_177(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 377)
  def _reduce_178(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_179(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 379)
  def _reduce_180(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 380)
  def _reduce_181(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 381)
  def _reduce_182(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 385)
  def _reduce_183(val, _values, result)
     result = DefaultParamNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 389)
  def _reduce_184(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 390)
  def _reduce_185(val, _values, result)
     result = ReturnNode.new(nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 394)
  def _reduce_186(val, _values, result)
     result = FinishNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 399)
  def _reduce_187(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 400)
  def _reduce_188(val, _values, result)
     result = IfNode.new(val[1], Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 401)
  def _reduce_189(val, _values, result)
     result = IfNode.new(val[2], Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 405)
  def _reduce_190(val, _values, result)
     result = UnlessNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 406)
  def _reduce_191(val, _values, result)
     result = UnlessNode.new(val[1], Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 407)
  def _reduce_192(val, _values, result)
     result = UnlessNode.new(val[2], Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 411)
  def _reduce_193(val, _values, result)
     result = TernaryOperatorNode.new([val[0], val[2], val[4]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 415)
  def _reduce_194(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 419)
  def _reduce_195(val, _values, result)
     result = BreakNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 420)
  def _reduce_196(val, _values, result)
     result = ContinueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 424)
  def _reduce_197(val, _values, result)
     result = UntilNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 428)
  def _reduce_198(val, _values, result)
     result = ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 429)
  def _reduce_199(val, _values, result)
     result = ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 430)
  def _reduce_200(val, _values, result)
     result = ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 434)
  def _reduce_201(val, _values, result)
     result = TryNode.new(val[1], nil, nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 435)
  def _reduce_202(val, _values, result)
     result = TryNode.new(val[1], val[2], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 436)
  def _reduce_203(val, _values, result)
     result = TryNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 440)
  def _reduce_204(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 441)
  def _reduce_205(val, _values, result)
     result = [ CatchNode.new(nil, val[1]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 442)
  def _reduce_206(val, _values, result)
     result = [ CatchNode.new(val[1], val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 443)
  def _reduce_207(val, _values, result)
     result = val[0] << CatchNode.new(nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 444)
  def _reduce_208(val, _values, result)
     result = val[0] << CatchNode.new(val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 451)
  def _reduce_209(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 452)
  def _reduce_210(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 456)
  def _reduce_211(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 457)
  def _reduce_212(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 458)
  def _reduce_213(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 459)
  def _reduce_214(val, _values, result)
     result = val[1] << val[2] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 463)
  def _reduce_215(val, _values, result)
     result = ElseNode.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 467)
  def _reduce_216(val, _values, result)
     result = Nodes.new([ElseifNode.new(val[1], val[3])]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 468)
  def _reduce_217(val, _values, result)
     result = val[0] << ElseifNode.new(val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 472)
  def _reduce_218(val, _values, result)
     result = ClassDefinitionNode.new(val[1], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 473)
  def _reduce_219(val, _values, result)
     result = ClassDefinitionNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 477)
  def _reduce_220(val, _values, result)
     result = ObjectInstantiationNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 481)
  def _reduce_221(val, _values, result)
     result = SuperNode.new(val[2], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 482)
  def _reduce_222(val, _values, result)
     result = SuperNode.new([], false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 486)
  def _reduce_223(val, _values, result)
     result = ExLiteralNode.new(val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
