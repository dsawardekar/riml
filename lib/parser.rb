#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require File.expand_path("../ast_rewriter", __FILE__)
  require File.expand_path("../errors", __FILE__)
module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 475)
  # This code will be put as-is in the parser class

  attr_accessor :ast_rewriter

  # parses tokens or code into output nodes
  def parse(object, ast_rewriter = AST_Rewriter.new)
    if tokens?(object)
      @tokens = object
    elsif code?(object)
      @lexer = Riml::Lexer.new(object)
    end

    begin
      ast = do_parse
    rescue Racc::ParseError => e
      raise unless @lexer
      raise Riml::ParseError,  "line #{@lexer.lineno}: #{e.message}"
    end

    @ast_rewriter ||= ast_rewriter
    return ast unless @ast_rewriter
    @ast_rewriter.ast = ast
    @ast_rewriter.rewrite
  end

  # get the next token from either the list of tokens provided, or
  # the lexer getting the next token
  def next_token
    return @tokens.shift unless @lexer
    @lexer.next_token
  end

  private
  def tokens?(object)
    Array === object
  end

  def code?(object)
    String === object
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'-207,33,-207,-207,-207,-207,-207,-207,261,179,307,33,148,-207,-207,33',
'45,47,46,337,48,42,43,44,33,241,148,182,367,-207,49,246,58,240,66,244',
'182,58,235,66,-90,338,-89,-90,-90,-89,-89,-90,128,-89,368,331,129,-90',
'-90,-89,-89,306,151,296,143,151,34,35,279,151,58,332,66,-90,93,-89,34',
'35,33,99,34,35,143,151,53,292,-166,151,151,34,35,-207,151,-207,-207',
'-207,246,-207,123,124,-207,121,122,125,109,110,111,115,116,117,112,113',
'114,118,119,120,96,98,97,103,105,104,106,108,107,100,102,101,126,127',
'95,94,130,93,-90,-90,-89,-89,99,34,35,233,93,-165,76,244,246,99,77,151',
'78,81,79,80,83,244,58,82,66,71,72,133,56,55,84,85,73,242,86,57,74,33',
'45,47,46,87,48,42,43,44,62,68,69,133,231,58,49,66,75,59,342,343,182',
'60,61,274,182,48,151,151,317,276,-139,-139,-139,-139,319,318,151,238',
'252,238,288,182,236,237,33,237,48,-141,-141,-141,-141,93,-143,-143,-143',
'-143,99,326,32,76,34,35,51,77,53,78,81,79,80,83,231,252,82,330,71,72',
'189,56,55,84,85,73,188,86,57,74,33,45,47,46,87,48,42,43,44,62,68,69',
'-92,186,58,49,66,75,59,34,35,185,60,61,165,166,167,168,123,124,182,121',
'122,125,-140,-140,-140,-140,-92,253,58,355,66,354,45,47,46,243,48,42',
'43,44,-140,-140,-140,-140,182,131,49,32,76,34,35,51,77,53,78,81,79,80',
'83,182,93,82,183,71,72,99,56,55,84,85,73,182,86,57,74,33,45,47,46,87',
'48,42,43,44,62,68,69,342,358,58,49,66,75,59,143,58,53,60,61,252,252',
'352,299,123,124,323,121,122,125,252,252,304,302,252,252,333,324,353',
'322,45,47,46,356,48,42,43,44,252,359,252,361,362,363,49,32,76,34,35',
'51,77,53,78,81,79,80,83,234,93,82,365,71,72,99,56,55,84,85,73,314,86',
'57,74,33,45,47,46,87,48,42,43,44,62,68,69,-92,307,58,49,66,75,59,143',
'313,53,60,61,307,169,311,138,123,124,182,121,122,125,109,110,111,115',
'116,117,112,113,114,118,119,120,374,182,272,273,308,378,307,380,285',
'303,182,88,383,32,76,34,35,51,77,53,78,81,79,80,83,,93,82,,71,72,99',
'56,55,84,85,73,,86,57,74,33,45,47,46,87,48,42,43,44,62,68,69,,,58,49',
'66,75,59,,,,60,61,,,,,,,,,123,124,,121,122,125,109,110,111,115,116,117',
'112,113,114,118,119,120,,,,,,,,,,32,,34,35,51,76,53,,,77,-197,78,81',
'79,80,83,,93,82,,71,72,99,56,55,84,85,73,,86,57,74,33,45,47,46,87,48',
'42,43,44,62,68,69,,,58,49,66,75,59,,123,124,60,61,269,,,,,,,,,,,,,,',
',,,,,,,,,266,,,,,,,,,,,32,,34,35,51,93,53,,123,124,99,121,122,125,109',
'110,111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104,106',
'108,107,100,102,101,126,127,95,94,130,,,,,,,,,,93,,76,,,99,77,,78,81',
'79,80,83,123,124,82,,71,72,,56,55,84,85,73,,86,57,74,,45,47,46,87,48',
'42,43,44,62,68,69,-92,,58,49,66,75,59,,123,124,60,61,265,,,,93,,,,,99',
',,,,,,,,,,,,,,266,,,,,,,,,,,32,123,124,,51,93,53,,123,124,99,121,122',
'125,109,110,111,115,116,117,112,113,114,118,119,120,96,98,97,103,105',
'104,106,108,107,100,102,101,126,127,95,94,130,344,,93,,,,,99,,93,,,',
',99,,,,,,,,,,,,,,,,,,,123,124,,121,122,125,123,124,123,124,,121,122',
'125,109,110,111,115,116,117,112,113,114,118,119,120,96,98,97,103,105',
'104,106,108,107,100,102,101,126,127,95,94,130,339,93,,,,,99,93,,93,',
',99,,99,,,,,,,,,,,,,,,,,,123,124,,121,122,125,,,,123,124,,121,122,125',
'109,110,111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104',
'106,108,107,100,102,101,126,127,95,94,130,93,136,55,,85,99,,,,93,,45',
'47,46,99,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,,85,123,124',
',121,122,125,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,,,32',
',,,51,,53,,192,,,136,55,93,85,,,,99,,,45,47,46,,48,42,43,44,62,,,,32',
'58,49,66,51,59,53,,192,60,61,136,55,,85,,,,,,,45,47,46,,48,42,43,44',
'62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42',
'43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,',
'48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47',
'46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,',
'45,47,46,,48,42,43,44,62,,,-92,,58,49,66,,59,,,,60,61,136,55,32,85,',
',51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,159',
'85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136',
'55,32,85,,,51,,53,33,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60',
'61,136,55,156,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59',
',,,60,61,136,55,32,85,34,35,51,,53,,45,47,46,,48,42,43,44,62,,,,,58',
'49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,',
',,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44',
'62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42',
'43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,',
'48,42,43,44,62,,,-92,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45',
'47,46,,48,42,43,44,62,,,-92,,58,49,66,,59,,,,60,61,136,55,32,85,,,51',
',53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85',
',,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55',
'32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136',
'55,32,85,,,51,290,53,,45,47,46,,48,42,43,44,62,,,-92,,58,49,66,,59,',
',,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,-92,,58,49',
'66,,59,,,,60,61,136,55,152,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,-92',
',58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44',
'62,,,-92,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48',
'42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46',
',48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45',
'47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53',
',45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51',
',53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85',
',,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55',
'32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136',
'55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61',
'136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,',
'60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,',
'59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49',
'66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,',
'58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62',
',,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43',
'44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48',
'42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46',
',48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45',
'47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53',
',45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51',
',53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85',
',,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55',
'32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136',
'55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61',
'136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,',
'60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,',
'59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49',
'66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,',
'58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62',
',,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43',
'44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48',
'42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46',
',48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45',
'47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53',
',45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51',
',53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85',
',,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55',
'32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136',
'55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61',
'136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,',
'60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,-92,,58,49,66',
',59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,-92,',
'58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62',
',,-92,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42',
'43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,',
'48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47',
'46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,',
'45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85,,,51',
',53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55,32,85',
',,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,136,55',
'32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,-92,,58,49,66,,59,,,,60,61',
'136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,',
'60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,-92,,58,49,66',
',59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,,,,,58',
'49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44,62,',
',,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48,42,43,44',
'62,,,-92,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47,46,,48',
'42,43,44,62,,,-92,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53,,45,47',
'46,,48,42,43,44,62,,,-92,,58,49,66,,59,,,,60,61,136,55,32,85,,,51,,53',
',45,47,46,,48,42,43,44,62,,,,,58,49,66,,59,,,,60,61,,,32,,,,51,,53,',
',,,,,,,,,,,,,376,,,,,,,,,,,,32,,,,51,,53,123,124,,121,122,125,109,110',
'111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104,106,108',
'107,100,102,101,126,127,95,94,130,182,,,,,,,,,93,,,123,124,99,121,122',
'125,,123,124,,121,122,125,109,110,111,115,116,117,112,113,114,118,119',
'120,96,98,97,103,105,104,106,108,107,100,102,101,126,127,95,94,130,182',
',93,,,,,99,,93,,,123,124,99,121,122,125,,123,124,,121,122,125,109,110',
'111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104,106,108',
'107,100,102,101,126,127,95,94,130,182,,93,,,,,99,,93,,,123,124,99,121',
'122,125,,123,124,,121,122,125,109,110,111,115,116,117,112,113,114,118',
'119,120,96,98,97,103,105,104,106,108,107,100,102,101,126,127,95,94,130',
'372,,93,,,,,99,,93,,,123,124,99,121,122,125,,123,124,,121,122,125,109',
'110,111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104,106',
'108,107,100,102,101,126,127,95,94,130,182,,93,,,,,99,,93,,,123,124,99',
'121,122,125,,123,124,,121,122,125,109,110,111,115,116,117,112,113,114',
'118,119,120,96,98,97,103,105,104,106,108,107,100,102,101,126,127,95',
'94,130,,,93,,,,,99,,93,,,123,124,99,121,122,125,109,110,111,115,116',
'117,112,113,114,118,119,120,96,98,97,103,105,104,106,108,107,100,102',
'101,126,127,95,94,130,,,,,,,232,,,93,,,123,124,99,121,122,125,109,110',
'111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104,106,108',
'107,100,102,101,126,127,95,94,130,,,,123,124,,121,122,125,93,,,123,124',
'99,121,122,125,109,110,111,115,116,117,112,113,114,118,119,120,96,98',
'97,103,105,104,106,108,107,100,102,101,126,127,95,94,130,93,,,123,124',
'99,121,122,125,93,,,123,124,99,121,122,125,109,110,111,115,116,117,112',
'113,114,118,119,120,96,98,97,103,105,104,106,108,107,100,102,101,126',
'127,95,94,130,93,,,,,99,,,,93,283,,,284,99,123,124,,121,122,125,109',
'110,111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104,106',
'108,107,100,102,101,126,127,95,94,130,,,,,,,,,,93,,,123,124,99,121,122',
'125,109,110,111,115,116,117,112,113,114,118,119,120,96,98,97,103,105',
'104,106,108,107,100,102,101,126,127,95,94,130,,,,,,,,,,93,,,123,124',
'99,121,122,125,109,110,111,115,116,117,112,113,114,118,119,120,96,98',
'97,103,105,104,106,108,107,100,102,101,126,127,95,,,,,,,,,,,,93,,,123',
'124,99,121,122,125,109,110,111,115,116,117,112,113,114,118,119,120,96',
'98,97,103,105,104,106,108,107,100,102,101,126,127,,,,,,,,,,,,,93,,,123',
'124,99,121,122,125,109,110,111,115,116,117,112,113,114,118,119,120,',
',,,,,,,,,,,,,,,,,,,,,,,,,93,,,123,124,99,121,122,125,109,110,111,115',
'116,117,112,113,114,118,119,120,96,98,97,103,105,104,106,108,107,100',
'102,101,126,127,95,94,130,,,,,,,232,,,93,,,123,124,99,121,122,125,109',
'110,111,115,116,117,112,113,114,118,119,120,123,124,,121,122,125,109',
'110,111,115,116,117,112,113,114,118,119,120,,,,,,,,,93,,,,,99,,,,,,',
',,,,,,93,,,123,124,99,121,122,125,109,110,111,115,116,117,112,113,114',
'118,119,120,123,124,,121,122,125,109,110,111,115,116,117,112,113,114',
'118,119,120,,,,,,,,,93,,,,,99,,,,,,,,,,,,,93,,,123,124,99,121,122,125',
'109,110,111,115,116,117,112,113,114,118,119,120,123,124,,121,122,125',
'109,110,111,115,116,117,112,113,114,118,119,120,,,,,,,,,93,,,,,99,,',
',,,,,,,,,,93,,,123,124,99,121,122,125,109,110,111,115,116,117,112,113',
'114,118,119,120,123,124,,121,122,125,109,110,111,115,116,117,112,113',
'114,118,119,120,,,,,,,,,93,,,,,99,,,,,,,,,,,,,93,,,123,124,99,121,122',
'125,109,110,111,115,116,117,112,113,114,118,119,120,,,,,,,,,,,,,,,,',
',,,,,,,,,,93,,,123,124,99,121,122,125,109,110,111,115,116,117,112,113',
'114,118,119,120,96,98,97,103,105,104,106,108,107,100,102,101,126,127',
'95,94,130,,,,,,,,,,93,329,,123,124,99,121,122,125,109,110,111,115,116',
'117,112,113,114,118,119,120,96,98,97,103,105,104,106,108,107,100,102',
'101,126,127,95,94,130,,,,,,,,,,93,,,123,124,99,121,122,125,109,110,111',
'115,116,117,112,113,114,118,119,120,96,98,97,103,105,104,106,108,107',
'100,102,101,126,127,95,94,130,,,,,,,,,,93,,,123,124,99,121,122,125,109',
'110,111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104,106',
'108,107,100,102,101,,,,,,,,,,,,,,,93,,,123,124,99,121,122,125,109,110',
'111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104,106,108',
'107,100,102,101,,,,,,,,,,,,,,,93,,,123,124,99,121,122,125,109,110,111',
'115,116,117,112,113,114,118,119,120,96,98,97,103,105,104,106,108,107',
'100,102,101,126,127,95,94,130,,,,,,,,,,93,,,123,124,99,121,122,125,109',
'110,111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104,106',
'108,107,100,102,101,126,127,95,94,130,,,,,,,,,,93,,,123,124,99,121,122',
'125,109,110,111,115,116,117,112,113,114,118,119,120,96,98,97,103,105',
'104,106,108,107,100,102,101,126,127,95,94,130,,,,,,,,,,93,,,,287,99',
'123,124,,121,122,125,109,110,111,115,116,117,112,113,114,118,119,120',
'96,98,97,103,105,104,106,108,107,100,102,101,126,127,95,94,130,,,,,',
',,,,93,,,123,124,99,121,122,125,109,110,111,115,116,117,112,113,114',
'118,119,120,96,98,97,103,105,104,106,108,107,100,102,101,126,127,95',
'94,130,,,,,,,,,,93,,,123,124,99,121,122,125,109,110,111,115,116,117',
'112,113,114,118,119,120,96,98,97,103,105,104,106,108,107,100,102,101',
'126,127,95,94,130,,,,,,,,,,93,,,123,124,99,121,122,125,109,110,111,115',
'116,117,112,113,114,118,119,120,96,98,97,103,105,104,106,108,107,100',
'102,101,126,127,95,94,130,,,,,,,,,,93,,,123,124,99,121,122,125,109,110',
'111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104,106,108',
'107,100,102,101,126,127,95,94,130,,,,,,,,,,93,325,,,284,99,123,124,',
'121,122,125,109,110,111,115,116,117,112,113,114,118,119,120,96,98,97',
'103,105,104,106,108,107,100,102,101,126,127,95,94,130,,,,,,,,,,93,,',
'123,124,99,121,122,125,109,110,111,115,116,117,112,113,114,118,119,120',
'96,98,97,103,105,104,106,108,107,100,102,101,126,127,95,94,130,,,,,',
',,,,93,,,123,124,99,121,122,125,109,110,111,115,116,117,112,113,114',
'118,119,120,96,98,97,103,105,104,106,108,107,100,102,101,126,127,95',
'94,130,,,,,,,,,,93,,,123,124,99,121,122,125,109,110,111,115,116,117',
'112,113,114,118,119,120,96,98,97,103,105,104,106,108,107,100,102,101',
'126,127,95,94,130,,,,,,,,,,93,,,,,99' ]
        racc_action_table = arr = ::Array.new(5601, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'184,371,184,184,184,184,184,184,172,82,263,2,54,184,184,381,241,241',
'241,306,241,241,241,241,277,144,158,349,355,184,241,262,151,144,151',
'148,183,249,138,249,333,306,352,333,333,352,352,333,20,352,355,297,20',
'333,333,352,352,263,248,248,82,172,371,371,183,54,68,298,68,333,223',
'352,2,2,377,223,381,381,241,158,241,241,148,151,262,277,277,184,148',
'184,184,184,149,184,20,20,184,20,20,20,20,20,20,20,20,20,20,20,20,20',
'20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,222,333,333',
'352,352,222,377,377,136,20,149,376,261,245,20,376,149,376,376,376,376',
'376,244,69,376,69,376,376,26,376,376,376,376,376,146,376,376,376,376',
'376,376,376,376,376,376,376,376,376,376,376,25,134,376,376,376,376,376',
'310,310,276,376,376,181,305,276,261,245,275,181,26,26,26,26,275,275',
'244,239,230,139,230,319,139,239,310,139,319,39,39,39,39,161,25,25,25',
'25,161,282,376,182,376,376,376,182,376,182,182,182,182,182,132,295,182',
'295,182,182,92,182,182,182,182,182,90,182,182,182,182,182,182,182,182',
'182,182,182,182,182,182,182,182,88,182,182,182,182,182,310,310,86,182',
'182,64,64,64,64,208,208,318,208,208,208,155,155,155,155,8,155,8,336',
'8,336,242,242,242,147,242,242,242,242,24,24,24,24,321,24,242,182,359',
'182,182,182,359,182,359,359,359,359,359,323,208,359,84,359,359,208,359',
'359,359,359,359,83,359,359,359,359,359,359,359,359,359,359,359,359,359',
'359,359,341,341,359,359,359,359,359,242,70,242,359,359,334,251,334,251',
'209,209,279,209,209,209,256,254,256,254,301,280,301,280,335,278,53,53',
'53,337,53,53,53,53,154,342,160,345,346,347,53,359,0,359,359,359,0,359',
'0,0,0,0,0,137,209,0,351,0,0,209,0,0,0,0,0,271,0,0,0,0,0,0,0,0,0,0,0',
'0,0,0,0,0,354,0,0,0,0,0,53,270,53,0,0,356,66,268,40,195,195,366,195',
'195,195,195,195,195,195,195,195,195,195,195,195,195,195,367,369,179',
'180,264,373,374,375,191,255,379,1,382,0,372,0,0,0,372,0,372,372,372',
'372,372,,195,372,,372,372,195,372,372,372,372,372,,372,372,372,372,372',
'372,372,372,372,372,372,372,372,372,372,,,372,372,372,372,372,,,,372',
'372,,,,,,,,,196,196,,196,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,,,,,,,,,,372,,372,372,372,266,372,,,266,266,266,266,266',
'266,266,,196,266,,266,266,196,266,266,266,266,266,,266,266,266,266,266',
'266,266,266,266,266,266,266,266,266,266,,,266,266,266,266,266,,221,221',
'266,266,176,,,,,,,,,,,,,,,,,,,,,,,,176,,,,,,,,,,,266,,266,266,266,221',
'266,,176,176,221,176,176,176,176,176,176,176,176,176,176,176,176,176',
'176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176',
'176,176,,,,,,,,,,176,,89,,,176,89,,89,89,89,89,89,224,224,89,,89,89',
',89,89,89,89,89,,89,89,89,,89,89,89,89,89,89,89,89,89,89,89,89,,89,89',
'89,89,89,,163,163,89,89,175,,,,224,,,,,224,,,,,,,,,,,,,,,175,,,,,,,',
',,,89,162,162,,89,163,89,,175,175,163,175,175,175,175,175,175,175,175',
'175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175',
'175,175,175,175,175,175,175,312,,162,,,,,162,,175,,,,,175,,,,,,,,,,',
',,,,,,,,210,210,,210,210,210,220,220,312,312,,312,312,312,312,312,312',
'312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312',
'312,312,312,312,312,312,312,312,312,309,210,,,,,210,220,,312,,,220,',
'312,,,,,,,,,,,,,,,,,,211,211,,211,211,211,,,,309,309,,309,309,309,309',
'309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309',
'309,309,309,309,309,309,309,309,309,309,309,211,93,93,,93,211,,,,309',
',93,93,93,309,93,93,93,93,93,,,,,93,93,93,,93,,,,93,93,189,189,,189',
'212,212,,212,212,212,189,189,189,,189,189,189,189,189,,,,,189,189,189',
',189,,,,189,189,,,93,,,,93,,93,,93,,,96,96,212,96,,,,212,,,96,96,96',
',96,96,96,96,96,,,,189,96,96,96,189,96,189,,189,96,96,61,61,,61,,,,',
',,61,61,61,,61,61,61,61,61,,,,,61,61,61,,61,,,,61,61,62,62,96,62,,,96',
',96,,62,62,62,,62,62,62,62,62,,,,,62,62,62,,62,,,,62,62,59,59,61,59',
',,61,,61,,59,59,59,,59,59,59,59,59,,,,,59,59,59,,59,,,,59,59,358,358',
'62,358,,,62,,62,,358,358,358,,358,358,358,358,358,,,,,358,358,358,,358',
',,,358,358,57,57,59,57,,,59,,59,,57,57,57,,57,57,57,57,57,,,57,,57,57',
'57,,57,,,,57,57,343,343,358,343,,,358,,358,,343,343,343,,343,343,343',
'343,343,,,,,343,343,343,,343,,,,343,343,56,56,57,56,,,57,,57,,56,56',
'56,,56,56,56,56,56,,,,,56,56,56,,56,,,,56,56,74,74,343,74,,,343,,343',
'74,74,74,74,,74,74,74,74,74,,,,,74,74,74,,74,,,,74,74,76,76,56,76,,',
'56,,56,,76,76,76,,76,76,76,76,76,,,,,76,76,76,,76,,,,76,76,77,77,74',
'77,74,74,74,,74,,77,77,77,,77,77,77,77,77,,,,,77,77,77,,77,,,,77,77',
'78,78,76,78,,,76,,76,,78,78,78,,78,78,78,78,78,,,,,78,78,78,,78,,,,78',
'78,81,81,77,81,,,77,,77,,81,81,81,,81,81,81,81,81,,,,,81,81,81,,81,',
',,81,81,252,252,78,252,,,78,,78,,252,252,252,,252,252,252,252,252,,',
',,252,252,252,,252,,,,252,252,243,243,81,243,,,81,,81,,243,243,243,',
'243,243,243,243,243,,,243,,243,243,243,,243,,,,243,243,253,253,252,253',
',,252,,252,,253,253,253,,253,253,253,253,253,,,253,,253,253,253,,253',
',,,253,253,85,85,243,85,,,243,,243,,85,85,85,,85,85,85,85,85,,,,,85',
'85,85,,85,,,,85,85,238,238,253,238,,,253,,253,,238,238,238,,238,238',
'238,238,238,,,,,238,238,238,,238,,,,238,238,236,236,85,236,,,85,,85',
',236,236,236,,236,236,236,236,236,,,,,236,236,236,,236,,,,236,236,55',
'55,238,55,,,238,238,238,,55,55,55,,55,55,55,55,55,,,55,,55,55,55,,55',
',,,55,55,233,233,236,233,,,236,,236,,233,233,233,,233,233,233,233,233',
',,233,,233,233,233,,233,,,,233,233,192,192,55,192,,,55,,55,,192,192',
'192,,192,192,192,192,192,,,192,,192,192,192,,192,,,,192,192,51,51,233',
'51,,,233,,233,,51,51,51,,51,51,51,51,51,,,51,,51,51,51,,51,,,,51,51',
'94,94,192,94,,,192,,192,,94,94,94,,94,94,94,94,94,,,,,94,94,94,,94,',
',,94,94,95,95,51,95,,,51,,51,,95,95,95,,95,95,95,95,95,,,,,95,95,95',
',95,,,,95,95,60,60,94,60,,,94,,94,,60,60,60,,60,60,60,60,60,,,,,60,60',
'60,,60,,,,60,60,97,97,95,97,,,95,,95,,97,97,97,,97,97,97,97,97,,,,,97',
'97,97,,97,,,,97,97,98,98,60,98,,,60,,60,,98,98,98,,98,98,98,98,98,,',
',,98,98,98,,98,,,,98,98,99,99,97,99,,,97,,97,,99,99,99,,99,99,99,99',
'99,,,,,99,99,99,,99,,,,99,99,100,100,98,100,,,98,,98,,100,100,100,,100',
'100,100,100,100,,,,,100,100,100,,100,,,,100,100,101,101,99,101,,,99',
',99,,101,101,101,,101,101,101,101,101,,,,,101,101,101,,101,,,,101,101',
'102,102,100,102,,,100,,100,,102,102,102,,102,102,102,102,102,,,,,102',
'102,102,,102,,,,102,102,103,103,101,103,,,101,,101,,103,103,103,,103',
'103,103,103,103,,,,,103,103,103,,103,,,,103,103,104,104,102,104,,,102',
',102,,104,104,104,,104,104,104,104,104,,,,,104,104,104,,104,,,,104,104',
'105,105,103,105,,,103,,103,,105,105,105,,105,105,105,105,105,,,,,105',
'105,105,,105,,,,105,105,106,106,104,106,,,104,,104,,106,106,106,,106',
'106,106,106,106,,,,,106,106,106,,106,,,,106,106,107,107,105,107,,,105',
',105,,107,107,107,,107,107,107,107,107,,,,,107,107,107,,107,,,,107,107',
'108,108,106,108,,,106,,106,,108,108,108,,108,108,108,108,108,,,,,108',
'108,108,,108,,,,108,108,109,109,107,109,,,107,,107,,109,109,109,,109',
'109,109,109,109,,,,,109,109,109,,109,,,,109,109,110,110,108,110,,,108',
',108,,110,110,110,,110,110,110,110,110,,,,,110,110,110,,110,,,,110,110',
'273,273,109,273,,,109,,109,,273,273,273,,273,273,273,273,273,,,,,273',
'273,273,,273,,,,273,273,112,112,110,112,,,110,,110,,112,112,112,,112',
'112,112,112,112,,,,,112,112,112,,112,,,,112,112,113,113,273,113,,,273',
',273,,113,113,113,,113,113,113,113,113,,,,,113,113,113,,113,,,,113,113',
'114,114,112,114,,,112,,112,,114,114,114,,114,114,114,114,114,,,,,114',
'114,114,,114,,,,114,114,115,115,113,115,,,113,,113,,115,115,115,,115',
'115,115,115,115,,,,,115,115,115,,115,,,,115,115,116,116,114,116,,,114',
',114,,116,116,116,,116,116,116,116,116,,,,,116,116,116,,116,,,,116,116',
'117,117,115,117,,,115,,115,,117,117,117,,117,117,117,117,117,,,,,117',
'117,117,,117,,,,117,117,118,118,116,118,,,116,,116,,118,118,118,,118',
'118,118,118,118,,,,,118,118,118,,118,,,,118,118,119,119,117,119,,,117',
',117,,119,119,119,,119,119,119,119,119,,,,,119,119,119,,119,,,,119,119',
'120,120,118,120,,,118,,118,,120,120,120,,120,120,120,120,120,,,,,120',
'120,120,,120,,,,120,120,121,121,119,121,,,119,,119,,121,121,121,,121',
'121,121,121,121,,,,,121,121,121,,121,,,,121,121,122,122,120,122,,,120',
',120,,122,122,122,,122,122,122,122,122,,,,,122,122,122,,122,,,,122,122',
'123,123,121,123,,,121,,121,,123,123,123,,123,123,123,123,123,,,,,123',
'123,123,,123,,,,123,123,124,124,122,124,,,122,,122,,124,124,124,,124',
'124,124,124,124,,,,,124,124,124,,124,,,,124,124,125,125,123,125,,,123',
',123,,125,125,125,,125,125,125,125,125,,,,,125,125,125,,125,,,,125,125',
'126,126,124,126,,,124,,124,,126,126,126,,126,126,126,126,126,,,,,126',
'126,126,,126,,,,126,126,127,127,125,127,,,125,,125,,127,127,127,,127',
'127,127,127,127,,,,,127,127,127,,127,,,,127,127,128,128,126,128,,,126',
',126,,128,128,128,,128,128,128,128,128,,,,,128,128,128,,128,,,,128,128',
'129,129,127,129,,,127,,127,,129,129,129,,129,129,129,129,129,,,,,129',
'129,129,,129,,,,129,129,130,130,128,130,,,128,,128,,130,130,130,,130',
'130,130,130,130,,,,,130,130,130,,130,,,,130,130,131,131,129,131,,,129',
',129,,131,131,131,,131,131,131,131,131,,,131,,131,131,131,,131,,,,131',
'131,185,185,130,185,,,130,,130,,185,185,185,,185,185,185,185,185,,,185',
',185,185,185,,185,,,,185,185,303,303,131,303,,,131,,131,,303,303,303',
',303,303,303,303,303,,,303,,303,303,303,,303,,,,303,303,265,265,185',
'265,,,185,,185,,265,265,265,,265,265,265,265,265,,,,,265,265,265,,265',
',,,265,265,32,32,303,32,,,303,,303,,32,32,32,,32,32,32,32,32,,,,,32',
'32,32,,32,,,,32,32,168,168,265,168,,,265,,265,,168,168,168,,168,168',
'168,168,168,,,,,168,168,168,,168,,,,168,168,167,167,32,167,,,32,,32',
',167,167,167,,167,167,167,167,167,,,,,167,167,167,,167,,,,167,167,287',
'287,168,287,,,168,,168,,287,287,287,,287,287,287,287,287,,,,,287,287',
'287,,287,,,,287,287,166,166,167,166,,,167,,167,,166,166,166,,166,166',
'166,166,166,,,,,166,166,166,,166,,,,166,166,143,143,287,143,,,287,,287',
',143,143,143,,143,143,143,143,143,,,143,,143,143,143,,143,,,,143,143',
'165,165,166,165,,,166,,166,,165,165,165,,165,165,165,165,165,,,,,165',
'165,165,,165,,,,165,165,284,284,143,284,,,143,,143,,284,284,284,,284',
'284,284,284,284,,,284,,284,284,284,,284,,,,284,284,269,269,165,269,',
',165,,165,,269,269,269,,269,269,269,269,269,,,,,269,269,269,,269,,,',
'269,269,272,272,284,272,,,284,,284,,272,272,272,,272,272,272,272,272',
',,,,272,272,272,,272,,,,272,272,159,159,269,159,,,269,,269,,159,159',
'159,,159,159,159,159,159,,,159,,159,159,159,,159,,,,159,159,156,156',
'272,156,,,272,,272,,156,156,156,,156,156,156,156,156,,,156,,156,156',
'156,,156,,,,156,156,152,152,159,152,,,159,,159,,152,152,152,,152,152',
'152,152,152,,,152,,152,152,152,,152,,,,152,152,111,111,156,111,,,156',
',156,,111,111,111,,111,111,111,111,111,,,,,111,111,111,,111,,,,111,111',
',,152,,,,152,,152,,,,,,,,,,,,,,,370,,,,,,,,,,,,111,,,,111,,111,370,370',
',370,370,370,370,370,370,370,370,370,370,370,370,370,370,370,370,370',
'370,370,370,370,370,370,370,370,370,370,370,370,370,370,370,315,,,,',
',,,,370,,,213,213,370,213,213,213,,315,315,,315,315,315,315,315,315',
'315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315',
'315,315,315,315,315,315,315,315,315,316,,213,,,,,213,,315,,,214,214',
'315,214,214,214,,316,316,,316,316,316,316,316,316,316,316,316,316,316',
'316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316',
'316,316,316,316,178,,214,,,,,214,,316,,,215,215,316,215,215,215,,178',
'178,,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178',
'178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,360',
',215,,,,,215,,178,,,216,216,178,216,216,216,,360,360,,360,360,360,360',
'360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360',
'360,360,360,360,360,360,360,360,360,360,360,177,,216,,,,,216,,360,,',
'217,217,360,217,217,217,,177,177,,177,177,177,177,177,177,177,177,177',
'177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177',
'177,177,177,177,177,177,,,217,,,,,217,,177,,,135,135,177,135,135,135',
'135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135',
'135,135,135,135,135,135,135,135,135,135,135,135,,,,,,,135,,,135,,,300',
'300,135,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300',
'300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300',
',,,218,218,,218,218,218,300,,,173,173,300,173,173,173,173,173,173,173',
'173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173',
'173,173,173,173,173,173,173,173,218,,,219,219,218,219,219,219,173,,',
'190,190,173,190,190,190,190,190,190,190,190,190,190,190,190,190,190',
'190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190',
'190,219,,,,,219,,,,190,190,,,190,190,260,260,,260,260,260,260,260,260',
'260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260',
'260,260,260,260,260,260,260,260,260,,,,,,,,,,260,,,291,291,260,291,291',
'291,291,291,291,291,291,291,291,291,291,291,291,291,291,291,291,291',
'291,291,291,291,291,291,291,291,291,291,291,291,291,,,,,,,,,,291,,,193',
'193,291,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,,,,,,,,',
',,,193,,,194,194,193,194,194,194,194,194,194,194,194,194,194,194,194',
'194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194',
',,,,,,,,,,,,194,,,197,197,194,197,197,197,197,197,197,197,197,197,197',
'197,197,197,197,197,,,,,,,,,,,,,,,,,,,,,,,,,,,197,,,250,250,197,250',
'250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250',
'250,250,250,250,250,250,250,250,250,250,250,250,250,250,,,,,,,250,,',
'250,,,199,199,250,199,199,199,199,199,199,199,199,199,199,199,199,199',
'199,199,200,200,,200,200,200,200,200,200,200,200,200,200,200,200,200',
'200,200,,,,,,,,,199,,,,,199,,,,,,,,,,,,,200,,,201,201,200,201,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,202,202,,202,202,202',
'202,202,202,202,202,202,202,202,202,202,202,202,,,,,,,,,201,,,,,201',
',,,,,,,,,,,,202,,,203,203,202,203,203,203,203,203,203,203,203,203,203',
'203,203,203,203,203,204,204,,204,204,204,204,204,204,204,204,204,204',
'204,204,204,204,204,,,,,,,,,203,,,,,203,,,,,,,,,,,,,204,,,205,205,204',
'205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206',
',206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,,,,,,,',
',205,,,,,205,,,,,,,,,,,,,206,,,207,207,206,207,207,207,207,207,207,207',
'207,207,207,207,207,207,207,207,,,,,,,,,,,,,,,,,,,,,,,,,,,207,,,289',
'289,207,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289',
'289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289',
',,,,,,,,,289,289,,259,259,289,259,259,259,259,259,259,259,259,259,259',
'259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259',
'259,259,259,259,259,,,,,,,,,,259,,,258,258,259,258,258,258,258,258,258',
'258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258',
'258,258,258,258,258,258,258,258,258,,,,,,,,,,258,,,225,225,258,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225',
'225,225,225,225,225,225,225,225,,,,,,,,,,,,,,,225,,,226,226,225,226',
'226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226',
'226,226,226,226,226,226,226,226,226,,,,,,,,,,,,,,,226,,,227,227,226',
'227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227',
'227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,,,,,,,,',
',227,,,228,228,227,228,228,228,228,228,228,228,228,228,228,228,228,228',
'228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228',
'228,228,,,,,,,,,,228,,,229,229,228,229,229,229,229,229,229,229,229,229',
'229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229',
'229,229,229,229,229,229,,,,,,,,,,229,,,,229,229,257,257,,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,,,,,,,,,,257,,,140,140',
'257,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140',
'140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,,,,',
',,,,,140,,,286,286,140,286,286,286,286,286,286,286,286,286,286,286,286',
'286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286',
'286,286,286,,,,,,,,,,286,,,327,327,286,327,327,327,327,327,327,327,327',
'327,327,327,327,327,327,327,327,327,327,327,327,327,327,327,327,327',
'327,327,327,327,327,327,327,,,,,,,,,,327,,,281,281,327,281,281,281,281',
'281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281',
'281,281,281,281,281,281,281,281,281,281,281,,,,,,,,,,281,281,,,281,281',
'328,328,,328,328,328,328,328,328,328,328,328,328,328,328,328,328,328',
'328,328,328,328,328,328,328,328,328,328,328,328,328,328,328,328,328',
',,,,,,,,,328,,,157,157,328,157,157,157,157,157,157,157,157,157,157,157',
'157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157',
'157,157,157,157,,,,,,,,,,157,,,153,153,157,153,153,153,153,153,153,153',
'153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153',
'153,153,153,153,153,153,153,153,,,,,,,,,,153,,,198,198,153,198,198,198',
'198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198',
'198,198,198,198,198,198,198,198,198,198,198,198,,,,,,,,,,198,,,,,198' ]
        racc_action_check = arr = ::Array.new(5601, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   399,   485,   -18,   nil,   nil,   nil,   nil,   nil,   251,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    46,   nil,   nil,   nil,   223,   137,   115,   nil,   nil,   nil,
   nil,   nil,  3172,   nil,   nil,   nil,   nil,   nil,   nil,   132,
   402,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1786,   nil,   355,   -29,  1687,  1291,  1225,   nil,  1159,
  1885,  1093,  1126,   nil,   195,   nil,   412,   nil,    23,   109,
   318,   nil,   nil,   nil,  1324,   nil,  1357,  1390,  1423,   nil,
   nil,  1456,   -32,   308,   287,  1588,   187,   nil,   267,   717,
   209,   nil,   152,   981,  1819,  1852,  1060,  1918,  1951,  1984,
  2017,  2050,  2083,  2116,  2149,  2182,  2215,  2248,  2281,  2314,
  2347,  3601,  2413,  2446,  2479,  2512,  2545,  2578,  2611,  2644,
  2677,  2710,  2743,  2776,  2809,  2842,  2875,  2908,  2941,  2974,
  3007,  3040,   196,   nil,   138,  3965,    49,   370,    -3,   120,
  5171,   nil,   nil,  3337,   -62,   nil,    67,   213,    -6,    51,
   nil,   -11,  3568,  5456,   306,   205,  3535,  5409,   -15,  3502,
   308,   127,   758,   718,   nil,  3370,  3304,  3238,  3205,   nil,
   nil,   nil,   -33,  4059,   nil,   765,   625,  3918,  3810,   460,
   461,   184,   225,     7,     0,  3073,   nil,   nil,   nil,  1014,
  4106,   389,  1753,  4250,  4297,   408,   499,  4344,  5503,  4438,
  4456,  4503,  4521,  4568,  4586,  4633,  4651,  4698,   234,   321,
   833,   908,   990,  3695,  3749,  3803,  3857,  3911,  4050,  4097,
   839,   578,    37,   -22,   682,  4886,  4933,  4980,  5027,  5074,
   119,   nil,   nil,  1720,   nil,   nil,  1654,   nil,  1621,   118,
   nil,   -14,   268,  1522,   110,   101,   nil,   nil,   -36,    -6,
  4391,   279,  1489,  1555,   289,   395,   288,  5124,  4839,  4792,
  4156,   100,   -10,   -31,   471,  3139,   577,   nil,   447,  3436,
   441,   417,  3469,  2380,   nil,   189,   159,    -5,   377,   330,
   293,  5312,   132,   nil,  3403,   nil,  5218,  3271,   nil,  4745,
   nil,  4203,   nil,   nil,   nil,   152,   nil,   -44,   -28,   nil,
  4012,   292,   nil,  3106,   nil,   163,     0,   nil,   nil,   917,
   183,   nil,   841,   nil,   nil,  3702,  3756,   nil,   255,   180,
   nil,   281,   nil,   296,   nil,   nil,   nil,  5265,  5362,   nil,
   nil,   nil,   nil,    40,   278,   376,   208,   299,   nil,   nil,
   nil,   350,   365,  1258,   nil,   389,   390,   391,   nil,    -2,
   nil,   408,    42,   nil,   400,     9,   411,   nil,  1192,   312,
  3864,   nil,   nil,   nil,   nil,   nil,   429,   385,   nil,   446,
  3648,   -28,   486,   472,   439,   474,   138,    45,   nil,   455,
   nil,   -14,   479,   nil ]

racc_action_default = [
    -1,  -211,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,
   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -31,
   -32,   -33,   -92,   -35,   -36,   -37,   -38,   -39,   -40,   -41,
   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -49,   -50,   -51,
   -52,   -56,   -59,   -62,  -211,   -93,   -92,   -93,   -91,   -92,
   -92,   -92,   -92,  -134,  -211,  -142,  -211,  -146,   -92,   -92,
   -92,  -162,  -163,  -164,   -92,  -174,   -92,   -92,   -92,  -183,
  -184,   -92,  -211,  -211,  -211,   -92,  -209,  -210,  -211,    -5,
  -211,  -150,   -69,   -92,   -92,   -92,   -92,   -92,   -92,   -92,
   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,
   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,
   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,   -92,
   -92,   -93,   -68,   -78,   -67,  -211,  -211,   -66,  -211,  -211,
   -57,   -41,   -42,   -56,  -211,   -63,  -211,  -211,  -144,  -147,
  -151,   -92,   -93,   -94,   -85,   -26,   -93,  -211,  -211,   -93,
   -88,  -130,  -131,  -132,  -133,   -92,   -92,   -92,   -92,  -145,
  -148,  -149,  -211,  -172,  -173,  -211,  -211,  -211,  -211,  -211,
  -211,  -191,  -197,  -211,   -30,   -93,   384,    -4,  -144,   -92,
  -211,  -211,   -77,   -96,   -97,   -98,   -99,  -100,  -101,  -102,
  -103,  -104,  -105,  -106,  -107,  -108,  -109,  -110,  -111,  -112,
  -113,  -114,  -115,  -116,  -117,  -118,  -119,  -120,  -121,  -122,
  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -177,  -180,  -211,
  -211,   -79,   -34,   -93,   -81,   -80,   -92,   -54,   -92,  -211,
   -60,  -211,  -211,   -93,  -211,  -152,  -153,  -154,  -211,   -92,
   -94,  -211,   -92,   -93,  -211,  -211,  -211,  -135,  -136,  -137,
  -138,  -166,  -165,  -168,  -211,   -92,   -92,  -198,  -211,   -92,
  -211,  -211,   -92,   -92,  -188,  -211,  -211,  -196,  -211,  -211,
  -211,  -211,  -211,   -70,   -75,   -71,   -76,   -92,   -83,  -211,
   -55,   -58,   -61,   -64,   -65,  -211,  -155,  -211,  -211,   -84,
   -95,  -211,   -86,   -93,   -87,  -211,  -169,  -167,  -175,  -211,
  -196,  -178,  -211,  -182,  -185,  -211,  -211,  -189,  -211,  -211,
  -192,  -211,  -205,  -211,  -208,   -72,   -73,   -74,  -181,   -53,
   -82,  -156,  -157,   -83,  -211,  -211,  -211,  -211,  -170,  -176,
  -199,  -200,  -211,   -92,  -179,  -211,  -211,  -211,  -194,  -211,
  -193,  -211,   -82,  -158,  -168,  -211,  -168,  -201,   -92,   -92,
  -211,  -186,  -187,  -190,  -195,  -206,  -211,  -211,  -171,  -211,
  -211,  -202,   -92,  -211,  -168,  -211,   -92,  -203,  -159,  -211,
  -160,  -204,  -211,  -161 ]

racc_goto_table = [
    89,     2,   146,   139,    20,   321,   141,   340,    91,   142,
     1,   145,   264,   268,    90,   132,   134,   164,   137,   144,
   184,   336,   155,   275,   187,   341,   nil,   nil,   nil,   nil,
   nil,   149,   nil,   nil,   nil,   180,   135,   nil,   357,   nil,
   147,   191,   nil,   nil,   nil,   nil,   181,   nil,   349,   247,
   nil,   249,   nil,   nil,   nil,   140,   nil,   nil,   nil,   nil,
   157,   nil,   158,   161,   162,   163,   157,   nil,   170,   171,
   nil,   nil,   174,   305,    90,    90,   172,   nil,   173,   nil,
   175,   176,   177,   nil,   nil,   178,   nil,   nil,   nil,   157,
   nil,   nil,   nil,    20,   nil,   239,   nil,   190,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
   205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
   215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
   225,   226,   227,   228,   229,   149,   nil,   282,   nil,   nil,
   270,   271,   nil,   nil,   255,   247,   278,   140,   297,   262,
   154,   248,   160,   nil,   nil,   nil,   250,    90,   263,   nil,
   250,   nil,   247,   250,   366,   nil,   369,   nil,   nil,   257,
   258,   259,   260,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   277,   379,   nil,    20,   nil,   nil,   nil,
   146,   294,   nil,   281,   141,   141,   286,   142,   142,   293,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   230,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   320,
   289,   nil,   291,   nil,   nil,   nil,   nil,   251,   nil,   298,
   nil,   nil,   nil,   nil,   256,    90,   300,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   310,   335,   309,
    20,   nil,   nil,   312,   nil,    89,   315,   316,   345,   346,
   280,   347,   348,   nil,   350,   nil,   351,   nil,   327,   nil,
   nil,   328,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    89,   nil,
   nil,   nil,   364,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   373,
   nil,   nil,   375,   nil,   nil,   nil,   nil,   nil,   295,   nil,
   nil,   nil,   382,   nil,   nil,   nil,   nil,   360,   301,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   371,   nil,   370,    20,   nil,   nil,   nil,   nil,   nil,    89,
   nil,   nil,   nil,   377,   nil,    89,    20,   381,   nil,    89,
    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   334 ]

racc_goto_check = [
     4,     2,    27,    40,    20,    34,    35,    62,    53,    36,
     1,    43,    60,    60,    48,    45,    45,    51,    44,    42,
    28,    59,    24,    61,     3,    63,   nil,   nil,   nil,   nil,
   nil,    54,   nil,   nil,   nil,    35,    20,   nil,    62,   nil,
    49,    47,   nil,   nil,   nil,   nil,    58,   nil,    34,    55,
   nil,    55,   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,
    20,   nil,    48,    20,    20,    20,    20,   nil,    53,    53,
   nil,   nil,     4,    57,    48,    48,    48,   nil,    20,   nil,
    20,    20,    20,   nil,   nil,    20,   nil,   nil,   nil,    20,
   nil,   nil,   nil,    20,   nil,    40,   nil,    20,    20,    20,
    20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
    20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
    20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
    20,    20,    20,    20,    20,    54,   nil,    47,   nil,   nil,
    58,    58,   nil,   nil,    49,    55,    58,    20,    55,    54,
    50,    53,    50,   nil,   nil,   nil,    20,    48,    49,   nil,
    20,   nil,    55,    20,    57,   nil,    57,   nil,   nil,    20,
    20,    20,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,    57,   nil,    20,   nil,   nil,   nil,
    27,    27,   nil,    20,    35,    35,    20,    36,    36,    43,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    50,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    58,
    20,   nil,    20,   nil,   nil,   nil,   nil,    50,   nil,    53,
   nil,   nil,   nil,   nil,    50,    48,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,    58,    20,
    20,   nil,   nil,    20,   nil,     4,    20,    20,    58,    58,
    50,    58,    58,   nil,    58,   nil,    58,   nil,    20,   nil,
   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,
   nil,   nil,    58,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    58,
   nil,   nil,    58,   nil,   nil,   nil,   nil,   nil,    50,   nil,
   nil,   nil,    58,   nil,   nil,   nil,   nil,    20,    50,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,   nil,    20,    20,   nil,   nil,   nil,   nil,   nil,     4,
   nil,   nil,   nil,     2,   nil,     4,    20,     2,   nil,     4,
    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50 ]

racc_goto_pointer = [
   nil,    10,     1,   -65,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,   nil,   nil,   nil,   -34,   nil,   nil,   -51,   -65,   nil,
   nil,   nil,   nil,   nil,  -271,   -47,   -44,   nil,   nil,   nil,
   -48,   nil,   -34,   -42,   -22,   -10,   nil,   -52,     6,   -14,
    95,   -45,   nil,     0,   -23,  -100,   nil,  -190,   -37,  -285,
  -163,  -158,  -303,  -285 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
   153,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    36,    37,    38,    39,    40,    41,    50,    65,
   nil,    52,   nil,   nil,   nil,   nil,    92,   nil,    54,   nil,
   254,    63,    64,    67,   245,   150,    70,   nil,   267,   nil,
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 99, :_reduce_1,
  1, 99, :_reduce_2,
  1, 100, :_reduce_3,
  3, 100, :_reduce_4,
  2, 100, :_reduce_5,
  1, 100, :_reduce_6,
  1, 101, :_reduce_7,
  1, 101, :_reduce_8,
  1, 101, :_reduce_9,
  1, 101, :_reduce_10,
  1, 101, :_reduce_11,
  1, 101, :_reduce_12,
  1, 101, :_reduce_13,
  1, 101, :_reduce_14,
  1, 101, :_reduce_15,
  1, 101, :_reduce_16,
  1, 101, :_reduce_17,
  1, 101, :_reduce_18,
  1, 101, :_reduce_19,
  1, 101, :_reduce_20,
  1, 101, :_reduce_21,
  1, 101, :_reduce_22,
  1, 101, :_reduce_23,
  1, 118, :_reduce_24,
  1, 118, :_reduce_25,
  1, 118, :_reduce_26,
  1, 118, :_reduce_27,
  1, 118, :_reduce_28,
  1, 118, :_reduce_29,
  1, 118, :_reduce_30,
  1, 118, :_reduce_31,
  1, 118, :_reduce_32,
  1, 118, :_reduce_33,
  3, 118, :_reduce_34,
  1, 102, :_reduce_35,
  1, 102, :_reduce_36,
  1, 102, :_reduce_37,
  1, 125, :_reduce_38,
  1, 125, :_reduce_39,
  1, 125, :_reduce_40,
  1, 125, :_reduce_41,
  1, 125, :_reduce_42,
  1, 125, :_reduce_43,
  1, 125, :_reduce_44,
  1, 125, :_reduce_45,
  1, 125, :_reduce_46,
  1, 130, :_reduce_47,
  1, 131, :_reduce_48,
  1, 131, :_reduce_49,
  1, 132, :_reduce_50,
  1, 135, :_reduce_51,
  1, 133, :_reduce_52,
  5, 137, :_reduce_53,
  3, 136, :_reduce_54,
  4, 136, :_reduce_55,
  0, 138, :_reduce_56,
  1, 138, :_reduce_57,
  3, 138, :_reduce_58,
  1, 134, :_reduce_59,
  3, 139, :_reduce_60,
  4, 139, :_reduce_61,
  0, 140, :_reduce_62,
  1, 140, :_reduce_63,
  3, 140, :_reduce_64,
  3, 141, :_reduce_65,
  2, 122, :_reduce_66,
  2, 122, :_reduce_67,
  2, 122, :_reduce_68,
  2, 123, :_reduce_69,
  3, 144, :_reduce_70,
  3, 144, :_reduce_71,
  4, 144, :_reduce_72,
  4, 144, :_reduce_73,
  3, 145, :_reduce_74,
  2, 145, :_reduce_75,
  2, 145, :_reduce_76,
  1, 145, :_reduce_77,
  1, 143, :_reduce_78,
  2, 143, :_reduce_79,
  2, 142, :_reduce_80,
  2, 142, :_reduce_81,
  5, 126, :_reduce_82,
  4, 126, :_reduce_83,
  4, 126, :_reduce_84,
  2, 126, :_reduce_85,
  4, 126, :_reduce_86,
  4, 119, :_reduce_87,
  2, 119, :_reduce_88,
  6, 103, :_reduce_89,
  5, 103, :_reduce_90,
  1, 146, :_reduce_91,
  0, 146, :_reduce_92,
  0, 148, :_reduce_93,
  1, 148, :_reduce_94,
  3, 148, :_reduce_95,
  3, 129, :_reduce_96,
  3, 129, :_reduce_97,
  3, 129, :_reduce_98,
  3, 129, :_reduce_99,
  3, 129, :_reduce_100,
  3, 129, :_reduce_101,
  3, 129, :_reduce_102,
  3, 129, :_reduce_103,
  3, 129, :_reduce_104,
  3, 129, :_reduce_105,
  3, 129, :_reduce_106,
  3, 129, :_reduce_107,
  3, 129, :_reduce_108,
  3, 129, :_reduce_109,
  3, 129, :_reduce_110,
  3, 129, :_reduce_111,
  3, 129, :_reduce_112,
  3, 129, :_reduce_113,
  3, 129, :_reduce_114,
  3, 129, :_reduce_115,
  3, 129, :_reduce_116,
  3, 129, :_reduce_117,
  3, 129, :_reduce_118,
  3, 129, :_reduce_119,
  3, 129, :_reduce_120,
  3, 129, :_reduce_121,
  3, 129, :_reduce_122,
  3, 129, :_reduce_123,
  3, 129, :_reduce_124,
  3, 129, :_reduce_125,
  3, 129, :_reduce_126,
  3, 129, :_reduce_127,
  3, 129, :_reduce_128,
  3, 129, :_reduce_129,
  2, 120, :_reduce_130,
  2, 120, :_reduce_131,
  2, 120, :_reduce_132,
  2, 121, :_reduce_133,
  1, 121, :_reduce_134,
  3, 149, :_reduce_135,
  3, 149, :_reduce_136,
  3, 149, :_reduce_137,
  3, 149, :_reduce_138,
  1, 150, :_reduce_139,
  1, 150, :_reduce_140,
  1, 150, :_reduce_141,
  1, 150, :_reduce_142,
  1, 150, :_reduce_143,
  2, 151, :_reduce_144,
  2, 151, :_reduce_145,
  1, 124, :_reduce_146,
  2, 124, :_reduce_147,
  2, 106, :_reduce_148,
  2, 106, :_reduce_149,
  2, 106, :_reduce_150,
  1, 152, :_reduce_151,
  2, 152, :_reduce_152,
  2, 152, :_reduce_153,
  2, 152, :_reduce_154,
  3, 153, :_reduce_155,
  4, 153, :_reduce_156,
  4, 153, :_reduce_157,
  6, 104, :_reduce_158,
  9, 104, :_reduce_159,
  9, 104, :_reduce_160,
  11, 104, :_reduce_161,
  1, 154, :_reduce_162,
  1, 154, :_reduce_163,
  1, 154, :_reduce_164,
  1, 147, :_reduce_165,
  1, 147, :_reduce_166,
  1, 155, :_reduce_167,
  0, 155, :_reduce_168,
  0, 157, :_reduce_169,
  1, 157, :_reduce_170,
  3, 157, :_reduce_171,
  2, 105, :_reduce_172,
  2, 105, :_reduce_173,
  1, 117, :_reduce_174,
  4, 108, :_reduce_175,
  5, 108, :_reduce_176,
  3, 108, :_reduce_177,
  4, 109, :_reduce_178,
  5, 109, :_reduce_179,
  3, 109, :_reduce_180,
  5, 127, :_reduce_181,
  4, 111, :_reduce_182,
  1, 116, :_reduce_183,
  1, 116, :_reduce_184,
  4, 112, :_reduce_185,
  6, 110, :_reduce_186,
  6, 110, :_reduce_187,
  3, 113, :_reduce_188,
  4, 113, :_reduce_189,
  6, 113, :_reduce_190,
  0, 159, :_reduce_191,
  2, 159, :_reduce_192,
  3, 159, :_reduce_193,
  3, 159, :_reduce_194,
  4, 159, :_reduce_195,
  2, 156, :_reduce_196,
  1, 156, :_reduce_197,
  1, 158, :_reduce_198,
  3, 158, :_reduce_199,
  3, 158, :_reduce_200,
  4, 158, :_reduce_201,
  3, 160, :_reduce_202,
  4, 161, :_reduce_203,
  5, 161, :_reduce_204,
  4, 114, :_reduce_205,
  6, 114, :_reduce_206,
  2, 128, :_reduce_207,
  4, 115, :_reduce_208,
  1, 115, :_reduce_209,
  1, 107, :_reduce_210 ]

racc_reduce_n = 211

racc_shift_n = 384

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :ELSEIF => 4,
  :THEN => 5,
  :UNLESS => 6,
  :END => 7,
  :WHILE => 8,
  :UNTIL => 9,
  :BREAK => 10,
  :CONTINUE => 11,
  :TRY => 12,
  :CATCH => 13,
  :FINALLY => 14,
  :FOR => 15,
  :IN => 16,
  :DEF => 17,
  :DEF_BANG => 18,
  :SPLAT => 19,
  :CALL => 20,
  :BUILTIN_COMMAND => 21,
  :CLASS => 22,
  :NEW => 23,
  :DEFM => 24,
  :DEFM_BANG => 25,
  :SUPER => 26,
  :RIML_COMMAND => 27,
  :RETURN => 28,
  :NEWLINE => 29,
  :NUMBER => 30,
  :STRING_D => 31,
  :STRING_S => 32,
  :EX_LITERAL => 33,
  :REGEXP => 34,
  :TRUE => 35,
  :FALSE => 36,
  :NIL => 37,
  :LET => 38,
  :UNLET => 39,
  :UNLET_BANG => 40,
  :IDENTIFIER => 41,
  :DICT_VAL => 42,
  :SCOPE_MODIFIER => 43,
  :SCOPE_MODIFIER_LITERAL => 44,
  :SPECIAL_VAR_PREFIX => 45,
  :FINISH => 46,
  "!" => 47,
  "*" => 48,
  "/" => 49,
  "%" => 50,
  "+" => 51,
  "-" => 52,
  "." => 53,
  ">" => 54,
  ">#" => 55,
  ">?" => 56,
  "<" => 57,
  "<#" => 58,
  "<?" => 59,
  ">=" => 60,
  ">=#" => 61,
  ">=?" => 62,
  "<=" => 63,
  "<=#" => 64,
  "<=?" => 65,
  "==" => 66,
  "==?" => 67,
  "==#" => 68,
  "=~" => 69,
  "=~?" => 70,
  "=~#" => 71,
  "!~" => 72,
  "!~?" => 73,
  "!~#" => 74,
  "!=" => 75,
  "!=?" => 76,
  "!=#" => 77,
  :IS => 78,
  :ISNOT => 79,
  "&&" => 80,
  "||" => 81,
  "?" => 82,
  "=" => 83,
  "+=" => 84,
  "-=" => 85,
  ".=" => 86,
  "," => 87,
  "(" => 88,
  ")" => 89,
  ";" => 90,
  "|" => 91,
  "[" => 92,
  "]" => 93,
  "{" => 94,
  "}" => 95,
  ":" => 96,
  "===" => 97 }

racc_nt_base = 98

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "ELSEIF",
  "THEN",
  "UNLESS",
  "END",
  "WHILE",
  "UNTIL",
  "BREAK",
  "CONTINUE",
  "TRY",
  "CATCH",
  "FINALLY",
  "FOR",
  "IN",
  "DEF",
  "DEF_BANG",
  "SPLAT",
  "CALL",
  "BUILTIN_COMMAND",
  "CLASS",
  "NEW",
  "DEFM",
  "DEFM_BANG",
  "SUPER",
  "RIML_COMMAND",
  "RETURN",
  "NEWLINE",
  "NUMBER",
  "STRING_D",
  "STRING_S",
  "EX_LITERAL",
  "REGEXP",
  "TRUE",
  "FALSE",
  "NIL",
  "LET",
  "UNLET",
  "UNLET_BANG",
  "IDENTIFIER",
  "DICT_VAL",
  "SCOPE_MODIFIER",
  "SCOPE_MODIFIER_LITERAL",
  "SPECIAL_VAR_PREFIX",
  "FINISH",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\".\"",
  "\">\"",
  "\">#\"",
  "\">?\"",
  "\"<\"",
  "\"<#\"",
  "\"<?\"",
  "\">=\"",
  "\">=#\"",
  "\">=?\"",
  "\"<=\"",
  "\"<=#\"",
  "\"<=?\"",
  "\"==\"",
  "\"==?\"",
  "\"==#\"",
  "\"=~\"",
  "\"=~?\"",
  "\"=~#\"",
  "\"!~\"",
  "\"!~?\"",
  "\"!~#\"",
  "\"!=\"",
  "\"!=?\"",
  "\"!=#\"",
  "IS",
  "ISNOT",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\"=\"",
  "\"+=\"",
  "\"-=\"",
  "\".=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"|\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\":\"",
  "\"===\"",
  "$start",
  "Root",
  "Expressions",
  "AnyExpression",
  "Terminator",
  "ExplicitCall",
  "Def",
  "Return",
  "UnletVariable",
  "ExLiteral",
  "If",
  "Unless",
  "For",
  "While",
  "Until",
  "Try",
  "ClassDefinition",
  "Super",
  "LoopKeyword",
  "EndScript",
  "ValueExpression",
  "RimlCommand",
  "UnaryOperator",
  "Assign",
  "DictGet",
  "ListOrDictGet",
  "AllVariableRetrieval",
  "Literal",
  "Call",
  "Ternary",
  "ObjectInstantiation",
  "BinaryOperator",
  "Number",
  "String",
  "Regexp",
  "List",
  "Dictionary",
  "ScopeModifierLiteral",
  "ListLiteral",
  "ListUnpack",
  "ListItems",
  "DictionaryLiteral",
  "DictItems",
  "DictItem",
  "DictGetWithDotLiteral",
  "DictGetWithDot",
  "ListOrDictGetWithBrackets",
  "SubList",
  "Scope",
  "DefCallIdentifier",
  "ArgList",
  "AssignExpression",
  "AssignLHS",
  "VariableRetrieval",
  "CurlyBraceName",
  "CurlyBraceVarPart",
  "FunctionType",
  "DefKeyword",
  "Block",
  "ParamList",
  "IfBlock",
  "Catch",
  "ElseBlock",
  "ElseifBlock" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_3(val, _values, result)
     result = Nodes.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_21(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_26(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_27(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_28(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_32(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_33(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_34(val, _values, result)
     result = WrapInParensNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_35(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_36(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_37(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_38(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_40(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_41(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_42(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_44(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_45(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_46(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_47(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_48(val, _values, result)
     result = StringNode.new(val[0], :s) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_49(val, _values, result)
     result = StringNode.new(val[0], :d) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_50(val, _values, result)
     result = RegexpNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_51(val, _values, result)
     result = ScopeModifierLiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_52(val, _values, result)
     result = ListNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_53(val, _values, result)
     result = ListUnpackNode.new(val[1] << val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_54(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_55(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_56(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_57(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_58(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_59(val, _values, result)
     result = DictionaryNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_60(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_61(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_62(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_63(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_64(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 161)
  def _reduce_65(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 165)
  def _reduce_66(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_67(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_68(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_69(val, _values, result)
     result = ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_70(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_71(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_72(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_73(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_74(val, _values, result)
     result = SublistNode.new([val[0], LiteralNode.new(' : '), val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_75(val, _values, result)
     result = SublistNode.new([val[0], LiteralNode.new(' :')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_76(val, _values, result)
     result = SublistNode.new([LiteralNode.new(': '), val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_77(val, _values, result)
     result = SublistNode.new([LiteralNode.new(':')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 189)
  def _reduce_78(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 190)
  def _reduce_79(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 194)
  def _reduce_80(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 195)
  def _reduce_81(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 199)
  def _reduce_82(val, _values, result)
     result = CallNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 200)
  def _reduce_83(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 201)
  def _reduce_84(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_85(val, _values, result)
     result = CallNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 203)
  def _reduce_86(val, _values, result)
     result = ExplicitCallNode.new(nil, nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 207)
  def _reduce_87(val, _values, result)
     result = RimlCommandNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_88(val, _values, result)
     result = RimlCommandNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 212)
  def _reduce_89(val, _values, result)
     result = ExplicitCallNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_90(val, _values, result)
     result = ExplicitCallNode.new(nil, val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 217)
  def _reduce_91(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_92(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 222)
  def _reduce_93(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 223)
  def _reduce_94(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 224)
  def _reduce_95(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 228)
  def _reduce_96(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_97(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 231)
  def _reduce_98(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 232)
  def _reduce_99(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_100(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_101(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 238)
  def _reduce_102(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 239)
  def _reduce_103(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 240)
  def _reduce_104(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 242)
  def _reduce_105(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 243)
  def _reduce_106(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_107(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_108(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 247)
  def _reduce_109(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 248)
  def _reduce_110(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 250)
  def _reduce_111(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 251)
  def _reduce_112(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_113(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 254)
  def _reduce_114(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 255)
  def _reduce_115(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 256)
  def _reduce_116(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 258)
  def _reduce_117(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 259)
  def _reduce_118(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 260)
  def _reduce_119(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_120(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_121(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 264)
  def _reduce_122(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 266)
  def _reduce_123(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 267)
  def _reduce_124(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 268)
  def _reduce_125(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 269)
  def _reduce_126(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 270)
  def _reduce_127(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 272)
  def _reduce_128(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 273)
  def _reduce_129(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 277)
  def _reduce_130(val, _values, result)
     result = UnaryOperatorNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 278)
  def _reduce_131(val, _values, result)
     result = UnaryOperatorNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 279)
  def _reduce_132(val, _values, result)
     result = UnaryOperatorNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 284)
  def _reduce_133(val, _values, result)
     result = AssignNode.new(val[1][0], val[1][1], val[1][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 285)
  def _reduce_134(val, _values, result)
     result = AssignNode.new(val[0][0], val[0][1], val[0][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 290)
  def _reduce_135(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 291)
  def _reduce_136(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_137(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_138(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 297)
  def _reduce_139(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 298)
  def _reduce_140(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 299)
  def _reduce_141(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 300)
  def _reduce_142(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 301)
  def _reduce_143(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_144(val, _values, result)
     result = GetVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 307)
  def _reduce_145(val, _values, result)
     result = GetSpecialVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 311)
  def _reduce_146(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 312)
  def _reduce_147(val, _values, result)
     result = GetCurlyBraceNameNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_148(val, _values, result)
     result = UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 317)
  def _reduce_149(val, _values, result)
     result = UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_150(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 322)
  def _reduce_151(val, _values, result)
     result = CurlyBraceVariable.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 323)
  def _reduce_152(val, _values, result)
     result = CurlyBraceVariable.new([ CurlyBracePart.new(val[0]), val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 324)
  def _reduce_153(val, _values, result)
     result = val[0] << CurlyBracePart.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 325)
  def _reduce_154(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 329)
  def _reduce_155(val, _values, result)
     result = CurlyBracePart.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 330)
  def _reduce_156(val, _values, result)
     result = CurlyBracePart.new([val[1], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 331)
  def _reduce_157(val, _values, result)
     result = CurlyBracePart.new([val[1], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 337)
  def _reduce_158(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], [], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 338)
  def _reduce_159(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], val[4], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 339)
  def _reduce_160(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], [val[4]], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 340)
  def _reduce_161(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], val[4] << val[6], val[8], val[9]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 344)
  def _reduce_162(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 345)
  def _reduce_163(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 346)
  def _reduce_164(val, _values, result)
     result = "DefMethodNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 351)
  def _reduce_165(val, _values, result)
     result = GetCurlyBraceNameNode.new('', val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 352)
  def _reduce_166(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_167(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 358)
  def _reduce_168(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 362)
  def _reduce_169(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 363)
  def _reduce_170(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 364)
  def _reduce_171(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 368)
  def _reduce_172(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 369)
  def _reduce_173(val, _values, result)
     result = ReturnNode.new(nil)    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 373)
  def _reduce_174(val, _values, result)
     result = FinishNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_175(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 379)
  def _reduce_176(val, _values, result)
     result = IfNode.new(val[1], Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 380)
  def _reduce_177(val, _values, result)
     result = IfNode.new(val[2], Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 384)
  def _reduce_178(val, _values, result)
     result = UnlessNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 385)
  def _reduce_179(val, _values, result)
     result = UnlessNode.new(val[1], Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 386)
  def _reduce_180(val, _values, result)
     result = UnlessNode.new(val[2], Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 390)
  def _reduce_181(val, _values, result)
     result = TernaryOperatorNode.new([val[0], val[2], val[4]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 394)
  def _reduce_182(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 398)
  def _reduce_183(val, _values, result)
     result = BreakNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 399)
  def _reduce_184(val, _values, result)
     result = ContinueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 403)
  def _reduce_185(val, _values, result)
     result = UntilNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 407)
  def _reduce_186(val, _values, result)
     result = ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 408)
  def _reduce_187(val, _values, result)
     result = ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 412)
  def _reduce_188(val, _values, result)
     result = TryNode.new(val[1], nil, nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 413)
  def _reduce_189(val, _values, result)
     result = TryNode.new(val[1], val[2], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 414)
  def _reduce_190(val, _values, result)
     result = TryNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 418)
  def _reduce_191(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 419)
  def _reduce_192(val, _values, result)
     result = [ CatchNode.new(nil, val[1]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 420)
  def _reduce_193(val, _values, result)
     result = [ CatchNode.new(val[1], val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 421)
  def _reduce_194(val, _values, result)
     result = val[0] << CatchNode.new(nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 422)
  def _reduce_195(val, _values, result)
     result = val[0] << CatchNode.new(val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 429)
  def _reduce_196(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 430)
  def _reduce_197(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 434)
  def _reduce_198(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 435)
  def _reduce_199(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 436)
  def _reduce_200(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 437)
  def _reduce_201(val, _values, result)
     result = val[1] << val[2] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 441)
  def _reduce_202(val, _values, result)
     result = ElseNode.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 445)
  def _reduce_203(val, _values, result)
     result = Nodes.new([ElseifNode.new(val[1], val[3])]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 446)
  def _reduce_204(val, _values, result)
     result = val[0] << ElseifNode.new(val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 450)
  def _reduce_205(val, _values, result)
     result = ClassDefinitionNode.new(val[1], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 451)
  def _reduce_206(val, _values, result)
     result = ClassDefinitionNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 455)
  def _reduce_207(val, _values, result)
     result = ObjectInstantiationNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 459)
  def _reduce_208(val, _values, result)
     result = SuperNode.new(val[2], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 460)
  def _reduce_209(val, _values, result)
     result = SuperNode.new([], false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 464)
  def _reduce_210(val, _values, result)
     result = ExLiteralNode.new(val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
