#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require File.expand_path("../ast_rewriter", __FILE__)
  require File.expand_path("../errors", __FILE__)
module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 529)
  # This code will be put as-is in the parser class

  attr_accessor :ast_rewriter

  # parses tokens or code into output nodes
  def parse(object, ast_rewriter = Riml::AST_Rewriter.new, include_file = nil)
    if tokens?(object)
      @tokens = object
    elsif code?(object)
      @lexer = Riml::Lexer.new(object)
    end

    begin
      ast = do_parse
    rescue Racc::ParseError => e
      raise unless @lexer
      if @lexer.prev_token_is_keyword?
        warning = "#{@lexer.invalid_keyword.inspect} is a keyword, and cannot " \
          "be used as a variable name"
      end
      error_msg = "on line #{@lexer.lineno}: #{e.message}"
      error_msg << "\n\n#{warning}" if warning
      raise Riml::ParseError, error_msg
    end

    @ast_rewriter ||= ast_rewriter
    return ast unless @ast_rewriter
    @ast_rewriter.ast = ast
    @ast_rewriter.rewrite(include_file)
  end

  # get the next token from either the list of tokens provided, or
  # the lexer getting the next token
  def next_token
    return @tokens.shift unless @lexer
    @lexer.next_token
  end

  private
  def tokens?(object)
    Array === object
  end

  def code?(object)
    String === object
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'132,161,337,200,133,200,390,391,200,200,413,263,384,143,56,382,87,420',
'262,265,382,382,36,46,48,47,36,49,43,44,45,63,36,317,385,36,59,50,68',
'421,60,59,50,68,61,62,126,127,129,124,125,128,112,113,114,118,119,120',
'115,116,117,121,122,123,99,101,100,106,108,107,109,111,110,103,105,104',
'130,131,98,97,134,179,78,37,52,36,79,37,80,83,81,82,85,37,102,84,37',
'73,74,36,57,56,86,87,75,36,88,58,76,36,46,48,47,89,49,43,44,45,63,70',
'71,-110,349,59,50,68,77,60,200,362,284,61,62,312,296,364,363,158,358',
'314,382,299,200,158,357,300,37,49,-164,-164,-164,-164,405,144,404,367',
'150,149,-42,-42,37,254,261,136,368,259,37,260,28,348,37,52,78,54,146',
'296,79,266,80,83,81,82,85,268,266,84,161,73,74,161,57,56,86,87,75,161',
'88,58,76,36,46,48,47,89,49,43,44,45,63,70,71,-110,268,59,50,68,77,60',
'-41,-41,369,61,62,261,-189,-47,-47,161,260,161,-188,150,149,266,370',
'161,161,-85,-85,-85,-85,200,59,50,68,247,49,-46,-46,146,268,-164,-164',
'-164,-164,247,144,146,28,373,37,52,78,54,161,258,79,258,80,83,81,82',
'85,146,146,84,196,73,74,-99,57,56,86,87,75,161,88,58,76,36,46,48,47',
'89,49,43,44,45,63,70,71,-110,161,59,50,68,77,60,-43,-43,258,61,62,247',
'-161,-161,-161,-161,390,409,-98,-45,-45,136,-44,-44,52,258,-99,-110',
'146,59,50,68,182,183,184,185,-162,-162,-162,-162,256,355,126,127,129',
'376,28,377,37,52,78,54,378,252,79,379,80,83,81,82,85,251,136,84,283',
'73,74,-98,57,56,86,87,75,352,88,58,76,136,46,48,47,89,49,43,44,45,63',
'70,71,-110,102,59,50,68,77,60,136,207,205,61,62,126,127,129,124,125',
'128,112,113,114,118,119,120,115,116,117,121,122,123,99,101,100,106,108',
'107,109,111,110,103,105,104,204,59,201,200,59,28,200,78,52,102,54,79',
'200,80,83,81,82,85,102,200,84,136,73,74,309,57,56,86,87,75,186,88,58',
'76,36,46,48,47,89,49,43,44,45,63,70,71,310,402,59,50,68,77,60,403,311',
'406,61,62,407,102,126,127,129,124,125,128,112,113,114,118,119,120,115',
'116,117,121,122,123,99,101,100,106,108,107,109,111,110,103,105,104,130',
'131,98,28,410,37,52,78,54,136,412,79,-228,80,83,81,82,85,102,283,84',
'414,73,74,415,57,56,86,87,75,200,88,58,76,36,46,48,47,89,49,43,44,45',
'63,70,71,417,418,59,50,68,77,60,346,349,345,61,62,349,247,126,127,129',
'124,125,128,112,113,114,118,119,120,115,116,117,121,122,123,99,101,100',
'106,108,107,109,111,110,103,105,104,130,131,146,28,344,37,52,78,54,146',
'102,79,429,80,83,81,82,85,102,146,84,407,73,74,102,57,56,86,87,75,325',
'88,58,76,36,46,48,47,89,49,43,44,45,63,70,71,139,138,59,50,68,77,60',
'136,433,349,61,62,302,435,-161,-161,-161,-161,96,340,329,90,438,,,,',
',,,,,,,,,303,,,,,,,126,127,129,,28,,37,52,,54,,,126,127,129,124,125',
'128,112,113,114,118,119,120,115,116,117,121,122,123,99,101,100,106,108',
'107,109,111,110,103,105,104,130,131,98,97,134,306,102,,,,,,,,,,,,102',
',,,,,,,,,,303,,,,,,126,127,129,124,125,128,126,127,129,124,125,128,',
'126,127,129,124,125,128,112,113,114,118,119,120,115,116,117,121,122',
'123,99,101,100,106,108,107,109,111,110,103,105,104,130,131,98,97,134',
'102,78,,,,79,102,80,83,81,82,85,,102,84,,73,74,,57,56,86,87,75,,88,58',
'76,36,46,48,47,89,49,43,44,45,63,70,71,,,59,50,68,77,60,,,,61,62,392',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,126,127,129,124,125,128,28,,37,52,,54,126',
'127,129,124,125,128,112,113,114,118,119,120,115,116,117,121,122,123',
'99,101,100,106,108,107,109,111,110,103,105,104,130,131,98,97,134,387',
'102,,,,,,,143,56,,87,,102,88,,,,46,48,47,,49,43,44,45,63,,,,,59,50,68',
',60,,,,61,62,126,127,129,124,125,128,112,113,114,118,119,120,115,116',
'117,121,122,123,99,101,100,106,108,107,109,111,110,103,105,104,130,131',
'98,97,134,28,,,52,,54,,250,143,56,,87,,102,88,126,127,129,46,48,47,',
'49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,,87,,,88,126,127,129',
'46,48,47,,49,43,44,45,63,,,,102,59,50,68,,60,,,,61,62,143,56,28,87,',
'52,88,54,,250,46,48,47,,49,43,44,45,63,,,,102,59,50,68,,60,,,,61,62',
'143,56,28,87,,52,88,54,333,,46,48,47,,49,43,44,45,63,,,-110,,59,50,68',
',60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,-110',
',59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45',
'63,,,-110,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,164,46,48,47',
',49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46',
'48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,162,87,,52,88',
'54,,,46,48,47,,49,43,44,45,63,,,-110,,59,50,68,,60,,,,61,62,143,56,28',
'87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143',
'56,173,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61',
'62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60',
',,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,126,127,129',
',59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45',
'63,,,,,59,50,68,,60,,,,61,62,,102,28,-111,,52,,54,,126,127,129,124,125',
'128,112,113,114,118,119,120,115,116,117,121,122,123,,,,,143,56,,87,28',
'-111,88,52,,54,46,48,47,,49,43,44,45,63,,,,,59,50,68,102,60,,,,61,62',
'143,56,,87,,,88,,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62',
',,28,-111,,52,,54,,126,127,129,124,125,128,112,113,114,118,119,120,115',
'116,117,121,122,123,,,,,143,56,,87,28,,88,52,,54,46,48,47,,49,43,44',
'45,63,,,,,59,50,68,102,60,,,,61,62,143,56,,87,,,88,,,,46,48,47,,49,43',
'44,45,63,,,,,59,50,68,,60,,,,61,62,,,28,-111,,52,,54,,126,127,129,124',
'125,128,112,113,114,118,119,120,115,116,117,121,122,123,,,,,143,56,',
'87,28,,88,52,,54,46,48,47,,49,43,44,45,63,,,-110,,59,50,68,102,60,,',
',61,62,143,56,,87,,,88,,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60',
',,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50',
'68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,',
',,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44',
'45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49',
'43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48',
'47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54',
',,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52',
'88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28',
'87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,,',
'28,,,52,331,54,,126,127,129,124,125,128,112,113,114,118,119,120,115',
'116,117,121,122,123,,,,,143,56,,87,28,,88,52,,54,46,48,47,,49,43,44',
'45,63,,,,,59,50,68,102,60,,,,61,62,143,56,,87,,,88,,,,46,48,47,,49,43',
'44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47',
',49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,,,28,-111,,52,,54,,126,127',
'129,124,125,128,112,113,114,118,119,120,115,116,117,121,122,123,,,,',
'143,56,,87,28,,88,52,,54,46,48,47,,49,43,44,45,63,,,,,59,50,68,102,60',
',,,61,62,143,56,,87,,,88,,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60',
',,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50',
'68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,',
',,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44',
'45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49',
'43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48',
'47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54',
',,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52',
'88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28',
'87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143',
'56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61',
'62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60',
',,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50',
'68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,',
',,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44',
'45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49',
'43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48',
'47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54',
',,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52',
'88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28',
'87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143',
'56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61',
'62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60',
',,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50',
'68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,',
',,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44',
'45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49',
'43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48',
'47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54',
',,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52',
'88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28',
'87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143',
'56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61',
'62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60',
',,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50',
'68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,',
',,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44',
'45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49',
'43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48',
'47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54',
',,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52',
'88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28',
'87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143',
'56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61',
'62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60',
',,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50',
'68,,60,,,,61,62,,,28,-111,,52,,54,,126,127,129,124,125,128,112,113,114',
'118,119,120,115,116,117,121,122,123,,,,,143,56,,87,28,,88,52,,54,46',
'48,47,,49,43,44,45,63,,,,,59,50,68,102,60,,,,61,62,143,56,,87,,,88,',
',,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52',
'88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28',
'87,,52,88,54,,,46,48,47,,49,43,44,45,63,,,-110,,59,50,68,,60,,,,61,62',
',,28,-111,,52,,54,,126,127,129,124,125,128,112,113,114,118,119,120,115',
'116,117,121,122,123,,,,,143,56,,87,28,,88,52,,277,46,48,47,,49,43,44',
'45,63,,,-110,,59,50,68,102,60,,,,61,62,143,56,,87,,,88,,,,46,48,47,',
'49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46',
'48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,,,28,-111,,52,,54,,126',
'127,129,124,125,128,112,113,114,118,119,120,115,116,117,121,122,123',
',,,,143,56,,87,28,-111,88,52,,54,46,48,47,,49,43,44,45,63,,,,,59,50',
'68,102,60,,,,61,62,143,56,,87,,,88,,,,46,48,47,,49,43,44,45,63,,,,,59',
'50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49,43,44,45,63',
',,-110,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48,47,,49',
'43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54,,,46,48',
'47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,88,54',
',,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52',
'88,54,,,46,48,47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,,,28,-111',
',52,,54,,126,127,129,124,125,128,112,113,114,118,119,120,115,116,117',
'121,122,123,,,,,143,56,,87,28,,88,52,,277,46,48,47,,49,43,44,45,63,',
',,,59,50,68,102,60,,,,61,62,143,56,,87,126,127,129,124,125,128,46,48',
'47,,49,43,44,45,63,,,,,59,50,68,,60,,,,61,62,143,56,28,87,,52,,54,,',
'46,48,47,,49,43,44,45,,102,,,,59,50,68,,60,,,,61,62,143,56,179,87,,52',
',,,,46,48,47,,49,43,44,45,,,,,,59,50,68,,60,,,,61,62,,,179,,,52,,,,',
',,,,,,,,,,200,,,,,,,126,127,129,124,125,128,,,168,,,170,126,127,129',
'124,125,128,112,113,114,118,119,120,115,116,117,121,122,123,99,101,100',
'106,108,107,109,111,110,103,105,104,130,131,98,97,134,200,102,,,,,,126',
'127,129,124,125,128,102,,,,,,126,127,129,124,125,128,112,113,114,118',
'119,120,115,116,117,121,122,123,99,101,100,106,108,107,109,111,110,103',
'105,104,130,131,98,97,134,427,102,,,,,,126,127,129,124,125,128,102,',
',,,,126,127,129,124,125,128,112,113,114,118,119,120,115,116,117,121',
'122,123,99,101,100,106,108,107,109,111,110,103,105,104,130,131,98,97',
'134,200,102,,,,,,126,127,129,124,125,128,102,,,,,,126,127,129,124,125',
'128,112,113,114,118,119,120,115,116,117,121,122,123,99,101,100,106,108',
'107,109,111,110,103,105,104,130,131,98,97,134,200,102,,,,,,126,127,129',
'124,125,128,102,,,,,,126,127,129,124,125,128,112,113,114,118,119,120',
'115,116,117,121,122,123,99,101,100,106,108,107,109,111,110,103,105,104',
'130,131,98,97,134,431,102,,,,,,126,127,129,124,125,128,102,,,,,,126',
'127,129,124,125,128,112,113,114,118,119,120,115,116,117,121,122,123',
'99,101,100,106,108,107,109,111,110,103,105,104,130,131,98,97,134,200',
'102,,,,,126,127,129,124,125,128,,102,,,,,,126,127,129,124,125,128,112',
'113,114,118,119,120,115,116,117,121,122,123,99,101,100,106,108,107,109',
'111,110,103,105,104,130,131,98,97,134,102,126,127,129,124,125,128,,',
',,,,102,126,127,129,124,125,128,112,113,114,118,119,120,115,116,117',
'121,122,123,99,101,100,106,108,107,109,111,110,103,105,104,130,131,98',
'97,134,102,,,,,,,,,,,,,102,126,127,129,124,125,128,112,113,114,118,119',
'120,115,116,117,121,122,123,99,101,100,106,108,107,109,111,110,103,105',
'104,130,131,98,97,134,,,,,,,,,,,,,,102,126,127,129,124,125,128,112,113',
'114,118,119,120,115,116,117,121,122,123,99,101,100,106,108,107,109,111',
'110,103,105,104,130,131,98,97,134,,,,,,,,,,,,,,102,126,127,129,124,125',
'128,112,113,114,118,119,120,115,116,117,121,122,123,126,127,129,124',
'125,128,112,113,114,118,119,120,115,116,117,121,122,123,,,,,,,,,,,,',
'102,,,,,,,,,,,,,,,,,,102,126,127,129,124,125,128,112,113,114,118,119',
'120,115,116,117,121,122,123,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,102,126,127',
'129,124,125,128,112,113,114,118,119,120,115,116,117,121,122,123,99,101',
'100,106,108,107,109,111,110,103,105,104,130,131,98,97,134,,,,,,,,,,',
',,,102,126,127,129,124,125,128,112,113,114,118,119,120,115,116,117,121',
'122,123,99,101,100,106,108,107,109,111,110,103,105,104,130,131,98,97',
'134,,,,,,,343,,,,,,,102,126,127,129,124,125,128,112,113,114,118,119',
'120,115,116,117,121,122,123,99,101,100,106,108,107,109,111,110,103,105',
'104,130,131,98,97,134,,,,,,,343,,,,,,,102,126,127,129,124,125,128,112',
'113,114,118,119,120,115,116,117,121,122,123,99,101,100,106,108,107,109',
'111,110,103,105,104,130,131,98,97,134,,,,,,,,,,,,,,102,126,127,129,124',
'125,128,112,113,114,118,119,120,115,116,117,121,122,123,99,101,100,106',
'108,107,109,111,110,103,105,104,130,131,98,97,134,,,,,,,,,,,,,,102,126',
'127,129,124,125,128,112,113,114,118,119,120,115,116,117,121,122,123',
'99,101,100,106,108,107,109,111,110,103,105,104,,,,,,,,,,,,,,,,,,,102',
'126,127,129,124,125,128,112,113,114,118,119,120,115,116,117,121,122',
'123,99,101,100,106,108,107,109,111,110,103,105,104,130,131,98,97,134',
',,,,,,,,,,,,,102,126,127,129,124,125,128,112,113,114,118,119,120,115',
'116,117,121,122,123,99,101,100,106,108,107,109,111,110,103,105,104,130',
'131,98,97,134,,,,,,,,,,,,,,102,126,127,129,124,125,128,112,113,114,118',
'119,120,115,116,117,121,122,123,99,101,100,106,108,107,109,111,110,103',
'105,104,130,131,98,97,134,,,,,,,,,,,,,320,102,126,127,129,124,125,128',
'112,113,114,118,119,120,115,116,117,121,122,123,99,101,100,106,108,107',
'109,111,110,103,105,104,130,131,98,97,134,,,,,,,,,,,,,,102,126,127,129',
'124,125,128,112,113,114,118,119,120,115,116,117,121,122,123,99,101,100',
'106,108,107,109,111,110,103,105,104,130,131,98,97,134,,,,,,,,,,323,',
',324,102,126,127,129,124,125,128,112,113,114,118,119,120,115,116,117',
'121,122,123,99,101,100,106,108,107,109,111,110,103,105,104,130,131,98',
'97,134,,,,,,,,,,,,,,102,126,127,129,124,125,128,112,113,114,118,119',
'120,115,116,117,121,122,123,99,101,100,106,108,107,109,111,110,103,105',
'104,130,131,98,97,134,,,,,,,,,,,,,,102,126,127,129,124,125,128,112,113',
'114,118,119,120,115,116,117,121,122,123,99,101,100,106,108,107,109,111',
'110,103,105,104,130,131,98,97,134,,,,,,,,,,,,,,102,126,127,129,124,125',
'128,112,113,114,118,119,120,115,116,117,121,122,123,99,101,100,106,108',
'107,109,111,110,103,105,104,130,131,98,97,134,,,,,,,255,,,,,,,102,126',
'127,129,124,125,128,112,113,114,118,119,120,115,116,117,121,122,123',
'99,101,100,106,108,107,109,111,110,103,105,104,130,131,98,97,134,,,',
',,,,,,,,,,102,126,127,129,124,125,128,112,113,114,118,119,120,115,116',
'117,121,122,123,99,101,100,106,108,107,109,111,110,103,105,104,130,131',
'98,97,134,,,,,,,,,,,,,,102,126,127,129,124,125,128,112,113,114,118,119',
'120,115,116,117,121,122,123,99,101,100,106,108,107,109,111,110,103,105',
'104,130,131,98,97,134,,,,,,,,,,,,,,102,126,127,129,124,125,128,112,113',
'114,118,119,120,115,116,117,121,122,123,99,101,100,106,108,107,109,111',
'110,103,105,104,130,131,98,97,134,,,,,,,255,,,,,,,102,126,127,129,124',
'125,128,112,113,114,118,119,120,115,116,117,121,122,123,99,101,100,106',
'108,107,109,111,110,103,105,104,130,131,98,97,134,,,,,,,,,,,,,,102,126',
'127,129,124,125,128,112,113,114,118,119,120,115,116,117,121,122,123',
'99,101,100,106,108,107,109,111,110,103,105,104,130,131,98,97,134,,,',
',,,,,,375,,,,102,126,127,129,124,125,128,112,113,114,118,119,120,115',
'116,117,121,122,123,99,101,100,106,108,107,109,111,110,103,105,104,130',
'131,98,97,134,,,,,,,,,,,,,,102,126,127,129,124,125,128,112,113,114,118',
'119,120,115,116,117,121,122,123,99,101,100,106,108,107,109,111,110,103',
'105,104,130,131,98,97,134,,,,,,,,,,,,,,102,126,127,129,124,125,128,112',
'113,114,118,119,120,115,116,117,121,122,123,99,101,100,106,108,107,109',
'111,110,103,105,104,130,131,98,97,134,,,,,,,,,,,,,,102,126,127,129,124',
'125,128,112,113,114,118,119,120,115,116,117,121,122,123,99,101,100,106',
'108,107,109,111,110,103,105,104,130,131,98,97,134,,,,,,,,,,372,,,324',
'102,126,127,129,124,125,128,112,113,114,118,119,120,115,116,117,121',
'122,123,99,101,100,106,108,107,109,111,110,103,105,104,130,131,98,97',
'134,,,,,,,,,,,,,,102,126,127,129,124,125,128,112,113,114,118,119,120',
'115,116,117,121,122,123,99,101,100,106,108,107,109,111,110,103,105,104',
'130,131,98,97,134,,,,,,,,,,,,,264,102' ]
        racc_action_table = arr = ::Array.new(6352, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'21,279,279,347,21,201,354,354,434,419,394,154,348,96,96,347,96,405,154',
'157,434,419,426,96,96,96,432,96,96,96,96,96,354,201,348,315,96,96,96',
'405,96,70,70,70,96,96,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21',
'21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,96,0,426,96',
'2,0,432,0,0,0,0,0,354,21,0,315,0,0,436,0,0,0,0,0,92,0,0,0,0,0,0,0,0',
'0,0,0,0,0,0,0,0,298,0,0,0,0,0,423,313,166,0,0,199,202,313,313,55,308',
'199,423,191,314,172,307,191,2,314,272,272,272,272,383,272,383,316,276',
'276,272,272,436,140,152,140,317,152,92,152,0,298,0,0,200,0,275,189,200',
'158,200,200,200,200,200,159,266,200,202,200,200,55,200,200,200,200,200',
'172,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200',
'297,200,200,200,200,200,276,276,318,200,200,287,158,275,275,189,287',
'158,159,39,39,296,319,159,266,135,135,135,135,364,71,71,71,135,364,271',
'271,167,267,30,30,30,30,151,30,273,200,322,200,200,4,200,297,148,4,147',
'4,4,4,4,4,274,343,4,84,4,4,379,4,4,4,4,4,296,4,4,4,4,4,4,4,4,4,4,4,4',
'4,4,4,4,267,4,4,4,4,4,273,273,327,4,4,328,274,274,274,274,389,389,402',
'270,270,343,274,274,84,145,379,8,255,8,8,8,65,65,65,65,41,41,41,41,143',
'305,236,236,236,336,4,338,4,4,91,4,339,138,91,342,91,91,91,91,91,137',
'171,91,175,91,91,402,91,91,91,91,91,301,91,91,91,255,91,91,91,91,91',
'91,91,91,91,91,91,91,236,91,91,91,91,91,94,93,90,91,91,242,242,242,242',
'242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242',
'242,242,242,242,242,242,242,242,242,88,87,86,85,72,91,363,431,91,176',
'91,431,366,431,431,431,431,431,242,368,431,180,431,431,196,431,431,431',
'431,431,68,431,431,431,431,431,431,431,431,431,431,431,431,431,431,431',
'197,380,431,431,431,431,431,381,198,384,431,431,385,238,209,209,209',
'209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209',
'209,209,209,209,209,209,209,209,209,209,209,209,209,431,390,431,431',
'303,431,42,393,303,303,303,303,303,303,303,209,163,303,395,303,303,396',
'303,303,303,303,303,398,303,303,303,303,303,303,303,303,303,303,303',
'303,303,303,303,400,401,303,303,303,303,303,290,404,289,303,303,406',
'288,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210',
'210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,34,303',
'286,303,303,427,303,31,239,427,420,427,427,427,427,427,210,32,427,421',
'427,427,241,427,427,427,427,427,249,427,427,427,427,427,427,427,427',
'427,427,427,427,427,427,427,26,23,427,427,427,427,427,22,428,429,427',
'427,192,430,32,32,32,32,18,282,257,1,437,,,,,,,,,,,,,,192,,,,,,,237',
'237,237,,427,,427,427,,427,,,192,192,192,192,192,192,192,192,192,192',
'192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192',
'192,192,192,192,192,192,192,192,193,237,,,,,,,,,,,,192,,,,,,,,,,,193',
',,,,,225,225,225,225,225,225,226,226,226,226,226,226,,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,225,410,,,,410',
'226,410,410,410,410,410,,193,410,,410,410,,410,410,410,410,410,,410',
'410,410,410,410,410,410,410,410,410,410,410,410,410,410,,,410,410,410',
'410,410,,,,410,410,356,,,,,,,,,,,,,,,,,,,,,,,,,,,,,227,227,227,227,227',
'227,410,,410,410,,410,356,356,356,356,356,356,356,356,356,356,356,356',
'356,356,356,356,356,356,356,356,356,356,356,356,356,356,356,356,356',
'356,356,356,356,356,356,353,227,,,,,,,136,136,,136,,356,136,,,,136,136',
'136,,136,136,136,136,136,,,,,136,136,136,,136,,,,136,136,353,353,353',
'353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353',
'353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,136,,,136',
',136,,136,247,247,,247,,353,247,240,240,240,247,247,247,,247,247,247',
'247,247,,,,,247,247,247,,247,,,,247,247,263,263,,263,,,263,178,178,178',
'263,263,263,,263,263,263,263,263,,,,240,263,263,263,,263,,,,263,263',
'124,124,247,124,,247,124,247,,247,124,124,124,,124,124,124,124,124,',
',,178,124,124,124,,124,,,,124,124,52,52,263,52,,263,52,263,263,,52,52',
'52,,52,52,52,52,52,,,52,,52,52,52,,52,,,,52,52,54,54,124,54,,124,54',
'124,,,54,54,54,,54,54,54,54,54,,,54,,54,54,54,,54,,,,54,54,250,250,52',
'250,,52,250,52,,,250,250,250,,250,250,250,250,250,,,250,,250,250,250',
',250,,,,250,250,56,56,54,56,,54,56,54,,56,56,56,56,,56,56,56,56,56,',
',,,56,56,56,,56,,,,56,56,283,283,250,283,,250,283,250,,,283,283,283',
',283,283,283,283,283,,,,,283,283,283,,283,,,,283,283,58,58,56,58,,56',
'58,56,,,58,58,58,,58,58,58,58,58,,,58,,58,58,58,,58,,,,58,58,60,60,283',
'60,,283,60,283,,,60,60,60,,60,60,60,60,60,,,,,60,60,60,,60,,,,60,60',
'61,61,58,61,,58,61,58,,,61,61,61,,61,61,61,61,61,,,,,61,61,61,,61,,',
',61,61,62,62,60,62,,60,62,60,,,62,62,62,,62,62,62,62,62,,,,,62,62,62',
',62,,,,62,62,256,256,61,256,,61,256,61,,,256,256,256,,256,256,256,256',
'256,177,177,177,,256,256,256,,256,,,,256,256,284,284,62,284,,62,284',
'62,,,284,284,284,,284,284,284,284,284,,,,,284,284,284,,284,,,,284,284',
',177,256,256,,256,,256,,211,211,211,211,211,211,211,211,211,211,211',
'211,211,211,211,211,211,211,,,,,204,204,,204,284,284,204,284,,284,204',
'204,204,,204,204,204,204,204,,,,,204,204,204,211,204,,,,204,204,407',
'407,,407,,,407,,,,407,407,407,,407,407,407,407,407,,,,,407,407,407,',
'407,,,,407,407,,,204,204,,204,,204,,212,212,212,212,212,212,212,212',
'212,212,212,212,212,212,212,212,212,212,,,,,369,369,,369,407,,369,407',
',407,369,369,369,,369,369,369,369,369,,,,,369,369,369,212,369,,,,369',
'369,409,409,,409,,,409,,,,409,409,409,,409,409,409,409,409,,,,,409,409',
'409,,409,,,,409,409,,,369,369,,369,,369,,213,213,213,213,213,213,213',
'213,213,213,213,213,213,213,213,213,213,213,,,,,76,76,,76,409,,76,409',
',409,76,76,76,,76,76,76,76,76,,,76,,76,76,76,213,76,,,,76,76,78,78,',
'78,,,78,,,,78,78,78,,78,78,78,78,78,,,,,78,78,78,,78,,,,78,78,79,79',
'76,79,,76,79,76,,,79,79,79,,79,79,79,79,79,,,,,79,79,79,,79,,,,79,79',
'80,80,78,80,,78,80,78,,,80,80,80,,80,80,80,80,80,,,,,80,80,80,,80,,',
',80,80,83,83,79,83,,79,83,79,,,83,83,83,,83,83,83,83,83,,,,,83,83,83',
',83,,,,83,83,259,259,80,259,,80,259,80,,,259,259,259,,259,259,259,259',
'259,,,,,259,259,259,,259,,,,259,259,185,185,83,185,,83,185,83,,,185',
'185,185,,185,185,185,185,185,,,,,185,185,185,,185,,,,185,185,184,184',
'259,184,,259,184,259,,,184,184,184,,184,184,184,184,184,,,,,184,184',
'184,,184,,,,184,184,261,261,185,261,,185,261,185,,,261,261,261,,261',
'261,261,261,261,,,,,261,261,261,,261,,,,261,261,28,28,184,28,,184,28',
'184,,,28,28,28,,28,28,28,28,28,,,,,28,28,28,,28,,,,28,28,,,261,,,261',
'261,261,,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215',
'215,215,215,,,,,264,264,,264,28,,264,28,,28,264,264,264,,264,264,264',
'264,264,,,,,264,264,264,215,264,,,,264,264,265,265,,265,,,265,,,,265',
'265,265,,265,265,265,265,265,,,,,265,265,265,,265,,,,265,265,311,311',
'264,311,,264,311,264,,,311,311,311,,311,311,311,311,311,,,,,311,311',
'311,,311,,,,311,311,,,265,265,,265,,265,,216,216,216,216,216,216,216',
'216,216,216,216,216,216,216,216,216,216,216,,,,,182,182,,182,311,,182',
'311,,311,182,182,182,,182,182,182,182,182,,,,,182,182,182,216,182,,',
',182,182,299,299,,299,,,299,,,,299,299,299,,299,299,299,299,299,,,,',
'299,299,299,,299,,,,299,299,179,179,182,179,,182,179,182,,,179,179,179',
',179,179,179,179,179,,,,,179,179,179,,179,,,,179,179,97,97,299,97,,299',
'97,299,,,97,97,97,,97,97,97,97,97,,,,,97,97,97,,97,,,,97,97,98,98,179',
'98,,179,98,179,,,98,98,98,,98,98,98,98,98,,,,,98,98,98,,98,,,,98,98',
'99,99,97,99,,97,99,97,,,99,99,99,,99,99,99,99,99,,,,,99,99,99,,99,,',
',99,99,100,100,98,100,,98,100,98,,,100,100,100,,100,100,100,100,100',
',,,,100,100,100,,100,,,,100,100,101,101,99,101,,99,101,99,,,101,101',
'101,,101,101,101,101,101,,,,,101,101,101,,101,,,,101,101,102,102,100',
'102,,100,102,100,,,102,102,102,,102,102,102,102,102,,,,,102,102,102',
',102,,,,102,102,103,103,101,103,,101,103,101,,,103,103,103,,103,103',
'103,103,103,,,,,103,103,103,,103,,,,103,103,104,104,102,104,,102,104',
'102,,,104,104,104,,104,104,104,104,104,,,,,104,104,104,,104,,,,104,104',
'105,105,103,105,,103,105,103,,,105,105,105,,105,105,105,105,105,,,,',
'105,105,105,,105,,,,105,105,106,106,104,106,,104,106,104,,,106,106,106',
',106,106,106,106,106,,,,,106,106,106,,106,,,,106,106,107,107,105,107',
',105,107,105,,,107,107,107,,107,107,107,107,107,,,,,107,107,107,,107',
',,,107,107,108,108,106,108,,106,108,106,,,108,108,108,,108,108,108,108',
'108,,,,,108,108,108,,108,,,,108,108,109,109,107,109,,107,109,107,,,109',
'109,109,,109,109,109,109,109,,,,,109,109,109,,109,,,,109,109,110,110',
'108,110,,108,110,108,,,110,110,110,,110,110,110,110,110,,,,,110,110',
'110,,110,,,,110,110,111,111,109,111,,109,111,109,,,111,111,111,,111',
'111,111,111,111,,,,,111,111,111,,111,,,,111,111,112,112,110,112,,110',
'112,110,,,112,112,112,,112,112,112,112,112,,,,,112,112,112,,112,,,,112',
'112,113,113,111,113,,111,113,111,,,113,113,113,,113,113,113,113,113',
',,,,113,113,113,,113,,,,113,113,114,114,112,114,,112,114,112,,,114,114',
'114,,114,114,114,114,114,,,,,114,114,114,,114,,,,114,114,115,115,113',
'115,,113,115,113,,,115,115,115,,115,115,115,115,115,,,,,115,115,115',
',115,,,,115,115,116,116,114,116,,114,116,114,,,116,116,116,,116,116',
'116,116,116,,,,,116,116,116,,116,,,,116,116,117,117,115,117,,115,117',
'115,,,117,117,117,,117,117,117,117,117,,,,,117,117,117,,117,,,,117,117',
'118,118,116,118,,116,118,116,,,118,118,118,,118,118,118,118,118,,,,',
'118,118,118,,118,,,,118,118,119,119,117,119,,117,119,117,,,119,119,119',
',119,119,119,119,119,,,,,119,119,119,,119,,,,119,119,120,120,118,120',
',118,120,118,,,120,120,120,,120,120,120,120,120,,,,,120,120,120,,120',
',,,120,120,121,121,119,121,,119,121,119,,,121,121,121,,121,121,121,121',
'121,,,,,121,121,121,,121,,,,121,121,122,122,120,122,,120,122,120,,,122',
'122,122,,122,122,122,122,122,,,,,122,122,122,,122,,,,122,122,123,123',
'121,123,,121,123,121,,,123,123,123,,123,123,123,123,123,,,,,123,123',
'123,,123,,,,123,123,391,391,122,391,,122,391,122,,,391,391,391,,391',
'391,391,391,391,,,,,391,391,391,,391,,,,391,391,125,125,123,125,,123',
'125,123,,,125,125,125,,125,125,125,125,125,,,,,125,125,125,,125,,,,125',
'125,126,126,391,126,,391,126,391,,,126,126,126,,126,126,126,126,126',
',,,,126,126,126,,126,,,,126,126,127,127,125,127,,125,127,125,,,127,127',
'127,,127,127,127,127,127,,,,,127,127,127,,127,,,,127,127,128,128,126',
'128,,126,128,126,,,128,128,128,,128,128,128,128,128,,,,,128,128,128',
',128,,,,128,128,129,129,127,129,,127,129,127,,,129,129,129,,129,129',
'129,129,129,,,,,129,129,129,,129,,,,129,129,130,130,128,130,,128,130',
'128,,,130,130,130,,130,130,130,130,130,,,,,130,130,130,,130,,,,130,130',
'131,131,129,131,,129,131,129,,,131,131,131,,131,131,131,131,131,,,,',
'131,131,131,,131,,,,131,131,132,132,130,132,,130,132,130,,,132,132,132',
',132,132,132,132,132,,,,,132,132,132,,132,,,,132,132,133,133,131,133',
',131,133,131,,,133,133,133,,133,133,133,133,133,,,,,133,133,133,,133',
',,,133,133,134,134,132,134,,132,134,132,,,134,134,134,,134,134,134,134',
'134,,,,,134,134,134,,134,,,,134,134,345,345,133,345,,133,345,133,,,345',
'345,345,,345,345,345,345,345,,,,,345,345,345,,345,,,,345,345,280,280',
'134,280,,134,280,134,,,280,280,280,,280,280,280,280,280,,,,,280,280',
'280,,280,,,,280,280,,,345,345,,345,,345,,217,217,217,217,217,217,217',
'217,217,217,217,217,217,217,217,217,217,217,,,,,300,300,,300,280,,300',
'280,,280,300,300,300,,300,300,300,300,300,,,,,300,300,300,217,300,,',
',300,300,302,302,,302,,,302,,,,302,302,302,,302,302,302,302,302,,,,',
'302,302,302,,302,,,,302,302,173,173,300,173,,300,173,300,,,173,173,173',
',173,173,173,173,173,,,,,173,173,173,,173,,,,173,173,277,277,302,277',
',302,277,302,,,277,277,277,,277,277,277,277,277,,,277,,277,277,277,',
'277,,,,277,277,,,173,173,,173,,173,,218,218,218,218,218,218,218,218',
'218,218,218,218,218,218,218,218,218,218,,,,,170,170,,170,277,,170,277',
',277,170,170,170,,170,170,170,170,170,,,170,,170,170,170,218,170,,,',
'170,170,168,168,,168,,,168,,,,168,168,168,,168,168,168,168,168,,,,,168',
'168,168,,168,,,,168,168,144,144,170,144,,170,144,170,,,144,144,144,',
'144,144,144,144,144,,,,,144,144,144,,144,,,,144,144,,,168,168,,168,',
'168,,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219',
'219,219,,,,,306,306,,306,144,144,306,144,,144,306,306,306,,306,306,306',
'306,306,,,,,306,306,306,219,306,,,,306,306,309,309,,309,,,309,,,,309',
'309,309,,309,309,309,309,309,,,,,309,309,309,,309,,,,309,309,324,324',
'306,324,,306,324,306,,,324,324,324,,324,324,324,324,324,,,324,,324,324',
'324,,324,,,,324,324,310,310,309,310,,309,310,309,,,310,310,310,,310',
'310,310,310,310,,,,,310,310,310,,310,,,,310,310,320,320,324,320,,324',
'320,324,,,320,320,320,,320,320,320,320,320,,,,,320,320,320,,320,,,,320',
'320,162,162,310,162,,310,162,310,,,162,162,162,,162,162,162,162,162',
',,,,162,162,162,,162,,,,162,162,161,161,320,161,,320,161,320,,,161,161',
'161,,161,161,161,161,161,,,,,161,161,161,,161,,,,161,161,,,162,162,',
'162,,162,,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220',
'220,220,220,,,,,183,183,,183,161,,183,161,,161,183,183,183,,183,183',
'183,183,183,,,,,183,183,183,220,183,,,,183,183,139,139,,139,228,228',
'228,228,228,228,139,139,139,,139,139,139,139,139,,,,,139,139,139,,139',
',,,139,139,63,63,183,63,,183,,183,,,63,63,63,,63,63,63,63,,228,,,,63',
'63,63,,63,,,,63,63,57,57,139,57,,139,,,,,57,57,57,,57,57,57,57,,,,,',
'57,57,57,,57,,,,57,57,,,63,,,63,,,,,,,,,,,,,,,195,,,,,,,229,229,229',
'229,229,229,,,57,,,57,195,195,195,195,195,195,195,195,195,195,195,195',
'195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195',
'195,195,195,195,195,195,194,229,,,,,,230,230,230,230,230,230,195,,,',
',,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194',
'194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194',
'194,411,230,,,,,,231,231,231,231,231,231,194,,,,,,411,411,411,411,411',
'411,411,411,411,411,411,411,411,411,411,411,411,411,411,411,411,411',
'411,411,411,411,411,411,411,411,411,411,411,411,411,359,231,,,,,,232',
'232,232,232,232,232,411,,,,,,359,359,359,359,359,359,359,359,359,359',
'359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359',
'359,359,359,359,359,359,359,359,360,232,,,,,,233,233,233,233,233,233',
'359,,,,,,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360',
'360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360',
'360,360,360,425,233,,,,,,234,234,234,234,234,234,360,,,,,,425,425,425',
'425,425,425,425,425,425,425,425,425,425,425,425,425,425,425,425,425',
'425,425,425,425,425,425,425,425,425,425,425,425,425,425,425,361,234',
',,,,235,235,235,235,235,235,,425,,,,,,361,361,361,361,361,361,361,361',
'361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361',
'361,361,361,361,361,361,361,361,361,361,235,224,224,224,224,224,224',
',,,,,,361,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371',
'371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371',
'371,371,371,224,,,,,,,,,,,,,371,374,374,374,374,374,374,374,374,374',
'374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374',
'374,374,374,374,374,374,374,374,374,,,,,,,,,,,,,,374,214,214,214,214',
'214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214',
'214,214,214,214,214,214,214,214,214,214,214,214,214,214,,,,,,,,,,,,',
',214,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221',
'221,221,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222',
'222,222,222,,,,,,,,,,,,,221,,,,,,,,,,,,,,,,,,222,223,223,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,223,223,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,223,293,293,293,293,293,293,293,293,293,293,293,293,293',
'293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293',
'293,293,293,293,293,,,,,,,,,,,,,,293,291,291,291,291,291,291,291,291',
'291,291,291,291,291,291,291,291,291,291,291,291,291,291,291,291,291',
'291,291,291,291,291,291,291,291,291,291,,,,,,,291,,,,,,,291,285,285',
'285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285',
'285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,,,,',
',,285,,,,,,,285,294,294,294,294,294,294,294,294,294,294,294,294,294',
'294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294',
'294,294,294,294,294,,,,,,,,,,,,,,294,292,292,292,292,292,292,292,292',
'292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292',
'292,292,292,292,292,292,292,292,292,292,,,,,,,,,,,,,,292,243,243,243',
'243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243',
'243,243,243,243,243,243,243,243,243,243,,,,,,,,,,,,,,,,,,,243,244,244',
'244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244',
'244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,,,,',
',,,,,,,,,244,245,245,245,245,245,245,245,245,245,245,245,245,245,245',
'245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245',
'245,245,245,245,,,,,,,,,,,,,,245,246,246,246,246,246,246,246,246,246',
'246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246',
'246,246,246,246,246,246,246,246,246,,,,,,,,,,,,,246,246,295,295,295',
'295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295',
'295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,,,,,,,,',
',,,,,295,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248',
'248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248',
'248,248,248,,,,,,,,,,248,,,248,248,190,190,190,190,190,190,190,190,190',
'190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190',
'190,190,190,190,190,190,190,190,190,,,,,,,,,,,,,,190,351,351,351,351',
'351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351',
'351,351,351,351,351,351,351,351,351,351,351,351,351,351,,,,,,,,,,,,',
',351,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350',
'350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350',
'350,350,,,,,,,,,,,,,,350,281,281,281,281,281,281,281,281,281,281,281',
'281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281',
'281,281,281,281,281,281,281,,,,,,,281,,,,,,,281,424,424,424,424,424',
'424,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424',
'424,424,424,424,424,424,424,424,424,424,424,424,424,,,,,,,,,,,,,,424',
'341,341,341,341,341,341,341,341,341,341,341,341,341,341,341,341,341',
'341,341,341,341,341,341,341,341,341,341,341,341,341,341,341,341,341',
'341,,,,,,,,,,,,,,341,335,335,335,335,335,335,335,335,335,335,335,335',
'335,335,335,335,335,335,335,335,335,335,335,335,335,335,335,335,335',
'335,335,335,335,335,335,,,,,,,,,,,,,,335,142,142,142,142,142,142,142',
'142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142',
'142,142,142,142,142,142,142,142,142,142,142,,,,,,,142,,,,,,,142,332',
'332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332',
'332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332',
',,,,,,,,,,,,,332,330,330,330,330,330,330,330,330,330,330,330,330,330',
'330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330',
'330,330,330,330,330,,,,,,,,,,330,,,,330,326,326,326,326,326,326,326',
'326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326',
'326,326,326,326,326,326,326,326,326,326,326,,,,,,,,,,,,,,326,278,278',
'278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278',
'278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,,,,',
',,,,,,,,,278,165,165,165,165,165,165,165,165,165,165,165,165,165,165',
'165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165',
'165,165,165,165,,,,,,,,,,,,,,165,321,321,321,321,321,321,321,321,321',
'321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321',
'321,321,321,321,321,321,321,321,321,,,,,,,,,,321,,,321,321,153,153,153',
'153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153',
'153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,,,,,,,,',
',,,,,153,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156',
'156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156',
'156,156,156,,,,,,,,,,,,,156,156' ]
        racc_action_check = arr = ::Array.new(6352, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    80,   680,    56,   nil,   260,   nil,   nil,   nil,   288,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   590,   nil,
   nil,    -2,   575,   607,   nil,   nil,   572,   nil,  2003,   nil,
   168,   580,   590,   nil,   573,   nil,   nil,   nil,   nil,   200,
   nil,   255,   441,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1118,   nil,  1151,    96,  1217,  4301,  1283,   nil,
  1316,  1349,  1382,  4268,   nil,   251,   nil,   nil,   422,   nil,
    -2,   199,   394,   nil,   nil,   nil,  1706,   nil,  1739,  1772,
  1805,   nil,   nil,  1838,   235,   407,   394,   391,   345,   nil,
   400,   350,    76,   358,   307,   nil,    -7,  2296,  2329,  2362,
  2395,  2428,  2461,  2494,  2527,  2560,  2593,  2626,  2659,  2692,
  2725,  2758,  2791,  2824,  2857,  2890,  2923,  2956,  2989,  3022,
  3055,  3088,  3121,  3154,  1085,  3220,  3253,  3286,  3319,  3352,
  3385,  3418,  3451,  3484,  3517,   154,   943,   321,   314,  4235,
    72,   nil,  5863,   254,  3876,   285,   nil,   225,   223,   nil,
   nil,   164,    75,  6206,   -76,   nil,  6255,   -69,   136,   142,
   nil,  4138,  4105,   455,   nil,  6108,    42,   207,  3843,   nil,
  3810,   273,   102,  3713,   nil,   279,   346,  1406,  1031,  2263,
   363,   nil,  2197,  4202,  1937,  1904,   nil,   nil,   nil,   134,
  5520,   139,   666,   744,  4399,  4345,   441,   463,   471,   126,
   170,   -24,    93,   nil,  1512,   nil,   nil,   nil,   nil,   445,
   535,  1462,  1559,  1656,  4816,  2017,  2147,  3597,  3760,  3890,
  4152,  4865,  4883,  4932,  4705,   731,   737,   860,  4211,  4333,
  4387,  4441,  4495,  4549,  4603,  4656,   296,   654,   396,   527,
   998,   541,   355,  5226,  5275,  5324,  5373,  1019,  5471,   551,
  1184,   nil,   nil,   nil,   nil,   288,  1415,   590,   nil,  1871,
   nil,  1970,   nil,  1052,  2067,  2100,   143,   209,   nil,   nil,
   228,   154,    65,   215,   231,   132,   125,  3746,  6059,   -92,
  3583,  5667,   589,  1250,  1448,  5079,   528,   136,   491,   490,
   487,  5030,  5177,  4981,  5128,  5422,   192,   171,    81,  2230,
  3647,   368,  3680,   528,   nil,   336,  3940,   137,   131,  3973,
  4039,  2133,   nil,   122,   113,     6,   148,   123,   132,   145,
  4072,  6157,   167,   nil,  4006,   nil,  6010,   268,   222,   nil,
  5961,   nil,  5912,   nil,   nil,  5814,   258,   nil,   255,   260,
   nil,  5765,   268,   232,   nil,  3550,   nil,   -26,    -7,   nil,
  5618,  5569,   nil,   948,     3,   nil,   872,   nil,   nil,  4507,
  4561,  4669,   nil,   410,   212,   nil,   416,   nil,   423,  1609,
   nil,  4718,   nil,   nil,  4767,   nil,   nil,   nil,   nil,   237,
   391,   479,   nil,    65,   399,   408,   nil,   nil,   nil,   315,
   498,  3187,   nil,   526,     3,   537,   540,   nil,   524,   nil,
   562,   481,   278,   nil,   536,    -2,   540,  1545,   nil,  1642,
   826,  4453,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -20,
   536,   551,   nil,    99,  5716,  4615,    -7,   618,   660,   627,
   665,   438,    -3,   nil,   -21,   nil,    70,   674,   nil ]

racc_action_default = [
    -1,  -242,    -2,    -3,    -6,    -8,    -9,   -10,   -11,   -12,
   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,
   -23,   -24,   -25,   -26,   -28,   -29,   -30,   -31,  -110,   -33,
   -34,   -35,   -36,   -37,   -38,   -39,   -48,   -49,   -50,   -51,
   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,   -60,   -63,
   -64,   -65,   -69,   -72,   -75,  -242,  -110,  -110,  -111,  -109,
  -110,  -110,  -110,  -110,  -154,  -242,  -163,  -165,  -242,  -169,
  -110,  -110,  -110,  -185,  -186,  -187,  -202,  -204,  -110,  -110,
  -110,  -213,  -214,  -110,  -242,  -242,  -242,  -110,  -240,  -241,
  -242,    -5,    -7,  -242,  -242,  -173,  -110,  -110,  -110,  -110,
  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,
  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,
  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,
  -110,  -110,  -110,  -110,  -110,   -83,  -110,   -27,  -242,  -110,
   -25,   -30,  -242,  -242,  -110,   -80,   -94,   -79,   -81,   -61,
   -62,  -168,  -242,   -70,  -242,   -76,  -242,  -242,  -166,  -170,
  -174,  -110,  -110,  -101,  -102,  -113,   -34,   -36,  -110,   -53,
   -69,  -242,  -242,  -110,  -106,  -112,  -150,  -151,  -152,  -110,
  -242,  -153,  -110,  -110,  -110,  -110,  -167,  -171,  -172,  -242,
  -203,  -199,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -222,
  -228,  -242,  -242,  -238,  -110,   439,    -4,  -166,  -156,  -115,
  -116,  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,
  -126,  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,
  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,
  -146,  -147,  -148,  -149,  -207,  -210,  -242,  -110,  -242,  -242,
   -93,   -97,   -96,  -155,   -40,   -32,  -110,  -242,   -95,  -110,
   -67,  -110,   -73,  -110,  -110,  -110,  -242,  -175,  -176,  -177,
   -28,   -29,   -34,   -35,   -36,   -38,   -51,   -75,  -242,  -242,
  -110,  -113,  -242,  -110,  -110,  -113,  -242,  -242,   -83,  -242,
  -242,  -242,  -157,  -158,  -159,  -160,  -189,  -188,  -192,  -110,
  -110,  -242,  -110,  -110,  -229,  -242,  -110,  -242,  -242,  -110,
  -110,  -110,  -219,  -242,  -242,  -227,  -242,  -242,  -242,  -242,
  -110,  -242,  -242,   -86,   -91,   -87,   -92,   -82,   -84,   -99,
  -242,   -68,   -71,   -74,   -77,   -78,  -242,  -178,  -242,  -242,
  -100,  -114,  -242,  -242,  -103,  -110,  -105,  -242,  -193,  -190,
  -200,  -201,  -205,  -242,  -227,  -208,  -242,  -212,  -215,  -242,
  -242,  -242,  -220,  -242,  -242,  -223,  -242,  -236,  -242,  -110,
  -239,  -211,   -88,   -89,   -90,   -66,   -98,  -179,  -180,  -108,
  -242,  -242,  -191,  -242,  -242,  -194,  -195,  -206,  -230,  -231,
  -242,  -110,  -209,  -242,  -242,  -242,  -242,  -225,  -242,  -224,
  -242,  -242,  -107,  -181,  -192,  -242,  -192,  -110,  -232,  -110,
  -110,  -242,  -216,  -217,  -218,  -221,  -226,  -237,  -104,  -242,
  -242,  -196,  -197,  -242,  -198,  -242,  -233,  -110,  -242,  -192,
  -242,  -110,  -234,  -182,  -242,  -183,  -235,  -242,  -184 ]

racc_goto_table = [
    91,     2,    95,   366,    26,    92,    21,   388,    26,    94,
    21,   301,   305,   145,   334,   203,   148,   386,   151,   169,
   163,   181,   198,   152,   339,   383,   137,   191,   206,   313,
   271,   159,     1,   389,   142,   157,   nil,   nil,   275,   249,
   167,   166,   408,   270,   273,   276,   197,   nil,   nil,   nil,
   347,   nil,   nil,   398,   nil,   nil,   nil,   nil,   153,   nil,
   156,   199,   nil,   nil,   187,   188,   176,   177,   178,   174,
   151,    94,    94,   nil,   422,   269,   nil,   280,   nil,   nil,
   nil,   nil,   190,   nil,   192,   193,   194,   nil,   nil,   195,
    91,   nil,   nil,   nil,   nil,    26,   nil,    21,   nil,   nil,
   208,   nil,   nil,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
   236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   287,   248,   253,   274,   272,   271,   288,   159,   271,
   322,   140,   289,   nil,   275,   257,   419,   275,   423,   270,
   273,   276,   270,   273,   276,   297,   nil,   278,   281,   298,
   307,   308,    93,   282,   285,   nil,   153,   316,   297,   281,
   171,   434,   318,   269,   290,   291,   180,   nil,   292,   293,
   294,   295,   nil,   280,   nil,   338,   nil,   nil,   nil,   nil,
   nil,   315,   nil,   nil,    26,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   269,   nil,   319,   nil,   nil,   nil,   180,
   nil,   172,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   328,   nil,   nil,    93,    93,   189,   327,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   202,   nil,   321,   nil,   145,   326,   148,   nil,   nil,
   274,   272,   180,   274,   272,   330,   nil,   332,   nil,   156,
   335,   nil,   nil,   nil,   nil,   nil,   336,   nil,   nil,   nil,
   nil,   nil,   nil,   156,   nil,   140,   278,   nil,   nil,   341,
   365,   140,   nil,   nil,   nil,   342,   140,   nil,   nil,   nil,
   nil,   nil,   140,   nil,   354,   350,   351,    26,   353,    21,
   nil,   nil,   356,    91,   nil,   359,   360,   361,   nil,   328,
   nil,   nil,   nil,   381,   nil,   327,   371,   nil,   nil,   nil,
   374,   nil,   nil,   nil,   nil,   393,   394,   395,   nil,   396,
   397,   nil,   399,   nil,   400,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    91,   nil,   nil,   nil,   380,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   416,   nil,   nil,   nil,   nil,   nil,
   401,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   428,   nil,   411,   nil,   430,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   437,   426,   nil,   424,    26,   425,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    91,   nil,   nil,   nil,   432,   nil,
    91,    26,   436,    21,    91,    26,   nil,    21 ]

racc_goto_check = [
     4,     2,    59,    39,    27,     2,    21,    70,    27,    41,
    21,    68,    68,    48,    47,    56,    48,    66,    49,    40,
    55,    57,    43,    44,    36,    65,    24,    67,     3,    69,
    26,    60,     1,    71,    21,    53,   nil,   nil,    34,    51,
    32,    30,    70,    25,    31,    37,    40,   nil,   nil,   nil,
    63,   nil,   nil,    39,   nil,   nil,   nil,   nil,    21,   nil,
    21,    64,   nil,   nil,    59,    59,    21,    21,    21,    54,
    49,    41,    41,   nil,    66,    61,   nil,    61,   nil,   nil,
   nil,   nil,    21,   nil,    21,    21,    21,   nil,   nil,    21,
     4,   nil,   nil,   nil,   nil,    27,   nil,    21,   nil,   nil,
    27,   nil,   nil,    21,    21,    21,    21,    21,    21,    21,
    21,    21,    21,    21,    21,    21,    21,    21,    21,    21,
    21,    21,    21,    21,    21,    21,    21,    21,    21,    21,
    21,    21,    21,    21,    21,    21,    21,    21,    21,    21,
    21,    44,    21,    27,    32,    30,    26,    49,    60,    26,
    51,    22,    53,   nil,    34,    54,    63,    34,    63,    25,
    31,    37,    25,    31,    37,    60,   nil,    21,    21,    53,
    64,    64,    52,    54,    21,   nil,    21,    64,    60,    21,
    22,    63,    53,    61,    54,    21,    22,   nil,    21,    21,
    21,    21,   nil,    61,   nil,    61,   nil,   nil,   nil,   nil,
   nil,     2,   nil,   nil,    27,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,    61,   nil,    54,   nil,   nil,   nil,    22,
   nil,    52,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    49,   nil,   nil,    52,    52,    52,    48,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    52,   nil,    21,   nil,    48,    21,    48,   nil,   nil,
    32,    30,    22,    32,    30,    21,   nil,    21,   nil,    21,
    21,   nil,   nil,   nil,   nil,   nil,    54,   nil,   nil,   nil,
   nil,   nil,   nil,    21,   nil,    22,    21,   nil,   nil,    21,
    64,    22,   nil,   nil,   nil,    54,    22,   nil,   nil,   nil,
   nil,   nil,    22,   nil,     2,    21,    21,    27,    21,    21,
   nil,   nil,    21,     4,   nil,    21,    21,    21,   nil,    49,
   nil,   nil,   nil,    64,   nil,    48,    21,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,    64,    64,    64,   nil,    64,
    64,   nil,    64,   nil,    64,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     4,   nil,   nil,   nil,    54,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    64,   nil,   nil,   nil,   nil,   nil,
    54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    64,   nil,    21,   nil,    64,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    64,     2,   nil,    21,    27,    21,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,     2,   nil,
     4,    27,     2,    21,     4,    27,   nil,    21 ]

racc_goto_pointer = [
   nil,    32,     1,   -63,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     6,   123,   nil,     3,  -118,  -131,     4,   nil,   nil,
   -16,  -117,   -17,   nil,  -123,   nil,  -256,  -116,   nil,  -311,
   -38,     1,   nil,   -62,   -29,   nil,   nil,  -249,   -18,   -24,
   nil,   -97,   164,   -20,    11,   -36,   -72,   -42,   nil,    -6,
   -24,   -84,   nil,  -248,   -24,  -323,  -331,   -49,  -181,  -170,
  -347,  -321 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,   165,    22,    23,   nil,    24,    25,   141,    27,    29,
    30,    31,    32,    33,    34,    35,   279,    39,    38,    40,
    41,    42,    51,    66,   nil,    53,   154,   155,   147,   135,
    67,   nil,    55,   nil,   286,   175,   nil,    64,    65,    69,
   267,   160,    72,   nil,   304,   nil,   nil,   nil,   nil,   nil,
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 98, :_reduce_1,
  1, 98, :_reduce_2,
  1, 99, :_reduce_3,
  3, 99, :_reduce_4,
  2, 99, :_reduce_5,
  1, 99, :_reduce_6,
  2, 99, :_reduce_7,
  1, 100, :_reduce_8,
  1, 100, :_reduce_9,
  1, 100, :_reduce_10,
  1, 100, :_reduce_11,
  1, 100, :_reduce_12,
  1, 100, :_reduce_13,
  1, 100, :_reduce_14,
  1, 100, :_reduce_15,
  1, 100, :_reduce_16,
  1, 100, :_reduce_17,
  1, 100, :_reduce_18,
  1, 100, :_reduce_19,
  1, 100, :_reduce_20,
  1, 100, :_reduce_21,
  1, 100, :_reduce_22,
  1, 100, :_reduce_23,
  1, 100, :_reduce_24,
  1, 118, :_reduce_25,
  1, 118, :_reduce_26,
  2, 118, :_reduce_27,
  1, 118, :_reduce_28,
  1, 118, :_reduce_29,
  1, 118, :_reduce_30,
  1, 118, :_reduce_31,
  3, 118, :_reduce_32,
  1, 119, :_reduce_33,
  1, 119, :_reduce_34,
  1, 119, :_reduce_35,
  1, 119, :_reduce_36,
  1, 119, :_reduce_37,
  1, 119, :_reduce_38,
  1, 119, :_reduce_39,
  3, 119, :_reduce_40,
  1, 133, :_reduce_41,
  1, 133, :_reduce_42,
  1, 133, :_reduce_43,
  1, 133, :_reduce_44,
  1, 133, :_reduce_45,
  1, 133, :_reduce_46,
  1, 133, :_reduce_47,
  1, 101, :_reduce_48,
  1, 101, :_reduce_49,
  1, 130, :_reduce_50,
  1, 130, :_reduce_51,
  1, 130, :_reduce_52,
  1, 130, :_reduce_53,
  1, 130, :_reduce_54,
  1, 130, :_reduce_55,
  1, 130, :_reduce_56,
  1, 130, :_reduce_57,
  1, 135, :_reduce_58,
  1, 134, :_reduce_59,
  1, 134, :_reduce_60,
  2, 134, :_reduce_61,
  2, 134, :_reduce_62,
  1, 136, :_reduce_63,
  1, 138, :_reduce_64,
  1, 137, :_reduce_65,
  5, 140, :_reduce_66,
  3, 139, :_reduce_67,
  4, 139, :_reduce_68,
  0, 141, :_reduce_69,
  1, 141, :_reduce_70,
  3, 141, :_reduce_71,
  1, 120, :_reduce_72,
  3, 142, :_reduce_73,
  4, 142, :_reduce_74,
  0, 143, :_reduce_75,
  1, 143, :_reduce_76,
  3, 143, :_reduce_77,
  3, 144, :_reduce_78,
  2, 127, :_reduce_79,
  2, 127, :_reduce_80,
  2, 127, :_reduce_81,
  4, 127, :_reduce_82,
  2, 128, :_reduce_83,
  4, 128, :_reduce_84,
  2, 147, :_reduce_85,
  3, 146, :_reduce_86,
  3, 146, :_reduce_87,
  4, 146, :_reduce_88,
  4, 146, :_reduce_89,
  3, 148, :_reduce_90,
  2, 148, :_reduce_91,
  2, 148, :_reduce_92,
  1, 148, :_reduce_93,
  1, 145, :_reduce_94,
  2, 145, :_reduce_95,
  2, 121, :_reduce_96,
  2, 121, :_reduce_97,
  5, 131, :_reduce_98,
  4, 131, :_reduce_99,
  4, 131, :_reduce_100,
  2, 131, :_reduce_101,
  2, 131, :_reduce_102,
  4, 131, :_reduce_103,
  5, 153, :_reduce_104,
  4, 114, :_reduce_105,
  2, 114, :_reduce_106,
  6, 102, :_reduce_107,
  5, 102, :_reduce_108,
  1, 149, :_reduce_109,
  0, 149, :_reduce_110,
  0, 151, :_reduce_111,
  1, 151, :_reduce_112,
  1, 152, :_reduce_113,
  3, 152, :_reduce_114,
  3, 122, :_reduce_115,
  3, 122, :_reduce_116,
  3, 122, :_reduce_117,
  3, 122, :_reduce_118,
  3, 122, :_reduce_119,
  3, 122, :_reduce_120,
  3, 122, :_reduce_121,
  3, 122, :_reduce_122,
  3, 122, :_reduce_123,
  3, 122, :_reduce_124,
  3, 122, :_reduce_125,
  3, 122, :_reduce_126,
  3, 122, :_reduce_127,
  3, 122, :_reduce_128,
  3, 122, :_reduce_129,
  3, 122, :_reduce_130,
  3, 122, :_reduce_131,
  3, 122, :_reduce_132,
  3, 122, :_reduce_133,
  3, 122, :_reduce_134,
  3, 122, :_reduce_135,
  3, 122, :_reduce_136,
  3, 122, :_reduce_137,
  3, 122, :_reduce_138,
  3, 122, :_reduce_139,
  3, 122, :_reduce_140,
  3, 122, :_reduce_141,
  3, 122, :_reduce_142,
  3, 122, :_reduce_143,
  3, 122, :_reduce_144,
  3, 122, :_reduce_145,
  3, 122, :_reduce_146,
  3, 122, :_reduce_147,
  3, 122, :_reduce_148,
  3, 122, :_reduce_149,
  2, 126, :_reduce_150,
  2, 126, :_reduce_151,
  2, 126, :_reduce_152,
  2, 124, :_reduce_153,
  1, 124, :_reduce_154,
  3, 115, :_reduce_155,
  3, 115, :_reduce_156,
  3, 154, :_reduce_157,
  3, 154, :_reduce_158,
  3, 154, :_reduce_159,
  3, 154, :_reduce_160,
  1, 155, :_reduce_161,
  1, 155, :_reduce_162,
  1, 155, :_reduce_163,
  1, 155, :_reduce_164,
  1, 155, :_reduce_165,
  2, 156, :_reduce_166,
  2, 156, :_reduce_167,
  2, 156, :_reduce_168,
  1, 129, :_reduce_169,
  2, 129, :_reduce_170,
  2, 105, :_reduce_171,
  2, 105, :_reduce_172,
  2, 105, :_reduce_173,
  1, 157, :_reduce_174,
  2, 157, :_reduce_175,
  2, 157, :_reduce_176,
  2, 157, :_reduce_177,
  3, 158, :_reduce_178,
  4, 158, :_reduce_179,
  4, 158, :_reduce_180,
  6, 103, :_reduce_181,
  9, 103, :_reduce_182,
  9, 103, :_reduce_183,
  11, 103, :_reduce_184,
  1, 159, :_reduce_185,
  1, 159, :_reduce_186,
  1, 159, :_reduce_187,
  1, 150, :_reduce_188,
  1, 150, :_reduce_189,
  1, 160, :_reduce_190,
  2, 160, :_reduce_191,
  0, 160, :_reduce_192,
  0, 162, :_reduce_193,
  1, 162, :_reduce_194,
  1, 162, :_reduce_195,
  3, 162, :_reduce_196,
  3, 162, :_reduce_197,
  3, 163, :_reduce_198,
  2, 104, :_reduce_199,
  4, 104, :_reduce_200,
  4, 104, :_reduce_201,
  0, 164, :_reduce_202,
  1, 164, :_reduce_203,
  1, 113, :_reduce_204,
  4, 116, :_reduce_205,
  5, 116, :_reduce_206,
  3, 116, :_reduce_207,
  4, 117, :_reduce_208,
  5, 117, :_reduce_209,
  3, 117, :_reduce_210,
  5, 123, :_reduce_211,
  4, 108, :_reduce_212,
  1, 112, :_reduce_213,
  1, 112, :_reduce_214,
  4, 109, :_reduce_215,
  6, 107, :_reduce_216,
  6, 107, :_reduce_217,
  6, 107, :_reduce_218,
  3, 110, :_reduce_219,
  4, 110, :_reduce_220,
  6, 110, :_reduce_221,
  0, 166, :_reduce_222,
  2, 166, :_reduce_223,
  3, 166, :_reduce_224,
  3, 166, :_reduce_225,
  4, 166, :_reduce_226,
  2, 161, :_reduce_227,
  1, 161, :_reduce_228,
  1, 165, :_reduce_229,
  3, 165, :_reduce_230,
  3, 165, :_reduce_231,
  4, 165, :_reduce_232,
  3, 167, :_reduce_233,
  4, 168, :_reduce_234,
  5, 168, :_reduce_235,
  4, 111, :_reduce_236,
  6, 111, :_reduce_237,
  2, 132, :_reduce_238,
  4, 125, :_reduce_239,
  1, 125, :_reduce_240,
  1, 106, :_reduce_241 ]

racc_reduce_n = 242

racc_shift_n = 439

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :ELSEIF => 4,
  :THEN => 5,
  :UNLESS => 6,
  :END => 7,
  :WHILE => 8,
  :UNTIL => 9,
  :BREAK => 10,
  :CONTINUE => 11,
  :TRY => 12,
  :CATCH => 13,
  :FINALLY => 14,
  :FOR => 15,
  :IN => 16,
  :DEF => 17,
  :DEF_BANG => 18,
  :SPLAT => 19,
  :CALL => 20,
  :BUILTIN_COMMAND => 21,
  :CLASS => 22,
  :NEW => 23,
  :DEFM => 24,
  :DEFM_BANG => 25,
  :SUPER => 26,
  :RIML_COMMAND => 27,
  :RETURN => 28,
  :NEWLINE => 29,
  :NUMBER => 30,
  :STRING_D => 31,
  :STRING_S => 32,
  :EX_LITERAL => 33,
  :REGEXP => 34,
  :TRUE => 35,
  :FALSE => 36,
  :NIL => 37,
  :LET => 38,
  :UNLET => 39,
  :UNLET_BANG => 40,
  :IDENTIFIER => 41,
  :DICT_VAL => 42,
  :SCOPE_MODIFIER => 43,
  :SCOPE_MODIFIER_LITERAL => 44,
  :SPECIAL_VAR_PREFIX => 45,
  :FINISH => 46,
  "!" => 47,
  "*" => 48,
  "/" => 49,
  "%" => 50,
  "+" => 51,
  "-" => 52,
  "." => 53,
  ">" => 54,
  ">#" => 55,
  ">?" => 56,
  "<" => 57,
  "<#" => 58,
  "<?" => 59,
  ">=" => 60,
  ">=#" => 61,
  ">=?" => 62,
  "<=" => 63,
  "<=#" => 64,
  "<=?" => 65,
  "==" => 66,
  "==?" => 67,
  "==#" => 68,
  "=~" => 69,
  "=~?" => 70,
  "=~#" => 71,
  "!~" => 72,
  "!~?" => 73,
  "!~#" => 74,
  "!=" => 75,
  "!=?" => 76,
  "!=#" => 77,
  :IS => 78,
  :ISNOT => 79,
  "&&" => 80,
  "||" => 81,
  "?" => 82,
  "=" => 83,
  "+=" => 84,
  "-=" => 85,
  ".=" => 86,
  "," => 87,
  "(" => 88,
  ")" => 89,
  ";" => 90,
  "[" => 91,
  "]" => 92,
  "{" => 93,
  "}" => 94,
  ":" => 95,
  "===" => 96 }

racc_nt_base = 97

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "ELSEIF",
  "THEN",
  "UNLESS",
  "END",
  "WHILE",
  "UNTIL",
  "BREAK",
  "CONTINUE",
  "TRY",
  "CATCH",
  "FINALLY",
  "FOR",
  "IN",
  "DEF",
  "DEF_BANG",
  "SPLAT",
  "CALL",
  "BUILTIN_COMMAND",
  "CLASS",
  "NEW",
  "DEFM",
  "DEFM_BANG",
  "SUPER",
  "RIML_COMMAND",
  "RETURN",
  "NEWLINE",
  "NUMBER",
  "STRING_D",
  "STRING_S",
  "EX_LITERAL",
  "REGEXP",
  "TRUE",
  "FALSE",
  "NIL",
  "LET",
  "UNLET",
  "UNLET_BANG",
  "IDENTIFIER",
  "DICT_VAL",
  "SCOPE_MODIFIER",
  "SCOPE_MODIFIER_LITERAL",
  "SPECIAL_VAR_PREFIX",
  "FINISH",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\".\"",
  "\">\"",
  "\">#\"",
  "\">?\"",
  "\"<\"",
  "\"<#\"",
  "\"<?\"",
  "\">=\"",
  "\">=#\"",
  "\">=?\"",
  "\"<=\"",
  "\"<=#\"",
  "\"<=?\"",
  "\"==\"",
  "\"==?\"",
  "\"==#\"",
  "\"=~\"",
  "\"=~?\"",
  "\"=~#\"",
  "\"!~\"",
  "\"!~?\"",
  "\"!~#\"",
  "\"!=\"",
  "\"!=?\"",
  "\"!=#\"",
  "IS",
  "ISNOT",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\"=\"",
  "\"+=\"",
  "\"-=\"",
  "\".=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\":\"",
  "\"===\"",
  "$start",
  "Root",
  "Statements",
  "Statement",
  "Terminator",
  "ExplicitCall",
  "Def",
  "Return",
  "UnletVariable",
  "ExLiteral",
  "For",
  "While",
  "Until",
  "Try",
  "ClassDefinition",
  "LoopKeyword",
  "EndScript",
  "RimlCommand",
  "MultiAssign",
  "If",
  "Unless",
  "Expression",
  "ExpressionWithoutDictLiteral",
  "Dictionary",
  "DictGetWithDotLiteral",
  "BinaryOperator",
  "Ternary",
  "Assign",
  "Super",
  "UnaryOperator",
  "DictGet",
  "ListOrDictGet",
  "AllVariableRetrieval",
  "LiteralWithoutDictLiteral",
  "Call",
  "ObjectInstantiation",
  "PossibleStringValue",
  "String",
  "Number",
  "Regexp",
  "List",
  "ScopeModifierLiteral",
  "ListLiteral",
  "ListUnpack",
  "ListItems",
  "DictionaryLiteral",
  "DictItems",
  "DictItem",
  "DictGetWithDot",
  "ListOrDictGetWithBrackets",
  "ListOrDictGetAssign",
  "SubList",
  "Scope",
  "DefCallIdentifier",
  "ArgList",
  "ArgListWithoutNothing",
  "ObjectInstantiationCall",
  "AssignExpression",
  "AssignLHS",
  "VariableRetrieval",
  "CurlyBraceName",
  "CurlyBraceVarPart",
  "FunctionType",
  "DefKeywords",
  "Block",
  "ParamList",
  "DefaultParam",
  "Returnable",
  "IfBlock",
  "Catch",
  "ElseBlock",
  "ElseifBlock" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_1(val, _values, result)
     result = Riml::Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_3(val, _values, result)
     result = Riml::Nodes.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_6(val, _values, result)
     result = Riml::Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_7(val, _values, result)
     result = Riml::Nodes.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_21(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_26(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_27(val, _values, result)
     result = Riml::DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_28(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_32(val, _values, result)
     result = Riml::WrapInParensNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_33(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_34(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 87)
  def _reduce_35(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_37(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_38(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_40(val, _values, result)
     result = Riml::WrapInParensNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_41(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_42(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_45(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_47(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_48(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_49(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_50(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_51(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_52(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_53(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_55(val, _values, result)
     result = Riml::TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_56(val, _values, result)
     result = Riml::FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_57(val, _values, result)
     result = Riml::NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_58(val, _values, result)
     result = Riml::NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_59(val, _values, result)
     result = Riml::StringNode.new(val[0], :s) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_60(val, _values, result)
     result = Riml::StringNode.new(val[0], :d) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_61(val, _values, result)
     result = Riml::StringLiteralConcatNode.new(val[0], Riml::StringNode.new(val[1], :s)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_62(val, _values, result)
     result = Riml::StringLiteralConcatNode.new(val[0], Riml::StringNode.new(val[1], :d)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 134)
  def _reduce_63(val, _values, result)
     result = Riml::RegexpNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_64(val, _values, result)
     result = Riml::ScopeModifierLiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_65(val, _values, result)
     result = Riml::ListNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 146)
  def _reduce_66(val, _values, result)
     result = Riml::ListUnpackNode.new(val[1] << val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_67(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_68(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_69(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_70(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_71(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 161)
  def _reduce_72(val, _values, result)
     result = Riml::DictionaryNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_73(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_74(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_75(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_76(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_77(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_78(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_79(val, _values, result)
     result = Riml::DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_80(val, _values, result)
     result = Riml::DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_81(val, _values, result)
     result = Riml::DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_82(val, _values, result)
     result = Riml::DictGetDotNode.new(Riml::WrapInParensNode.new(val[1]), val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 190)
  def _reduce_83(val, _values, result)
     result = Riml::ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_84(val, _values, result)
     result = Riml::ListOrDictGetNode.new(Riml::WrapInParensNode.new(val[1]), val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 195)
  def _reduce_85(val, _values, result)
     result = Riml::ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 199)
  def _reduce_86(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 200)
  def _reduce_87(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 201)
  def _reduce_88(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_89(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 206)
  def _reduce_90(val, _values, result)
     result = Riml::SublistNode.new([val[0], Riml::LiteralNode.new(' : '), val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 207)
  def _reduce_91(val, _values, result)
     result = Riml::SublistNode.new([val[0], Riml::LiteralNode.new(' :')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_92(val, _values, result)
     result = Riml::SublistNode.new([Riml::LiteralNode.new(': '), val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 209)
  def _reduce_93(val, _values, result)
     result = Riml::SublistNode.new([Riml::LiteralNode.new(':')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 214)
  def _reduce_95(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_96(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 219)
  def _reduce_97(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 223)
  def _reduce_98(val, _values, result)
     result = Riml::CallNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 224)
  def _reduce_99(val, _values, result)
     result = Riml::CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 225)
  def _reduce_100(val, _values, result)
     result = Riml::CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_101(val, _values, result)
     result = Riml::CallNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 227)
  def _reduce_102(val, _values, result)
     result = Riml::CallNode.new(nil, val[0], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 228)
  def _reduce_103(val, _values, result)
     result = Riml::ExplicitCallNode.new(nil, nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 232)
  def _reduce_104(val, _values, result)
     result = Riml::CallNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_105(val, _values, result)
     result = Riml::RimlCommandNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_106(val, _values, result)
     result = Riml::RimlCommandNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 241)
  def _reduce_107(val, _values, result)
     result = Riml::ExplicitCallNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 242)
  def _reduce_108(val, _values, result)
     result = Riml::ExplicitCallNode.new(nil, val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_109(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 247)
  def _reduce_110(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 251)
  def _reduce_111(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_112(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 256)
  def _reduce_113(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_114(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 261)
  def _reduce_115(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_116(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 264)
  def _reduce_117(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 265)
  def _reduce_118(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 266)
  def _reduce_119(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 269)
  def _reduce_120(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 271)
  def _reduce_121(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 272)
  def _reduce_122(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 273)
  def _reduce_123(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 275)
  def _reduce_124(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 276)
  def _reduce_125(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 277)
  def _reduce_126(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 279)
  def _reduce_127(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_128(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_129(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 283)
  def _reduce_130(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 284)
  def _reduce_131(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 285)
  def _reduce_132(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 287)
  def _reduce_133(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 288)
  def _reduce_134(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 289)
  def _reduce_135(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 291)
  def _reduce_136(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_137(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_138(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 295)
  def _reduce_139(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 296)
  def _reduce_140(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 297)
  def _reduce_141(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 299)
  def _reduce_142(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 300)
  def _reduce_143(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 301)
  def _reduce_144(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 302)
  def _reduce_145(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 303)
  def _reduce_146(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 304)
  def _reduce_147(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_148(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 307)
  def _reduce_149(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 311)
  def _reduce_150(val, _values, result)
     result = Riml::UnaryOperatorNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 312)
  def _reduce_151(val, _values, result)
     result = Riml::UnaryOperatorNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 313)
  def _reduce_152(val, _values, result)
     result = Riml::UnaryOperatorNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_153(val, _values, result)
     result = Riml::AssignNode.new(val[1][0], val[1][1], val[1][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 319)
  def _reduce_154(val, _values, result)
     result = Riml::AssignNode.new(val[0][0], val[0][1], val[0][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 323)
  def _reduce_155(val, _values, result)
     result = Riml::MultiAssignNode.new([val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 324)
  def _reduce_156(val, _values, result)
     val[0].assigns << val[2]; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 329)
  def _reduce_157(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 330)
  def _reduce_158(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 331)
  def _reduce_159(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 332)
  def _reduce_160(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 336)
  def _reduce_161(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 337)
  def _reduce_162(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 338)
  def _reduce_163(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 339)
  def _reduce_164(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 340)
  def _reduce_165(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 345)
  def _reduce_166(val, _values, result)
     result = Riml::GetVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 346)
  def _reduce_167(val, _values, result)
     result = Riml::GetSpecialVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 347)
  def _reduce_168(val, _values, result)
     result = Riml::GetVariableByScopeAndDictNameNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 351)
  def _reduce_169(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 352)
  def _reduce_170(val, _values, result)
     result = Riml::GetCurlyBraceNameNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 356)
  def _reduce_171(val, _values, result)
     result = Riml::UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_172(val, _values, result)
     result = Riml::UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 358)
  def _reduce_173(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 362)
  def _reduce_174(val, _values, result)
     result = Riml::CurlyBraceVariable.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 363)
  def _reduce_175(val, _values, result)
     result = Riml::CurlyBraceVariable.new([ Riml::CurlyBracePart.new(val[0]), val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 364)
  def _reduce_176(val, _values, result)
     result = val[0] << Riml::CurlyBracePart.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 365)
  def _reduce_177(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 369)
  def _reduce_178(val, _values, result)
     result = Riml::CurlyBracePart.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 370)
  def _reduce_179(val, _values, result)
     result = Riml::CurlyBracePart.new([val[1], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 371)
  def _reduce_180(val, _values, result)
     result = Riml::CurlyBracePart.new([val[1], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 377)
  def _reduce_181(val, _values, result)
     result = Riml.const_get(val[0]).new('!', val[1], val[2], [], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_182(val, _values, result)
     result = Riml.const_get(val[0]).new('!', val[1], val[2], val[4], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 379)
  def _reduce_183(val, _values, result)
     result = Riml.const_get(val[0]).new('!', val[1], val[2], [val[4]], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 380)
  def _reduce_184(val, _values, result)
     result = Riml.const_get(val[0]).new('!', val[1], val[2], val[4] << val[6], val[8], val[9]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 384)
  def _reduce_185(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 385)
  def _reduce_186(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 386)
  def _reduce_187(val, _values, result)
     result = "DefMethodNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 391)
  def _reduce_188(val, _values, result)
     result = Riml::GetCurlyBraceNameNode.new('', val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 392)
  def _reduce_189(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 397)
  def _reduce_190(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 398)
  def _reduce_191(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 399)
  def _reduce_192(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 403)
  def _reduce_193(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 404)
  def _reduce_194(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 405)
  def _reduce_195(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 406)
  def _reduce_196(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 407)
  def _reduce_197(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 411)
  def _reduce_198(val, _values, result)
     result = Riml::DefaultParamNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 415)
  def _reduce_199(val, _values, result)
     result = Riml::ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 416)
  def _reduce_200(val, _values, result)
     result = Riml::IfNode.new(val[3], Nodes.new([ReturnNode.new(val[1])])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 417)
  def _reduce_201(val, _values, result)
     result = Riml::UnlessNode.new(val[3], Nodes.new([ReturnNode.new(val[1])])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 421)
  def _reduce_202(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 422)
  def _reduce_203(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 426)
  def _reduce_204(val, _values, result)
     result = Riml::FinishNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 431)
  def _reduce_205(val, _values, result)
     result = Riml::IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 432)
  def _reduce_206(val, _values, result)
     result = Riml::IfNode.new(val[1], Riml::Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 433)
  def _reduce_207(val, _values, result)
     result = Riml::IfNode.new(val[2], Riml::Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 437)
  def _reduce_208(val, _values, result)
     result = Riml::UnlessNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 438)
  def _reduce_209(val, _values, result)
     result = Riml::UnlessNode.new(val[1], Riml::Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 439)
  def _reduce_210(val, _values, result)
     result = Riml::UnlessNode.new(val[2], Riml::Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 443)
  def _reduce_211(val, _values, result)
     result = Riml::TernaryOperatorNode.new([val[0], val[2], val[4]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 447)
  def _reduce_212(val, _values, result)
     result = Riml::WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 451)
  def _reduce_213(val, _values, result)
     result = Riml::BreakNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 452)
  def _reduce_214(val, _values, result)
     result = Riml::ContinueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 456)
  def _reduce_215(val, _values, result)
     result = Riml::UntilNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 460)
  def _reduce_216(val, _values, result)
     result = Riml::ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 461)
  def _reduce_217(val, _values, result)
     result = Riml::ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 462)
  def _reduce_218(val, _values, result)
     result = Riml::ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 466)
  def _reduce_219(val, _values, result)
     result = Riml::TryNode.new(val[1], nil, nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 467)
  def _reduce_220(val, _values, result)
     result = Riml::TryNode.new(val[1], val[2], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 468)
  def _reduce_221(val, _values, result)
     result = Riml::TryNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 472)
  def _reduce_222(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 473)
  def _reduce_223(val, _values, result)
     result = [ Riml::CatchNode.new(nil, val[1]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 474)
  def _reduce_224(val, _values, result)
     result = [ Riml::CatchNode.new(val[1], val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 475)
  def _reduce_225(val, _values, result)
     result = val[0] << Riml::CatchNode.new(nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 476)
  def _reduce_226(val, _values, result)
     result = val[0] << Riml::CatchNode.new(val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 483)
  def _reduce_227(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 484)
  def _reduce_228(val, _values, result)
     result = Riml::Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 488)
  def _reduce_229(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 489)
  def _reduce_230(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 490)
  def _reduce_231(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 491)
  def _reduce_232(val, _values, result)
     result = val[1] << val[2] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 495)
  def _reduce_233(val, _values, result)
     result = Riml::ElseNode.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 499)
  def _reduce_234(val, _values, result)
     result = Riml::Nodes.new([Riml::ElseifNode.new(val[1], val[3])]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 500)
  def _reduce_235(val, _values, result)
     result = val[0] << Riml::ElseifNode.new(val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 504)
  def _reduce_236(val, _values, result)
     result = Riml::ClassDefinitionNode.new(val[1], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 505)
  def _reduce_237(val, _values, result)
     result = Riml::ClassDefinitionNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 509)
  def _reduce_238(val, _values, result)
     result = Riml::ObjectInstantiationNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 513)
  def _reduce_239(val, _values, result)
     result = Riml::SuperNode.new(val[2], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 514)
  def _reduce_240(val, _values, result)
     result = Riml::SuperNode.new([], false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 518)
  def _reduce_241(val, _values, result)
     result = Riml::ExLiteralNode.new(val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
