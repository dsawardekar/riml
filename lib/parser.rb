#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require File.expand_path("../ast_rewriter", __FILE__)
  require File.expand_path("../errors", __FILE__)
module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 464)
  # This code will be put as-is in the parser class

  attr_accessor :ast_rewriter

  # parses tokens or code into output nodes
  def parse(object, ast_rewriter = AST_Rewriter.new)
    if tokens?(object)
      @tokens = object
    elsif code?(object)
      @lexer = Riml::Lexer.new(object)
    end

    begin
      ast = do_parse
    rescue Racc::ParseError => e
      raise unless @lexer
      raise Riml::ParseError,  "line #{@lexer.lineno}: #{e.message}"
    end

    @ast_rewriter = ast_rewriter
    return ast unless @ast_rewriter
    @ast_rewriter.ast = ast
    @ast_rewriter.rewrite
  end

  # get the next token from either the list of tokens provided, or
  # the lexer getting the next token
  def next_token
    return @tokens.shift unless @lexer
    @lexer.next_token
  end

  private
  def tokens?(object)
    Array === object
  end

  def code?(object)
    String === object
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'-202,34,-202,-202,-202,-202,-202,-202,187,256,46,48,47,-202,-202,50',
'43,44,45,34,243,178,34,300,34,51,-93,148,60,-202,67,181,310,239,355',
'60,148,67,312,311,-91,238,-90,-91,-91,-90,-90,-91,128,-90,48,47,129',
'-91,-91,-90,-90,334,335,269,274,150,150,35,36,271,247,-160,283,-91,299',
'-90,53,53,34,55,286,334,350,-93,150,35,36,34,35,36,35,36,-202,150,-202',
'-202,-202,240,-202,123,124,-202,121,122,125,109,110,111,115,116,117',
'112,113,114,118,119,120,96,98,97,103,105,104,106,108,107,100,102,101',
'126,127,95,94,130,264,-91,-91,-90,-90,241,35,36,329,93,136,57,181,85',
'99,35,36,247,50,344,46,48,47,49,261,50,43,44,45,64,316,330,93,-161,60',
'51,67,99,61,242,123,124,62,63,123,124,235,121,122,125,109,110,111,115',
'116,117,112,113,114,118,119,120,96,98,97,103,105,104,106,108,107,100',
'102,101,126,127,95,94,130,33,237,359,315,53,93,55,236,192,93,99,76,323',
'324,99,77,234,78,81,79,80,83,123,124,82,360,71,72,307,58,57,84,85,73',
'133,86,59,74,34,46,48,47,49,87,50,43,44,45,64,68,69,-93,133,60,51,67',
'75,61,181,233,93,62,63,181,50,99,93,123,124,93,347,99,346,306,99,-143',
'-143,-143,-143,-141,-141,-141,-141,231,248,-141,-141,-141,-141,60,131',
'67,231,-140,-140,-140,-140,189,33,76,35,36,53,77,55,78,81,79,80,83,185',
'93,82,184,71,72,99,58,57,84,85,73,181,86,59,74,34,46,48,47,49,87,50',
'43,44,45,64,68,69,247,181,60,51,67,75,61,247,181,325,62,63,-142,-142',
'-142,-142,123,124,182,121,122,125,109,110,111,115,116,117,112,113,114',
'118,119,120,164,165,166,167,60,247,67,297,247,247,317,295,181,33,76',
'35,36,53,77,55,78,81,79,80,83,60,93,82,304,71,72,99,58,57,84,85,73,345',
'86,59,74,34,46,48,47,49,87,50,43,44,45,64,68,69,-93,247,60,51,67,75',
'61,247,348,292,62,63,247,60,322,67,123,124,301,121,122,125,109,110,111',
'115,116,117,112,113,114,118,119,120,351,243,353,354,319,181,357,242',
'300,267,300,168,268,33,76,35,36,53,77,55,78,81,79,80,83,296,93,82,181',
'71,72,99,58,57,84,85,73,366,86,59,74,34,46,48,47,49,87,50,43,44,45,64',
'68,69,181,138,60,51,67,75,61,242,243,370,62,63,300,372,291,280,123,124',
'181,121,122,125,109,110,111,115,116,117,112,113,114,118,119,120,88,375',
',,,,,,,,,,,33,76,35,36,53,77,55,78,81,79,80,83,,93,82,,71,72,99,58,57',
'84,85,73,,86,59,74,34,46,48,47,49,87,50,43,44,45,64,68,69,,,60,51,67',
'75,61,,,,62,63,260,,,,,,,,,,,,,,,,,,,,,46,48,47,261,,50,43,44,45,,,',
',,33,51,35,36,53,,55,,,123,124,,121,122,125,109,110,111,115,116,117',
'112,113,114,118,119,120,96,98,97,103,105,104,106,108,107,100,102,101',
'126,127,95,94,130,,,,,,53,,55,,93,,76,,,99,77,,78,81,79,80,83,123,124',
'82,,71,72,,58,57,84,85,73,,86,59,74,,46,48,47,49,87,50,43,44,45,64,68',
'69,-93,,60,51,67,75,61,,,,62,63,,,,93,,,123,124,99,121,122,125,,,,,',
',,,,,46,48,47,,,50,43,44,45,,,,,33,,51,76,53,,55,77,-192,78,81,79,80',
'83,,93,82,,71,72,99,58,57,84,85,73,,86,59,74,34,46,48,47,49,87,50,43',
'44,45,64,68,69,,,60,51,67,75,61,53,,55,62,63,336,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,33,,35,36,53,,55,123,124,,121,122,125,109,110,111,115',
'116,117,112,113,114,118,119,120,96,98,97,103,105,104,106,108,107,100',
'102,101,126,127,95,94,130,331,,,,,,,,,93,,,,,99,,,,,,,,,,,,,,,,,,,,',
'123,124,,121,122,125,,123,124,,121,122,125,109,110,111,115,116,117,112',
'113,114,118,119,120,96,98,97,103,105,104,106,108,107,100,102,101,126',
'127,95,94,130,136,57,93,85,,,,99,,93,46,48,47,49,99,50,43,44,45,64,',
'123,124,,60,51,67,,61,,,,62,63,136,57,,85,123,124,,121,122,125,46,48',
'47,49,,50,43,44,45,64,,,-93,,60,51,67,,61,,,93,62,63,,33,99,,,53,,55',
',192,,,136,57,93,85,,,,99,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51',
'67,53,61,55,,,62,63,136,57,,85,123,124,,121,122,125,46,48,47,49,,50',
'43,44,45,64,,,,,60,51,67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57,93,85',
',,,99,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,67,53,61,55,,,62,63',
'136,57,,85,123,124,,121,122,125,46,48,47,49,,50,43,44,45,64,,,-93,,60',
'51,67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57,93,85,,,,99,,,46,48,47,49',
',50,43,44,45,64,,,,158,60,51,67,53,61,55,,,62,63,136,57,,85,123,124',
',121,122,125,46,48,47,49,,50,43,44,45,64,,,,,60,51,67,,61,,,,62,63,',
'33,,,,53,,55,,,,,136,57,93,85,,,,99,,,46,48,47,49,,50,43,44,45,64,,',
',155,60,51,67,53,61,55,,,62,63,136,57,,85,123,124,,121,122,125,46,48',
'47,49,,50,43,44,45,64,,,-93,,60,51,67,,61,,,,62,63,,33,,,,53,,55,,,',
',136,57,93,85,,,,99,,34,46,48,47,49,,50,43,44,45,64,,,,151,60,51,67',
'53,61,55,,,62,63,136,57,,85,123,124,,121,122,125,46,48,47,49,,50,43',
'44,45,64,,,,,60,51,67,,61,,,,62,63,,33,,35,36,53,,55,,,,,136,57,93,85',
',,,99,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,67,53,61,55,,,62,63',
'136,57,,85,123,124,,121,122,125,46,48,47,49,,50,43,44,45,64,,,,,60,51',
'67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57,93,85,,,,99,,,46,48,47,49,',
'50,43,44,45,64,,,,33,60,51,67,53,61,55,,,62,63,136,57,,85,123,124,,121',
'122,125,46,48,47,49,,50,43,44,45,64,,,,,60,51,67,,61,,,,62,63,,33,,',
',53,,55,,,,,,,93,,,,,99,123,124,,121,122,125,,123,124,,121,122,125,136',
'57,33,85,,,53,284,55,,46,48,47,49,,50,43,44,45,64,,,-93,,60,51,67,,61',
',,93,62,63,136,57,99,85,93,,,,,99,46,48,47,49,,50,43,44,45,64,,,-93',
',60,51,67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57,,85,,,,,,,46,48,47,49',
',50,43,44,45,64,,,,33,60,51,67,53,61,55,,,62,63,136,57,,85,,,,,,,46',
'48,47,49,,50,43,44,45,64,,,-93,,60,51,67,,61,,,,62,63,,33,,,,53,,55',
',,,,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,67,53,61',
'55,,,62,63,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,-93,,60,51',
'67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57,,85,,,,,,,46,48,47,49,,50,43',
'44,45,64,,,-93,33,60,51,67,53,61,55,,,62,63,136,57,,85,,,,,,,46,48,47',
'49,,50,43,44,45,64,,,,,60,51,67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57',
',85,,,,,,,46,48,47,49,,50,43,44,45,64,,,-93,33,60,51,67,53,61,55,,,62',
'63,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,67,,61,,,',
'62,63,,33,,,,53,,55,,,,,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64',
',,,33,60,51,67,53,61,55,,,62,63,136,57,,85,,,,,,,46,48,47,49,,50,43',
'44,45,64,,,,,60,51,67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57,,85,,,,',
',,46,48,47,49,,50,43,44,45,64,,,,33,60,51,67,53,61,55,,,62,63,136,57',
',85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,67,,61,,,,62,63,,33',
',,,53,,55,,,,,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33,60',
'51,67,53,61,55,,,62,63,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64',
',,,,60,51,67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57,,85,,,,,,,46,48,47',
'49,,50,43,44,45,64,,,,33,60,51,67,53,61,55,,,62,63,136,57,,85,,,,,,',
'46,48,47,49,,50,43,44,45,64,,,,,60,51,67,,61,,,,62,63,,33,,,,53,,55',
',,,,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,67,53,61',
'55,,,62,63,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,67',
',61,,,,62,63,,33,,,,53,,55,,,,,136,57,,85,,,,,,,46,48,47,49,,50,43,44',
'45,64,,,,33,60,51,67,53,61,55,,,62,63,136,57,,85,,,,,,,46,48,47,49,',
'50,43,44,45,64,,,,,60,51,67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57,,85',
',,,,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,67,53,61,55,,,62,63,136',
'57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,67,,61,,,,62,63,',
'33,,,,53,,55,,,,,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33',
'60,51,67,53,61,55,,,62,63,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45',
'64,,,,,60,51,67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57,,85,,,,,,,46,48',
'47,49,,50,43,44,45,64,,,,33,60,51,67,53,61,55,,,62,63,136,57,,85,,,',
',,,46,48,47,49,,50,43,44,45,64,,,,,60,51,67,,61,,,,62,63,,33,,,,53,',
'55,,,,,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,67,53',
'61,55,,,62,63,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51',
'67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57,,85,,,,,,,46,48,47,49,,50,43',
'44,45,64,,,,33,60,51,67,53,61,55,,,62,63,136,57,,85,,,,,,,46,48,47,49',
',50,43,44,45,64,,,,,60,51,67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57,',
'85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,67,53,61,55,,,62,63',
'136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,67,,61,,,,62',
'63,,33,,,,53,,55,,,,,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,',
',33,60,51,67,53,61,55,,,62,63,136,57,,85,,,,,,,46,48,47,49,,50,43,44',
'45,64,,,,,60,51,67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57,,85,,,,,,,46',
'48,47,49,,50,43,44,45,64,,,,33,60,51,67,53,61,55,,,62,63,136,57,,85',
',,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,67,,61,,,,62,63,,33,,,,53',
',55,,,,,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,67',
'53,61,55,,,62,63,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60',
'51,67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57,,85,,,,,,,46,48,47,49,,50',
'43,44,45,64,,,,33,60,51,67,53,61,55,,,62,63,136,57,,85,,,,,,,46,48,47',
'49,,50,43,44,45,64,,,,,60,51,67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57',
',85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,67,53,61,55,,,62,63',
'136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,67,,61,,,,62',
'63,,33,,,,53,,55,,,,,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,',
',33,60,51,67,53,61,55,,,62,63,136,57,,85,,,,,,,46,48,47,49,,50,43,44',
'45,64,,,,,60,51,67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57,,85,,,,,,,46',
'48,47,49,,50,43,44,45,64,,,-93,33,60,51,67,53,61,55,,,62,63,136,57,',
'85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,67,,61,,,,62,63,,33,',
',,53,,55,,,,,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51',
'67,53,61,55,,,62,63,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,',
',60,51,67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57,,85,,,,,,,46,48,47,49',
',50,43,44,45,64,,,,33,60,51,67,53,61,55,,,62,63,136,57,,85,,,,,,,46',
'48,47,49,,50,43,44,45,64,,,,,60,51,67,,61,,,,62,63,,33,,,,53,,55,,,',
',136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,33,60,51,67,53,61,55',
',,62,63,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,67,,61',
',,,62,63,,33,,,,53,,55,,,,,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45',
'64,,,-93,33,60,51,67,53,61,55,,,62,63,136,57,,85,,,,,,,46,48,47,49,',
'50,43,44,45,64,,,-93,,60,51,67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57',
',85,,,,,,,46,48,47,49,,50,43,44,45,64,,,-93,33,60,51,67,53,61,55,,,62',
'63,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64,,,,,60,51,67,,61,,,',
'62,63,,33,,,,53,,55,,,,,136,57,,85,,,,,,,46,48,47,49,,50,43,44,45,64',
',,-93,33,60,51,67,53,61,55,,,62,63,136,57,,85,,,,,,,46,48,47,49,,50',
'43,44,45,64,,,,,60,51,67,,61,,,,62,63,,33,,,,53,,55,,,,,136,57,,85,',
',,,,,46,48,47,49,368,50,43,44,45,64,,,,33,60,51,67,53,61,55,,,62,63',
'123,124,,121,122,125,109,110,111,115,116,117,112,113,114,118,119,120',
'96,98,97,103,105,104,106,108,107,100,102,101,126,127,95,94,130,33,364',
',,53,,55,,,93,,,,,99,,,,,,,123,124,,121,122,125,109,110,111,115,116',
'117,112,113,114,118,119,120,96,98,97,103,105,104,106,108,107,100,102',
'101,126,127,95,94,130,181,,,,,,,,,93,,,,,99,,,,,,123,124,,121,122,125',
'109,110,111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104',
'106,108,107,100,102,101,126,127,95,94,130,181,,,,,,,,,93,,,,,99,,,,',
',123,124,,121,122,125,109,110,111,115,116,117,112,113,114,118,119,120',
'96,98,97,103,105,104,106,108,107,100,102,101,126,127,95,94,130,181,',
',,,,,,,93,,,,,99,,,,,,123,124,,121,122,125,109,110,111,115,116,117,112',
'113,114,118,119,120,96,98,97,103,105,104,106,108,107,100,102,101,126',
'127,95,94,130,181,,,,,,,,,93,,,,,99,,,,,,123,124,,121,122,125,109,110',
'111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104,106,108',
'107,100,102,101,126,127,95,94,130,,,,,,,,,,93,,,123,124,99,121,122,125',
'109,110,111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104',
'106,108,107,100,102,101,126,127,95,94,130,,,,,,,,,,93,,,123,124,99,121',
'122,125,109,110,111,115,116,117,112,113,114,118,119,120,96,98,97,103',
'105,104,106,108,107,100,102,101,126,127,95,94,130,,,,,,,232,,,93,,,123',
'124,99,121,122,125,109,110,111,115,116,117,112,113,114,118,119,120,96',
'98,97,103,105,104,106,108,107,100,102,101,126,127,95,94,130,,,,,,,,',
',93,,,123,124,99,121,122,125,109,110,111,115,116,117,112,113,114,118',
'119,120,96,98,97,103,105,104,106,108,107,100,102,101,126,127,95,94,130',
',,,,,,,,,93,,,123,124,99,121,122,125,109,110,111,115,116,117,112,113',
'114,118,119,120,96,98,97,103,105,104,106,108,107,100,102,101,126,127',
'95,94,130,,,,,,,,,,93,,,123,124,99,121,122,125,109,110,111,115,116,117',
'112,113,114,118,119,120,96,98,97,103,105,104,106,108,107,100,102,101',
'126,127,95,94,130,,,,,,,,,,93,,,123,124,99,121,122,125,109,110,111,115',
'116,117,112,113,114,118,119,120,96,98,97,103,105,104,106,108,107,100',
'102,101,126,127,95,94,130,,,,,,,,,,93,,,123,124,99,121,122,125,109,110',
'111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104,106,108',
'107,100,102,101,126,127,95,94,130,,,,,,,,,,93,,,123,124,99,121,122,125',
'109,110,111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104',
'106,108,107,100,102,101,126,127,95,94,130,,,,,,,232,,,93,,,123,124,99',
'121,122,125,109,110,111,115,116,117,112,113,114,118,119,120,96,98,97',
'103,105,104,106,108,107,100,102,101,126,127,95,94,130,,,,,,,,,,93,,',
'123,124,99,121,122,125,109,110,111,115,116,117,112,113,114,118,119,120',
'96,98,97,103,105,104,106,108,107,100,102,101,126,127,95,94,130,,,,,',
',,,,93,278,,,279,99,123,124,,121,122,125,109,110,111,115,116,117,112',
'113,114,118,119,120,96,98,97,103,105,104,106,108,107,100,102,101,126',
'127,95,94,130,,,,,,,,,,93,,,123,124,99,121,122,125,109,110,111,115,116',
'117,112,113,114,118,119,120,96,98,97,103,105,104,106,108,107,100,102',
'101,126,127,95,94,130,,,,,,,,,,93,,,123,124,99,121,122,125,109,110,111',
'115,116,117,112,113,114,118,119,120,96,98,97,103,105,104,106,108,107',
'100,102,101,126,127,95,,,,,,,,,,,,93,,,123,124,99,121,122,125,109,110',
'111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104,106,108',
'107,100,102,101,126,127,,,,,,,,,,,,,93,,,123,124,99,121,122,125,109',
'110,111,115,116,117,112,113,114,118,119,120,96,98,97,103,105,104,106',
'108,107,100,102,101,126,127,95,94,130,,,,,,,,,,93,,,123,124,99,121,122',
'125,109,110,111,115,116,117,112,113,114,118,119,120,123,124,,121,122',
'125,109,110,111,115,116,117,112,113,114,118,119,120,,,,,,,,,93,,,,,99',
',,,,,,,,,,,,93,,,123,124,99,121,122,125,109,110,111,115,116,117,112',
'113,114,118,119,120,123,124,,121,122,125,109,110,111,115,116,117,112',
'113,114,118,119,120,,,,,,,,,93,,,,,99,,,,,,,,,,,,,93,,,123,124,99,121',
'122,125,109,110,111,115,116,117,112,113,114,118,119,120,123,124,,121',
'122,125,109,110,111,115,116,117,112,113,114,118,119,120,,,,,,,,,93,',
',,,99,,,,,,,,,,,,,93,,,123,124,99,121,122,125,109,110,111,115,116,117',
'112,113,114,118,119,120,123,124,,121,122,125,109,110,111,115,116,117',
'112,113,114,118,119,120,,,,,,,,,93,,,,,99,,,,,,,,,,,,,93,,,123,124,99',
'121,122,125,109,110,111,115,116,117,112,113,114,118,119,120,,,,,,,,',
',,,,,,,,,,,,,,,,,,93,,,123,124,99,121,122,125,109,110,111,115,116,117',
'112,113,114,118,119,120,96,98,97,103,105,104,106,108,107,100,102,101',
'126,127,95,94,130,,,,,,,,,,93,,,123,124,99,121,122,125,109,110,111,115',
'116,117,112,113,114,118,119,120,96,98,97,103,105,104,106,108,107,100',
'102,101,126,127,95,94,130,,,,,,,,,,93,318,,,279,99,123,124,,121,122',
'125,109,110,111,115,116,117,112,113,114,118,119,120,96,98,97,103,105',
'104,106,108,107,100,102,101,126,127,95,94,130,,,,,,,,,,93,,,123,124',
'99,121,122,125,109,110,111,115,116,117,112,113,114,118,119,120,96,98',
'97,103,105,104,106,108,107,100,102,101,,,,,,,,,,,,,,,93,,,123,124,99',
'121,122,125,109,110,111,115,116,117,112,113,114,118,119,120,96,98,97',
'103,105,104,106,108,107,100,102,101,,,,,,,,,,,,,,,93,,,123,124,99,121',
'122,125,109,110,111,115,116,117,112,113,114,118,119,120,96,98,97,103',
'105,104,106,108,107,100,102,101,126,127,95,94,130,,,,,,,,,,93,,,123',
'124,99,121,122,125,109,110,111,115,116,117,112,113,114,118,119,120,96',
'98,97,103,105,104,106,108,107,100,102,101,126,127,95,94,130,,,,,,,,',
',93,,,123,124,99,121,122,125,109,110,111,115,116,117,112,113,114,118',
'119,120,96,98,97,103,105,104,106,108,107,100,102,101,126,127,95,94,130',
',,,,,,,,,93,,,,282,99,123,124,,121,122,125,109,110,111,115,116,117,112',
'113,114,118,119,120,96,98,97,103,105,104,106,108,107,100,102,101,126',
'127,95,94,130,,,,,,,,,,93,,,,,99' ]
        racc_action_table = arr = ::Array.new(5922, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'183,363,183,183,183,183,183,183,90,171,239,239,239,183,183,239,239,239',
'239,2,149,82,373,258,369,239,8,157,8,183,8,182,270,144,339,69,56,69',
'270,270,325,144,344,325,325,344,344,325,20,344,49,49,20,325,325,344',
'344,303,303,180,182,90,171,363,363,180,230,149,230,325,258,344,82,239',
'272,239,239,333,333,8,157,2,2,303,373,373,369,369,183,56,183,183,183',
'146,183,20,20,183,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20',
'20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,175,325,325,344,344,147',
'272,272,299,20,93,93,312,93,20,303,303,326,312,326,93,93,93,93,175,93',
'93,93,93,93,274,299,223,148,93,93,93,223,93,148,162,162,93,93,175,175',
'138,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175',
'175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,93,140',
'347,273,93,162,93,140,93,175,162,181,290,291,175,181,137,181,181,181',
'181,181,161,161,181,347,181,181,266,181,181,181,181,181,25,181,181,181',
'181,181,181,181,181,181,181,181,181,181,181,181,181,181,26,181,181,181',
'181,181,271,136,160,181,181,298,271,160,161,220,220,222,328,161,328',
'265,222,25,25,25,25,154,154,154,154,134,154,24,24,24,24,68,24,68,132',
'26,26,26,26,92,181,351,181,181,181,351,181,351,351,351,351,351,88,220',
'351,86,351,351,220,351,351,351,351,351,311,351,351,351,351,351,351,351',
'351,351,351,351,351,351,351,351,351,153,314,351,351,351,351,351,294',
'316,294,351,351,40,40,40,40,195,195,84,195,195,195,195,195,195,195,195',
'195,195,195,195,195,195,195,66,66,66,66,150,251,150,251,275,249,275',
'249,83,351,0,351,351,351,0,351,0,0,0,0,0,70,195,0,263,0,0,195,0,0,0',
'0,0,327,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,0,0,0,0,0,246,329,246',
'0,0,289,242,289,242,196,196,259,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,196,334,257,337,338,277,341,343,256,346,178,348',
'67,179,0,368,0,0,0,368,0,368,368,368,368,368,250,196,368,358,368,368',
'196,368,368,368,368,368,359,368,368,368,368,368,368,368,368,368,368',
'368,368,368,368,368,368,361,41,368,368,368,368,368,187,188,365,368,368',
'366,367,244,191,197,197,371,197,197,197,197,197,197,197,197,197,197',
'197,197,197,197,197,1,374,,,,,,,,,,,,368,364,368,368,368,364,368,364',
'364,364,364,364,,197,364,,364,364,197,364,364,364,364,364,,364,364,364',
'364,364,364,364,364,364,364,364,364,364,364,364,364,,,364,364,364,364',
'364,,,,364,364,174,,,,,,,,,,,,,,,,,,,,,55,55,55,174,,55,55,55,55,,,',
',,364,55,364,364,364,,364,,,174,174,,174,174,174,174,174,174,174,174',
'174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174',
'174,174,174,174,174,174,174,,,,,,55,,55,,174,,89,,,174,89,,89,89,89',
'89,89,221,221,89,,89,89,,89,89,89,89,89,,89,89,89,,89,89,89,89,89,89',
'89,89,89,89,89,89,89,,89,89,89,89,89,,,,89,89,,,,221,,,208,208,221,208',
'208,208,,,,,,,,,,,240,240,240,,,240,240,240,240,,,,,89,,240,261,89,',
'89,261,261,261,261,261,261,261,,208,261,,261,261,208,261,261,261,261',
'261,,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261',
',,261,261,261,261,261,240,,240,261,261,305,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,261,,261,261,261,,261,305,305,,305,305,305,305,305,305,305',
'305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305',
'305,305,305,305,305,305,305,305,302,,,,,,,,,305,,,,,305,,,,,,,,,,,,',
',,,,,,,,209,209,,209,209,209,,302,302,,302,302,302,302,302,302,302,302',
'302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302',
'302,302,302,302,302,302,302,189,189,209,189,,,,209,,302,189,189,189',
'189,302,189,189,189,189,189,,224,224,,189,189,189,,189,,,,189,189,296',
'296,,296,210,210,,210,210,210,296,296,296,296,,296,296,296,296,296,',
',296,,296,296,296,,296,,,224,296,296,,189,224,,,189,,189,,189,,,62,62',
'210,62,,,,210,,,62,62,62,62,,62,62,62,62,62,,,,296,62,62,62,296,62,296',
',,62,62,63,63,,63,211,211,,211,211,211,63,63,63,63,,63,63,63,63,63,',
',,,63,63,63,,63,,,,63,63,,62,,,,62,,62,,,,,64,64,211,64,,,,211,,,64',
'64,64,64,,64,64,64,64,64,,,,63,64,64,64,63,64,63,,,64,64,59,59,,59,213',
'213,,213,213,213,59,59,59,59,,59,59,59,59,59,,,59,,59,59,59,,59,,,,59',
'59,,64,,,,64,,64,,,,,350,350,213,350,,,,213,,,350,350,350,350,,350,350',
'350,350,350,,,,59,350,350,350,59,350,59,,,350,350,58,58,,58,214,214',
',214,214,214,58,58,58,58,,58,58,58,58,58,,,,,58,58,58,,58,,,,58,58,',
'350,,,,350,,350,,,,,335,335,214,335,,,,214,,,335,335,335,335,,335,335',
'335,335,335,,,,58,335,335,335,58,335,58,,,335,335,57,57,,57,215,215',
',215,215,215,57,57,57,57,,57,57,57,57,57,,,57,,57,57,57,,57,,,,57,57',
',335,,,,335,,335,,,,,74,74,215,74,,,,215,,74,74,74,74,74,,74,74,74,74',
'74,,,,57,74,74,74,57,74,57,,,74,74,76,76,,76,216,216,,216,216,216,76',
'76,76,76,,76,76,76,76,76,,,,,76,76,76,,76,,,,76,76,,74,,74,74,74,,74',
',,,,77,77,216,77,,,,216,,,77,77,77,77,,77,77,77,77,77,,,,76,77,77,77',
'76,77,76,,,77,77,78,78,,78,217,217,,217,217,217,78,78,78,78,,78,78,78',
'78,78,,,,,78,78,78,,78,,,,78,78,,77,,,,77,,77,,,,,81,81,217,81,,,,217',
',,81,81,81,81,,81,81,81,81,81,,,,78,81,81,81,78,81,78,,,81,81,237,237',
',237,218,218,,218,218,218,237,237,237,237,,237,237,237,237,237,,,,,237',
'237,237,,237,,,,237,237,,81,,,,81,,81,,,,,,,218,,,,,218,219,219,,219',
'219,219,,212,212,,212,212,212,233,233,237,233,,,237,237,237,,233,233',
'233,233,,233,233,233,233,233,,,233,,233,233,233,,233,,,219,233,233,192',
'192,219,192,212,,,,,212,192,192,192,192,,192,192,192,192,192,,,192,',
'192,192,192,,192,,,,192,192,,233,,,,233,,233,,,,,85,85,,85,,,,,,,85',
'85,85,85,,85,85,85,85,85,,,,192,85,85,85,192,85,192,,,85,85,241,241',
',241,,,,,,,241,241,241,241,,241,241,241,241,241,,,241,,241,241,241,',
'241,,,,241,241,,85,,,,85,,85,,,,,247,247,,247,,,,,,,247,247,247,247',
',247,247,247,247,247,,,,241,247,247,247,241,247,241,,,247,247,184,184',
',184,,,,,,,184,184,184,184,,184,184,184,184,184,,,184,,184,184,184,',
'184,,,,184,184,,247,,,,247,,247,,,,,248,248,,248,,,,,,,248,248,248,248',
',248,248,248,248,248,,,248,184,248,248,248,184,248,184,,,248,248,33',
'33,,33,,,,,,,33,33,33,33,,33,33,33,33,33,,,,,33,33,33,,33,,,,33,33,',
'248,,,,248,,248,,,,,53,53,,53,,,,,,,53,53,53,53,,53,53,53,53,53,,,53',
'33,53,53,53,33,53,33,,,53,53,94,94,,94,,,,,,,94,94,94,94,,94,94,94,94',
'94,,,,,94,94,94,,94,,,,94,94,,53,,,,53,,53,,,,,95,95,,95,,,,,,,95,95',
'95,95,,95,95,95,95,95,,,,94,95,95,95,94,95,94,,,95,95,96,96,,96,,,,',
',,96,96,96,96,,96,96,96,96,96,,,,,96,96,96,,96,,,,96,96,,95,,,,95,,95',
',,,,97,97,,97,,,,,,,97,97,97,97,,97,97,97,97,97,,,,96,97,97,97,96,97',
'96,,,97,97,98,98,,98,,,,,,,98,98,98,98,,98,98,98,98,98,,,,,98,98,98',
',98,,,,98,98,,97,,,,97,,97,,,,,99,99,,99,,,,,,,99,99,99,99,,99,99,99',
'99,99,,,,98,99,99,99,98,99,98,,,99,99,100,100,,100,,,,,,,100,100,100',
'100,,100,100,100,100,100,,,,,100,100,100,,100,,,,100,100,,99,,,,99,',
'99,,,,,101,101,,101,,,,,,,101,101,101,101,,101,101,101,101,101,,,,100',
'101,101,101,100,101,100,,,101,101,102,102,,102,,,,,,,102,102,102,102',
',102,102,102,102,102,,,,,102,102,102,,102,,,,102,102,,101,,,,101,,101',
',,,,103,103,,103,,,,,,,103,103,103,103,,103,103,103,103,103,,,,102,103',
'103,103,102,103,102,,,103,103,104,104,,104,,,,,,,104,104,104,104,,104',
'104,104,104,104,,,,,104,104,104,,104,,,,104,104,,103,,,,103,,103,,,',
',105,105,,105,,,,,,,105,105,105,105,,105,105,105,105,105,,,,104,105',
'105,105,104,105,104,,,105,105,106,106,,106,,,,,,,106,106,106,106,,106',
'106,106,106,106,,,,,106,106,106,,106,,,,106,106,,105,,,,105,,105,,,',
',107,107,,107,,,,,,,107,107,107,107,,107,107,107,107,107,,,,106,107',
'107,107,106,107,106,,,107,107,267,267,,267,,,,,,,267,267,267,267,,267',
'267,267,267,267,,,,,267,267,267,,267,,,,267,267,,107,,,,107,,107,,,',
',109,109,,109,,,,,,,109,109,109,109,,109,109,109,109,109,,,,267,109',
'109,109,267,109,267,,,109,109,110,110,,110,,,,,,,110,110,110,110,,110',
'110,110,110,110,,,,,110,110,110,,110,,,,110,110,,109,,,,109,,109,,,',
',111,111,,111,,,,,,,111,111,111,111,,111,111,111,111,111,,,,110,111',
'111,111,110,111,110,,,111,111,112,112,,112,,,,,,,112,112,112,112,,112',
'112,112,112,112,,,,,112,112,112,,112,,,,112,112,,111,,,,111,,111,,,',
',113,113,,113,,,,,,,113,113,113,113,,113,113,113,113,113,,,,112,113',
'113,113,112,113,112,,,113,113,114,114,,114,,,,,,,114,114,114,114,,114',
'114,114,114,114,,,,,114,114,114,,114,,,,114,114,,113,,,,113,,113,,,',
',115,115,,115,,,,,,,115,115,115,115,,115,115,115,115,115,,,,114,115',
'115,115,114,115,114,,,115,115,116,116,,116,,,,,,,116,116,116,116,,116',
'116,116,116,116,,,,,116,116,116,,116,,,,116,116,,115,,,,115,,115,,,',
',117,117,,117,,,,,,,117,117,117,117,,117,117,117,117,117,,,,116,117',
'117,117,116,117,116,,,117,117,118,118,,118,,,,,,,118,118,118,118,,118',
'118,118,118,118,,,,,118,118,118,,118,,,,118,118,,117,,,,117,,117,,,',
',119,119,,119,,,,,,,119,119,119,119,,119,119,119,119,119,,,,118,119',
'119,119,118,119,118,,,119,119,120,120,,120,,,,,,,120,120,120,120,,120',
'120,120,120,120,,,,,120,120,120,,120,,,,120,120,,119,,,,119,,119,,,',
',121,121,,121,,,,,,,121,121,121,121,,121,121,121,121,121,,,,120,121',
'121,121,120,121,120,,,121,121,122,122,,122,,,,,,,122,122,122,122,,122',
'122,122,122,122,,,,,122,122,122,,122,,,,122,122,,121,,,,121,,121,,,',
',123,123,,123,,,,,,,123,123,123,123,,123,123,123,123,123,,,,122,123',
'123,123,122,123,122,,,123,123,124,124,,124,,,,,,,124,124,124,124,,124',
'124,124,124,124,,,,,124,124,124,,124,,,,124,124,,123,,,,123,,123,,,',
',125,125,,125,,,,,,,125,125,125,125,,125,125,125,125,125,,,,124,125',
'125,125,124,125,124,,,125,125,126,126,,126,,,,,,,126,126,126,126,,126',
'126,126,126,126,,,,,126,126,126,,126,,,,126,126,,125,,,,125,,125,,,',
',127,127,,127,,,,,,,127,127,127,127,,127,127,127,127,127,,,,126,127',
'127,127,126,127,126,,,127,127,128,128,,128,,,,,,,128,128,128,128,,128',
'128,128,128,128,,,,,128,128,128,,128,,,,128,128,,127,,,,127,,127,,,',
',129,129,,129,,,,,,,129,129,129,129,,129,129,129,129,129,,,,128,129',
'129,129,128,129,128,,,129,129,130,130,,130,,,,,,,130,130,130,130,,130',
'130,130,130,130,,,,,130,130,130,,130,,,,130,130,,129,,,,129,,129,,,',
',131,131,,131,,,,,,,131,131,131,131,,131,131,131,131,131,,,131,130,131',
'131,131,130,131,130,,,131,131,167,167,,167,,,,,,,167,167,167,167,,167',
'167,167,167,167,,,,,167,167,167,,167,,,,167,167,,131,,,,131,,131,,,',
',166,166,,166,,,,,,,166,166,166,166,,166,166,166,166,166,,,,167,166',
'166,166,167,166,167,,,166,166,165,165,,165,,,,,,,165,165,165,165,,165',
'165,165,165,165,,,,,165,165,165,,165,,,,165,165,,166,,,,166,,166,,,',
',61,61,,61,,,,,,,61,61,61,61,,61,61,61,61,61,,,,165,61,61,61,165,61',
'165,,,61,61,164,164,,164,,,,,,,164,164,164,164,,164,164,164,164,164',
',,,,164,164,164,,164,,,,164,164,,61,,,,61,,61,,,,,260,260,,260,,,,,',
',260,260,260,260,,260,260,260,260,260,,,,164,260,260,260,164,260,164',
',,260,260,282,282,,282,,,,,,,282,282,282,282,,282,282,282,282,282,,',
',,282,282,282,,282,,,,282,282,,260,,,,260,,260,,,,,158,158,,158,,,,',
',,158,158,158,158,,158,158,158,158,158,,,158,282,158,158,158,282,158',
'282,,,158,158,155,155,,155,,,,,,,155,155,155,155,,155,155,155,155,155',
',,155,,155,155,155,,155,,,,155,155,,158,,,,158,,158,,,,,279,279,,279',
',,,,,,279,279,279,279,,279,279,279,279,279,,,279,155,279,279,279,155',
'279,155,,,279,279,264,264,,264,,,,,,,264,264,264,264,,264,264,264,264',
'264,,,,,264,264,264,,264,,,,264,264,,279,,,,279,,279,,,,,151,151,,151',
',,,,,,151,151,151,151,,151,151,151,151,151,,,151,264,151,151,151,264',
'151,264,,,151,151,268,268,,268,,,,,,,268,268,268,268,,268,268,268,268',
'268,,,,,268,268,268,,268,,,,268,268,,151,,,,151,,151,,,,,108,108,,108',
',,,,,,108,108,108,108,362,108,108,108,108,108,,,,268,108,108,108,268',
'108,268,,,108,108,362,362,,362,362,362,362,362,362,362,362,362,362,362',
'362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362',
'362,362,362,362,108,352,,,108,,108,,,362,,,,,362,,,,,,,352,352,,352',
'352,352,352,352,352,352,352,352,352,352,352,352,352,352,352,352,352',
'352,352,352,352,352,352,352,352,352,352,352,352,352,352,177,,,,,,,,',
'352,,,,,352,,,,,,177,177,,177,177,177,177,177,177,177,177,177,177,177',
'177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177',
'177,177,177,177,308,,,,,,,,,177,,,,,177,,,,,,308,308,,308,308,308,308',
'308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308',
'308,308,308,308,308,308,308,308,308,308,308,309,,,,,,,,,308,,,,,308',
',,,,,309,309,,309,309,309,309,309,309,309,309,309,309,309,309,309,309',
'309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309',
'309,176,,,,,,,,,309,,,,,309,,,,,,176,176,,176,176,176,176,176,176,176',
'176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176',
'176,176,176,176,176,176,176,176,,,,,,,,,,176,,,172,172,176,172,172,172',
'172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172',
'172,172,172,172,172,172,172,172,172,172,172,172,,,,,,,,,,172,,,135,135',
'172,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135',
'135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,,,,',
',,135,,,135,,,254,254,135,254,254,254,254,254,254,254,254,254,254,254',
'254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254',
'254,254,254,254,,,,,,,,,,254,,,253,253,254,253,253,253,253,253,253,253',
'253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253',
'253,253,253,253,253,253,253,253,,,,,,,,,,253,,,252,252,253,252,252,252',
'252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252',
'252,252,252,252,252,252,252,252,252,252,252,252,,,,,,,,,,252,,,293,293',
'252,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293',
'293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,,,,',
',,,,,293,,,255,255,293,255,255,255,255,255,255,255,255,255,255,255,255',
'255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255',
'255,255,255,,,,,,,,,,255,,,285,285,255,285,285,285,285,285,285,285,285',
'285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285',
'285,285,285,285,285,285,285,,,,,,,,,,285,,,245,245,285,245,245,245,245',
'245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245',
'245,245,245,245,245,245,245,245,245,245,245,,,,,,,245,,,245,,,141,141',
'245,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141',
'141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,,,,',
',,,,,141,,,190,190,141,190,190,190,190,190,190,190,190,190,190,190,190',
'190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190',
'190,190,190,,,,,,,,,,190,190,,,190,190,156,156,,156,156,156,156,156',
'156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156',
'156,156,156,156,156,156,156,156,156,156,,,,,,,,,,156,,,320,320,156,320',
'320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320',
'320,320,320,320,320,320,320,320,320,320,320,320,320,320,,,,,,,,,,320',
',,193,193,320,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,,,,',
',,,,,,,193,,,194,194,193,194,194,194,194,194,194,194,194,194,194,194',
'194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194',
'194,,,,,,,,,,,,,194,,,198,198,194,198,198,198,198,198,198,198,198,198',
'198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198',
'198,198,198,198,198,198,,,,,,,,,,198,,,199,199,198,199,199,199,199,199',
'199,199,199,199,199,199,199,199,199,199,200,200,,200,200,200,200,200',
'200,200,200,200,200,200,200,200,200,200,,,,,,,,,199,,,,,199,,,,,,,,',
',,,,200,,,201,201,200,201,201,201,201,201,201,201,201,201,201,201,201',
'201,201,201,202,202,,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,,,,,,,,,201,,,,,201,,,,,,,,,,,,,202,,,203,203,202,203,203',
'203,203,203,203,203,203,203,203,203,203,203,203,203,204,204,,204,204',
'204,204,204,204,204,204,204,204,204,204,204,204,204,,,,,,,,,203,,,,',
'203,,,,,,,,,,,,,204,,,205,205,204,205,205,205,205,205,205,205,205,205',
'205,205,205,205,205,205,206,206,,206,206,206,206,206,206,206,206,206',
'206,206,206,206,206,206,,,,,,,,,205,,,,,205,,,,,,,,,,,,,206,,,207,207',
'206,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,,,,',
',,,,,,,,,,,,,,,,,,,,,,207,,,281,281,207,281,281,281,281,281,281,281',
'281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281',
'281,281,281,281,281,281,281,281,,,,,,,,,,281,,,276,276,281,276,276,276',
'276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276',
'276,276,276,276,276,276,276,276,276,276,276,276,,,,,,,,,,276,276,,,276',
'276,152,152,,152,152,152,152,152,152,152,152,152,152,152,152,152,152',
'152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152',
'152,,,,,,,,,,152,,,225,225,152,225,225,225,225,225,225,225,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225',
',,,,,,,,,,,,,,225,,,226,226,225,226,226,226,226,226,226,226,226,226',
'226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226',
'226,,,,,,,,,,,,,,,226,,,227,227,226,227,227,227,227,227,227,227,227',
'227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227',
'227,227,227,227,227,227,227,,,,,,,,,,227,,,228,228,227,228,228,228,228',
'228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228',
'228,228,228,228,228,228,228,228,228,228,228,,,,,,,,,,228,,,229,229,228',
'229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229',
'229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,,,,,,,,',
',229,,,,229,229,321,321,,321,321,321,321,321,321,321,321,321,321,321',
'321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321',
'321,321,321,321,,,,,,,,,,321,,,,,321' ]
        racc_action_check = arr = ::Array.new(5922, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   394,   558,   -10,   nil,   nil,   nil,   nil,   nil,   -16,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    46,   nil,   nil,   nil,   210,   200,   218,   nil,   nil,   nil,
   nil,   nil,   nil,  1925,   nil,   nil,   nil,   nil,   nil,   nil,
   276,   471,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,
   nil,   nil,   nil,  1971,   nil,   615,    -6,  1344,  1264,  1184,
   nil,  3651,  1070,  1104,  1150,   nil,   298,   439,   254,    -9,
   363,   nil,   nil,   nil,  1390,   nil,  1424,  1470,  1504,   nil,
   nil,  1550,   -21,   365,   324,  1731,   233,   nil,   319,   712,
   -34,   nil,   213,   120,  2005,  2051,  2085,  2131,  2165,  2211,
  2245,  2291,  2325,  2371,  2405,  2451,  2485,  2531,  4051,  2611,
  2645,  2691,  2725,  2771,  2805,  2851,  2885,  2931,  2965,  3011,
  3045,  3091,  3125,  3171,  3205,  3251,  3285,  3331,  3365,  3411,
  3445,  3491,   258,   nil,   249,  4426,   179,   182,   134,   nil,
   122,  4802,   nil,   nil,   -55,   nil,    -4,    46,    74,   -22,
   342,  3971,  5538,   260,   204,  3845,  4899,   -15,  3811,   349,
   176,   182,   121,   nil,  3685,  3605,  3571,  3525,   nil,   nil,
   nil,   -33,  4379,   nil,   619,   125,  4332,  4167,   463,   466,
    52,   218,     2,     0,  1845,   nil,   nil,   436,   490,   990,
  4849,   445,  1685,  4993,  5040,   315,   403,   491,  5087,  5134,
  5152,  5199,  5217,  5264,  5282,  5329,  5347,  5394,   723,   919,
   999,  1079,  1616,  1159,  1239,  1319,  1399,  1479,  1559,  1609,
   227,   676,   185,    69,   982,  5585,  5632,  5679,  5726,  5773,
   -22,   nil,   nil,  1651,   nil,   nil,   nil,  1584,   nil,   -20,
   758,  1765,   405,   nil,   442,  4755,   355,  1811,  1891,   303,
   406,   299,  4567,  4520,  4473,  4661,   382,   429,   -19,   447,
  3731,   802,   nil,   403,  3925,   275,   230,  2565,  4005,   nil,
    25,   238,    45,   205,   118,   302,  5488,   380,   nil,  3891,
   nil,  5441,  3765,   nil,   nil,  4708,   nil,   nil,   nil,   360,
   125,   180,   nil,  4614,   267,   nil,  1024,   nil,   243,   119,
   nil,   nil,   926,    54,   nil,   849,   nil,   nil,  4222,  4277,
   nil,   302,   113,   nil,   320,   nil,   327,   nil,   nil,   nil,
  4946,  5823,   nil,   nil,   nil,    40,    59,   412,   191,   354,
   nil,   nil,   nil,    74,   441,  1310,   nil,   465,   466,    27,
   nil,   446,   nil,   469,    42,   nil,   436,   192,   438,   nil,
  1230,   306,  4112,   nil,   nil,   nil,   nil,   nil,   469,   417,
   nil,   495,  4056,   -28,   570,   526,   494,   530,   482,    -5,
   nil,   513,   nil,    -7,   552,   nil ]

racc_action_default = [
    -1,  -206,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,
   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -31,
   -32,   -33,   -34,   -93,   -36,   -37,   -38,   -39,   -40,   -41,
   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -49,   -50,  -206,
   -52,   -53,   -54,   -57,   -60,   -63,  -206,   -94,   -93,   -94,
   -92,   -93,   -93,   -93,   -93,  -135,  -206,  -206,   -93,   -93,
   -93,  -157,  -158,  -159,   -93,  -169,   -93,   -93,   -93,  -178,
  -179,   -93,  -206,  -206,  -206,   -93,  -204,  -205,  -206,    -5,
  -206,  -149,   -70,   -93,   -93,   -93,   -93,   -93,   -93,   -93,
   -93,   -93,   -93,   -93,   -93,   -93,   -93,   -93,   -93,   -93,
   -93,   -93,   -93,   -93,   -93,   -93,   -93,   -93,   -93,   -93,
   -93,   -93,   -93,   -93,   -93,   -93,   -93,   -93,   -93,   -93,
   -93,   -94,   -69,   -79,   -68,  -206,  -206,   -67,  -206,   -51,
  -206,   -58,   -42,   -43,  -206,   -64,  -206,  -206,  -144,  -146,
   -93,   -94,   -95,   -86,   -26,   -94,  -206,  -206,   -94,   -89,
  -131,  -132,  -133,  -134,   -93,   -93,   -93,   -93,  -145,  -147,
  -148,  -206,  -167,  -168,  -206,  -206,  -206,  -206,  -206,  -206,
  -186,  -192,  -206,   -30,   -94,   376,    -4,  -144,  -146,   -93,
  -206,  -206,   -78,   -97,   -98,   -99,  -100,  -101,  -102,  -103,
  -104,  -105,  -106,  -107,  -108,  -109,  -110,  -111,  -112,  -113,
  -114,  -115,  -116,  -117,  -118,  -119,  -120,  -121,  -122,  -123,
  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -172,  -175,  -206,
  -206,   -80,   -35,   -94,   -82,   -81,   -55,   -93,   -61,  -206,
  -206,   -94,   -93,  -152,  -206,   -95,  -206,   -93,   -94,  -206,
  -206,  -206,  -136,  -137,  -138,  -139,  -161,  -160,  -163,  -206,
   -93,   -93,  -193,  -206,   -93,  -206,  -206,   -93,   -93,  -183,
  -206,  -206,  -191,  -206,  -206,  -206,  -206,  -206,   -71,   -76,
   -72,   -77,   -93,   -84,   -56,   -59,   -62,   -65,   -66,  -206,
  -206,  -206,   -85,   -96,  -206,   -87,   -94,   -88,  -206,  -164,
  -162,  -170,  -206,  -191,  -173,  -206,  -177,  -180,  -206,  -206,
  -184,  -206,  -206,  -187,  -206,  -200,  -206,  -203,   -73,   -74,
   -75,  -176,   -83,  -150,  -151,   -84,  -206,  -206,  -206,  -206,
  -165,  -171,  -194,  -195,  -206,   -93,  -174,  -206,  -206,  -206,
  -189,  -206,  -188,  -206,   -83,  -153,  -163,  -206,  -163,  -196,
   -93,   -93,  -206,  -181,  -182,  -185,  -190,  -201,  -206,  -206,
  -166,  -206,  -206,  -197,   -93,  -206,  -163,  -206,   -93,  -198,
  -154,  -206,  -155,  -199,  -206,  -156 ]

racc_goto_table = [
    89,     2,   146,   188,    20,   143,   314,   142,   332,     1,
    91,   145,   132,   134,    90,   259,   263,   137,   144,   163,
   140,   139,   183,   328,   154,   270,   186,   333,   nil,   nil,
   nil,   nil,   nil,   nil,   179,   147,   nil,   135,   349,   191,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   341,   180,   298,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   141,   nil,   nil,
   nil,   nil,   156,   nil,   157,   160,   161,   162,   156,   nil,
   169,   170,   173,   nil,    90,    90,   171,   nil,   172,   nil,
   174,   175,   176,   nil,   257,   177,   nil,   nil,   nil,   156,
   nil,   nil,   nil,    20,   nil,   nil,   nil,   190,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
   205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
   215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
   225,   226,   227,   228,   229,   277,   250,   358,   nil,   361,
   nil,   265,   266,   nil,   nil,   nil,   nil,   273,   nil,   nil,
   258,   153,   244,   159,   nil,   245,    90,   371,   nil,   245,
   nil,   nil,   245,   nil,   nil,   nil,   nil,   nil,   252,   253,
   254,   255,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   272,   nil,   nil,    20,   146,   288,   nil,   143,
   143,   142,   142,   276,   nil,   287,   281,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   230,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   313,   nil,   nil,   nil,
   nil,   285,   nil,   nil,   290,   246,   nil,   nil,    90,   nil,
   nil,   293,   251,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   303,   327,   302,    20,   nil,   nil,   305,   nil,
    89,   308,   309,   337,   338,   nil,   339,   340,   275,   342,
   nil,   343,   nil,   320,   nil,   nil,   321,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    89,   nil,   nil,   nil,   nil,   356,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   365,   nil,   nil,   367,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   289,   374,   nil,   nil,   352,
   nil,   nil,   294,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   363,   nil,   362,    20,   nil,   nil,   nil,   nil,
   nil,    89,   nil,   nil,   nil,   369,   nil,    89,    20,   373,
   nil,    89,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   326 ]

racc_goto_check = [
     4,     2,    27,    53,    20,    37,    35,    36,    60,     1,
    26,    43,    45,    45,    48,    58,    58,    44,    42,    51,
    40,    34,    28,    57,    24,    59,     3,    61,   nil,   nil,
   nil,   nil,   nil,   nil,    36,    49,   nil,    20,    60,    47,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35,    56,    55,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,
   nil,   nil,    20,   nil,    48,    20,    20,    20,    20,   nil,
    26,    26,     4,   nil,    48,    48,    48,   nil,    20,   nil,
    20,    20,    20,   nil,    53,    20,   nil,   nil,   nil,    20,
   nil,   nil,   nil,    20,   nil,   nil,   nil,    20,    20,    20,
    20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
    20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
    20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
    20,    20,    20,    20,    20,    47,    49,    55,   nil,    55,
   nil,    56,    56,   nil,   nil,   nil,   nil,    56,   nil,   nil,
    49,    50,    26,    50,   nil,    20,    48,    55,   nil,    20,
   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,    20,    20,
    20,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,   nil,    20,    27,    27,   nil,    37,
    37,    36,    36,    20,   nil,    43,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    50,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    56,   nil,   nil,   nil,
   nil,    20,   nil,   nil,    26,    50,   nil,   nil,    48,   nil,
   nil,    20,    50,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,    56,    20,    20,   nil,   nil,    20,   nil,
     4,    20,    20,    56,    56,   nil,    56,    56,    50,    56,
   nil,    56,   nil,    20,   nil,   nil,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     4,   nil,   nil,   nil,   nil,    56,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    56,   nil,   nil,    56,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    50,    56,   nil,   nil,    20,
   nil,   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,    20,    20,   nil,   nil,   nil,   nil,
   nil,     4,   nil,   nil,   nil,     2,   nil,     4,    20,     2,
   nil,     4,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    50 ]

racc_goto_pointer = [
   nil,     9,     1,   -63,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,   nil,   nil,   nil,   -34,   nil,     2,   -53,   -63,   nil,
   nil,   nil,   nil,   nil,   -28,  -265,   -48,   -50,   nil,   nil,
   -33,   nil,   -37,   -44,   -24,   -13,   nil,   -54,     6,   -21,
    94,   -45,   nil,   -87,   nil,  -209,   -35,  -276,  -159,  -155,
  -295,  -276 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
   152,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    37,    38,    39,    40,    41,    42,    52,
   nil,    54,   nil,   nil,   nil,   nil,    92,   nil,    56,   nil,
   249,    65,    66,   149,    70,   nil,   262,   nil,   nil,   nil,
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 100, :_reduce_1,
  1, 100, :_reduce_2,
  1, 101, :_reduce_3,
  3, 101, :_reduce_4,
  2, 101, :_reduce_5,
  1, 101, :_reduce_6,
  1, 102, :_reduce_7,
  1, 102, :_reduce_8,
  1, 102, :_reduce_9,
  1, 102, :_reduce_10,
  1, 102, :_reduce_11,
  1, 102, :_reduce_12,
  1, 102, :_reduce_13,
  1, 102, :_reduce_14,
  1, 102, :_reduce_15,
  1, 102, :_reduce_16,
  1, 102, :_reduce_17,
  1, 102, :_reduce_18,
  1, 102, :_reduce_19,
  1, 102, :_reduce_20,
  1, 102, :_reduce_21,
  1, 102, :_reduce_22,
  1, 102, :_reduce_23,
  1, 119, :_reduce_24,
  1, 119, :_reduce_25,
  1, 119, :_reduce_26,
  1, 119, :_reduce_27,
  1, 119, :_reduce_28,
  1, 119, :_reduce_29,
  1, 119, :_reduce_30,
  1, 119, :_reduce_31,
  1, 119, :_reduce_32,
  1, 119, :_reduce_33,
  1, 119, :_reduce_34,
  3, 119, :_reduce_35,
  1, 103, :_reduce_36,
  1, 103, :_reduce_37,
  1, 103, :_reduce_38,
  1, 126, :_reduce_39,
  1, 126, :_reduce_40,
  1, 126, :_reduce_41,
  1, 126, :_reduce_42,
  1, 126, :_reduce_43,
  1, 126, :_reduce_44,
  1, 126, :_reduce_45,
  1, 126, :_reduce_46,
  1, 126, :_reduce_47,
  1, 132, :_reduce_48,
  1, 133, :_reduce_49,
  1, 133, :_reduce_50,
  2, 128, :_reduce_51,
  1, 134, :_reduce_52,
  1, 137, :_reduce_53,
  1, 135, :_reduce_54,
  3, 138, :_reduce_55,
  4, 138, :_reduce_56,
  0, 139, :_reduce_57,
  1, 139, :_reduce_58,
  3, 139, :_reduce_59,
  1, 136, :_reduce_60,
  3, 140, :_reduce_61,
  4, 140, :_reduce_62,
  0, 141, :_reduce_63,
  1, 141, :_reduce_64,
  3, 141, :_reduce_65,
  3, 142, :_reduce_66,
  2, 123, :_reduce_67,
  2, 123, :_reduce_68,
  2, 123, :_reduce_69,
  2, 124, :_reduce_70,
  3, 145, :_reduce_71,
  3, 145, :_reduce_72,
  4, 145, :_reduce_73,
  4, 145, :_reduce_74,
  3, 146, :_reduce_75,
  2, 146, :_reduce_76,
  2, 146, :_reduce_77,
  1, 146, :_reduce_78,
  1, 144, :_reduce_79,
  2, 144, :_reduce_80,
  2, 143, :_reduce_81,
  2, 143, :_reduce_82,
  5, 127, :_reduce_83,
  4, 127, :_reduce_84,
  4, 127, :_reduce_85,
  2, 127, :_reduce_86,
  4, 127, :_reduce_87,
  4, 120, :_reduce_88,
  2, 120, :_reduce_89,
  6, 104, :_reduce_90,
  5, 104, :_reduce_91,
  1, 147, :_reduce_92,
  0, 147, :_reduce_93,
  0, 149, :_reduce_94,
  1, 149, :_reduce_95,
  3, 149, :_reduce_96,
  3, 131, :_reduce_97,
  3, 131, :_reduce_98,
  3, 131, :_reduce_99,
  3, 131, :_reduce_100,
  3, 131, :_reduce_101,
  3, 131, :_reduce_102,
  3, 131, :_reduce_103,
  3, 131, :_reduce_104,
  3, 131, :_reduce_105,
  3, 131, :_reduce_106,
  3, 131, :_reduce_107,
  3, 131, :_reduce_108,
  3, 131, :_reduce_109,
  3, 131, :_reduce_110,
  3, 131, :_reduce_111,
  3, 131, :_reduce_112,
  3, 131, :_reduce_113,
  3, 131, :_reduce_114,
  3, 131, :_reduce_115,
  3, 131, :_reduce_116,
  3, 131, :_reduce_117,
  3, 131, :_reduce_118,
  3, 131, :_reduce_119,
  3, 131, :_reduce_120,
  3, 131, :_reduce_121,
  3, 131, :_reduce_122,
  3, 131, :_reduce_123,
  3, 131, :_reduce_124,
  3, 131, :_reduce_125,
  3, 131, :_reduce_126,
  3, 131, :_reduce_127,
  3, 131, :_reduce_128,
  3, 131, :_reduce_129,
  3, 131, :_reduce_130,
  2, 121, :_reduce_131,
  2, 121, :_reduce_132,
  2, 121, :_reduce_133,
  2, 122, :_reduce_134,
  1, 122, :_reduce_135,
  3, 150, :_reduce_136,
  3, 150, :_reduce_137,
  3, 150, :_reduce_138,
  3, 150, :_reduce_139,
  1, 151, :_reduce_140,
  1, 151, :_reduce_141,
  1, 151, :_reduce_142,
  1, 151, :_reduce_143,
  2, 125, :_reduce_144,
  2, 125, :_reduce_145,
  2, 125, :_reduce_146,
  2, 107, :_reduce_147,
  2, 107, :_reduce_148,
  2, 107, :_reduce_149,
  4, 152, :_reduce_150,
  4, 152, :_reduce_151,
  2, 152, :_reduce_152,
  6, 105, :_reduce_153,
  9, 105, :_reduce_154,
  9, 105, :_reduce_155,
  11, 105, :_reduce_156,
  1, 153, :_reduce_157,
  1, 153, :_reduce_158,
  1, 153, :_reduce_159,
  1, 148, :_reduce_160,
  1, 148, :_reduce_161,
  1, 154, :_reduce_162,
  0, 154, :_reduce_163,
  0, 156, :_reduce_164,
  1, 156, :_reduce_165,
  3, 156, :_reduce_166,
  2, 106, :_reduce_167,
  2, 106, :_reduce_168,
  1, 118, :_reduce_169,
  4, 109, :_reduce_170,
  5, 109, :_reduce_171,
  3, 109, :_reduce_172,
  4, 110, :_reduce_173,
  5, 110, :_reduce_174,
  3, 110, :_reduce_175,
  5, 129, :_reduce_176,
  4, 112, :_reduce_177,
  1, 117, :_reduce_178,
  1, 117, :_reduce_179,
  4, 113, :_reduce_180,
  6, 111, :_reduce_181,
  6, 111, :_reduce_182,
  3, 114, :_reduce_183,
  4, 114, :_reduce_184,
  6, 114, :_reduce_185,
  0, 158, :_reduce_186,
  2, 158, :_reduce_187,
  3, 158, :_reduce_188,
  3, 158, :_reduce_189,
  4, 158, :_reduce_190,
  2, 155, :_reduce_191,
  1, 155, :_reduce_192,
  1, 157, :_reduce_193,
  3, 157, :_reduce_194,
  3, 157, :_reduce_195,
  4, 157, :_reduce_196,
  3, 159, :_reduce_197,
  4, 160, :_reduce_198,
  5, 160, :_reduce_199,
  4, 115, :_reduce_200,
  6, 115, :_reduce_201,
  2, 130, :_reduce_202,
  4, 116, :_reduce_203,
  1, 116, :_reduce_204,
  1, 108, :_reduce_205 ]

racc_reduce_n = 206

racc_shift_n = 376

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :ELSEIF => 4,
  :THEN => 5,
  :UNLESS => 6,
  :END => 7,
  :WHILE => 8,
  :UNTIL => 9,
  :BREAK => 10,
  :CONTINUE => 11,
  :TRY => 12,
  :CATCH => 13,
  :ENSURE => 14,
  :FOR => 15,
  :IN => 16,
  :DEF => 17,
  :DEF_BANG => 18,
  :SPLAT => 19,
  :CALL => 20,
  :BUILTIN_COMMAND => 21,
  :CLASS => 22,
  :NEW => 23,
  :DEFM => 24,
  :DEFM_BANG => 25,
  :SUPER => 26,
  :RIML_COMMAND => 27,
  :RETURN => 28,
  :NEWLINE => 29,
  :NUMBER => 30,
  :STRING_D => 31,
  :STRING_S => 32,
  :HEREDOC => 33,
  :EX_LITERAL => 34,
  :REGEXP => 35,
  :TRUE => 36,
  :FALSE => 37,
  :NIL => 38,
  :LET => 39,
  :UNLET => 40,
  :UNLET_BANG => 41,
  :IDENTIFIER => 42,
  :DICT_VAL => 43,
  :SCOPE_MODIFIER => 44,
  :SCOPE_MODIFIER_LITERAL => 45,
  :SPECIAL_VAR_PREFIX => 46,
  :FINISH => 47,
  "!" => 48,
  "*" => 49,
  "/" => 50,
  "%" => 51,
  "+" => 52,
  "-" => 53,
  "." => 54,
  ">" => 55,
  ">#" => 56,
  ">?" => 57,
  "<" => 58,
  "<#" => 59,
  "<?" => 60,
  ">=" => 61,
  ">=#" => 62,
  ">=?" => 63,
  "<=" => 64,
  "<=#" => 65,
  "<=?" => 66,
  "==" => 67,
  "==?" => 68,
  "==#" => 69,
  "=~" => 70,
  "=~?" => 71,
  "=~#" => 72,
  "!~" => 73,
  "!~?" => 74,
  "!~#" => 75,
  "!=" => 76,
  "!=?" => 77,
  "!=#" => 78,
  :IS => 79,
  :ISNOT => 80,
  "&&" => 81,
  "||" => 82,
  "?" => 83,
  "=" => 84,
  "+=" => 85,
  "-=" => 86,
  ".=" => 87,
  "," => 88,
  "(" => 89,
  ")" => 90,
  ";" => 91,
  "|" => 92,
  "[" => 93,
  "]" => 94,
  "{" => 95,
  "}" => 96,
  ":" => 97,
  "===" => 98 }

racc_nt_base = 99

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "ELSEIF",
  "THEN",
  "UNLESS",
  "END",
  "WHILE",
  "UNTIL",
  "BREAK",
  "CONTINUE",
  "TRY",
  "CATCH",
  "ENSURE",
  "FOR",
  "IN",
  "DEF",
  "DEF_BANG",
  "SPLAT",
  "CALL",
  "BUILTIN_COMMAND",
  "CLASS",
  "NEW",
  "DEFM",
  "DEFM_BANG",
  "SUPER",
  "RIML_COMMAND",
  "RETURN",
  "NEWLINE",
  "NUMBER",
  "STRING_D",
  "STRING_S",
  "HEREDOC",
  "EX_LITERAL",
  "REGEXP",
  "TRUE",
  "FALSE",
  "NIL",
  "LET",
  "UNLET",
  "UNLET_BANG",
  "IDENTIFIER",
  "DICT_VAL",
  "SCOPE_MODIFIER",
  "SCOPE_MODIFIER_LITERAL",
  "SPECIAL_VAR_PREFIX",
  "FINISH",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\".\"",
  "\">\"",
  "\">#\"",
  "\">?\"",
  "\"<\"",
  "\"<#\"",
  "\"<?\"",
  "\">=\"",
  "\">=#\"",
  "\">=?\"",
  "\"<=\"",
  "\"<=#\"",
  "\"<=?\"",
  "\"==\"",
  "\"==?\"",
  "\"==#\"",
  "\"=~\"",
  "\"=~?\"",
  "\"=~#\"",
  "\"!~\"",
  "\"!~?\"",
  "\"!~#\"",
  "\"!=\"",
  "\"!=?\"",
  "\"!=#\"",
  "IS",
  "ISNOT",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\"=\"",
  "\"+=\"",
  "\"-=\"",
  "\".=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"|\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\":\"",
  "\"===\"",
  "$start",
  "Root",
  "Expressions",
  "AnyExpression",
  "Terminator",
  "ExplicitCall",
  "Def",
  "Return",
  "UnletVariable",
  "ExLiteral",
  "If",
  "Unless",
  "For",
  "While",
  "Until",
  "Try",
  "ClassDefinition",
  "Super",
  "LoopKeyword",
  "EndScript",
  "ValueExpression",
  "RimlCommand",
  "UnaryOperator",
  "Assign",
  "DictGet",
  "ListOrDictGet",
  "VariableRetrieval",
  "Literal",
  "Call",
  "Heredoc",
  "Ternary",
  "ObjectInstantiation",
  "BinaryOperator",
  "Number",
  "String",
  "Regexp",
  "List",
  "Dictionary",
  "ScopeModifierLiteral",
  "ListLiteral",
  "ListItems",
  "DictionaryLiteral",
  "DictItems",
  "DictItem",
  "DictGetWithDotLiteral",
  "DictGetWithDot",
  "ListOrDictGetWithBrackets",
  "SubList",
  "Scope",
  "DefCallIdentifier",
  "ArgList",
  "AssignExpression",
  "AssignLHS",
  "CurlyBraceName",
  "FunctionType",
  "Keyword",
  "Block",
  "ParamList",
  "IfBlock",
  "Catch",
  "ElseBlock",
  "ElseifBlock" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_3(val, _values, result)
     result = Nodes.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_21(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_26(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_27(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_28(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_32(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_33(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_34(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_35(val, _values, result)
     result = WrapInParensNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_36(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_37(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_38(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_40(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_41(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_42(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_45(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_46(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_47(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_48(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_49(val, _values, result)
     result = StringNode.new(val[0], :s) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_50(val, _values, result)
     result = StringNode.new(val[0], :d) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_51(val, _values, result)
     result = HeredocNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 121)
  def _reduce_52(val, _values, result)
     result = RegexpNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 125)
  def _reduce_53(val, _values, result)
     result = ScopeModifierLiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_54(val, _values, result)
     result = ListNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_55(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 134)
  def _reduce_56(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_57(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_58(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 140)
  def _reduce_59(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_60(val, _values, result)
     result = DictionaryNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_61(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_62(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_63(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_64(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_65(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_66(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_67(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_68(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_69(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_70(val, _values, result)
     result = ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_71(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_72(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_73(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_74(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_75(val, _values, result)
     result = SublistNode.new([val[0], LiteralNode.new(' : '), val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_76(val, _values, result)
     result = SublistNode.new([val[0], LiteralNode.new(' :')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_77(val, _values, result)
     result = SublistNode.new([LiteralNode.new(': '), val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_78(val, _values, result)
     result = SublistNode.new([LiteralNode.new(':')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 190)
  def _reduce_79(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_80(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 195)
  def _reduce_81(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 196)
  def _reduce_82(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 200)
  def _reduce_83(val, _values, result)
     result = CallNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 201)
  def _reduce_84(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_85(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 203)
  def _reduce_86(val, _values, result)
     result = CallNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 204)
  def _reduce_87(val, _values, result)
     result = ExplicitCallNode.new(nil, nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_88(val, _values, result)
     result = RimlCommandNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 209)
  def _reduce_89(val, _values, result)
     result = RimlCommandNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_90(val, _values, result)
     result = ExplicitCallNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 214)
  def _reduce_91(val, _values, result)
     result = ExplicitCallNode.new(nil, val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_92(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 219)
  def _reduce_93(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 223)
  def _reduce_94(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 224)
  def _reduce_95(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 225)
  def _reduce_96(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_97(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 230)
  def _reduce_98(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 232)
  def _reduce_99(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_100(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_101(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_102(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 239)
  def _reduce_103(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 240)
  def _reduce_104(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 241)
  def _reduce_105(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 243)
  def _reduce_106(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_107(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_108(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 247)
  def _reduce_109(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 248)
  def _reduce_110(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 249)
  def _reduce_111(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 251)
  def _reduce_112(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_113(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 253)
  def _reduce_114(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 255)
  def _reduce_115(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 256)
  def _reduce_116(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_117(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 259)
  def _reduce_118(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 260)
  def _reduce_119(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 261)
  def _reduce_120(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_121(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 264)
  def _reduce_122(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 265)
  def _reduce_123(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 267)
  def _reduce_124(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 268)
  def _reduce_125(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 269)
  def _reduce_126(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 270)
  def _reduce_127(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 271)
  def _reduce_128(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 273)
  def _reduce_129(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_130(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 278)
  def _reduce_131(val, _values, result)
     result = UnaryOperatorNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 279)
  def _reduce_132(val, _values, result)
     result = UnaryOperatorNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_133(val, _values, result)
     result = UnaryOperatorNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 285)
  def _reduce_134(val, _values, result)
     result = AssignNode.new(val[1][0], val[1][1], val[1][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 286)
  def _reduce_135(val, _values, result)
     result = AssignNode.new(val[0][0], val[0][1], val[0][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 291)
  def _reduce_136(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_137(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_138(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 294)
  def _reduce_139(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 298)
  def _reduce_140(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 299)
  def _reduce_141(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 300)
  def _reduce_142(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 301)
  def _reduce_143(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_144(val, _values, result)
     result = GetVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 307)
  def _reduce_145(val, _values, result)
     result = GetSpecialVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 308)
  def _reduce_146(val, _values, result)
     result = GetCurlyBraceNameNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 312)
  def _reduce_147(val, _values, result)
     result = UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 313)
  def _reduce_148(val, _values, result)
     result = UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 314)
  def _reduce_149(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_150(val, _values, result)
     result = CurlyBraceVariable.new([ CurlyBracePart.new(val[0]), CurlyBracePart.new(val[2]) ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 319)
  def _reduce_151(val, _values, result)
     result = CurlyBraceVariable.new([ CurlyBracePart.new(val[1]), CurlyBracePart.new(val[3]) ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 320)
  def _reduce_152(val, _values, result)
     result = val[0] << CurlyBracePart.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 326)
  def _reduce_153(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], [], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 327)
  def _reduce_154(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], val[4], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_155(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], [val[4]], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 329)
  def _reduce_156(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], val[4] << val[6], val[8], val[9]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 333)
  def _reduce_157(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_158(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_159(val, _values, result)
     result = "DefMethodNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 340)
  def _reduce_160(val, _values, result)
     result = GetCurlyBraceNameNode.new('', val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 341)
  def _reduce_161(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 346)
  def _reduce_162(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 347)
  def _reduce_163(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 351)
  def _reduce_164(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 352)
  def _reduce_165(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 353)
  def _reduce_166(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_167(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 358)
  def _reduce_168(val, _values, result)
     result = ReturnNode.new(nil)    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 362)
  def _reduce_169(val, _values, result)
     result = FinishNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 367)
  def _reduce_170(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 368)
  def _reduce_171(val, _values, result)
     result = IfNode.new(val[1], Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 369)
  def _reduce_172(val, _values, result)
     result = IfNode.new(val[2], Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 373)
  def _reduce_173(val, _values, result)
     result = UnlessNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 374)
  def _reduce_174(val, _values, result)
     result = UnlessNode.new(val[1], Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 375)
  def _reduce_175(val, _values, result)
     result = UnlessNode.new(val[2], Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 379)
  def _reduce_176(val, _values, result)
     result = TernaryOperatorNode.new([val[0], val[2], val[4]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 383)
  def _reduce_177(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 387)
  def _reduce_178(val, _values, result)
     result = BreakNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 388)
  def _reduce_179(val, _values, result)
     result = ContinueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 392)
  def _reduce_180(val, _values, result)
     result = UntilNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 396)
  def _reduce_181(val, _values, result)
     result = ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 397)
  def _reduce_182(val, _values, result)
     result = ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 401)
  def _reduce_183(val, _values, result)
     result = TryNode.new(val[1], nil, nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 402)
  def _reduce_184(val, _values, result)
     result = TryNode.new(val[1], val[2], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 403)
  def _reduce_185(val, _values, result)
     result = TryNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 407)
  def _reduce_186(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 408)
  def _reduce_187(val, _values, result)
     result = [ CatchNode.new(nil, val[1]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 409)
  def _reduce_188(val, _values, result)
     result = [ CatchNode.new(val[1], val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 410)
  def _reduce_189(val, _values, result)
     result = val[0] << CatchNode.new(nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 411)
  def _reduce_190(val, _values, result)
     result = val[0] << CatchNode.new(val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 418)
  def _reduce_191(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 419)
  def _reduce_192(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 423)
  def _reduce_193(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 424)
  def _reduce_194(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 425)
  def _reduce_195(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 426)
  def _reduce_196(val, _values, result)
     result = val[1] << val[2] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 430)
  def _reduce_197(val, _values, result)
     result = ElseNode.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 434)
  def _reduce_198(val, _values, result)
     result = Nodes.new([ElseifNode.new(val[1], val[3])]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 435)
  def _reduce_199(val, _values, result)
     result = val[0] << ElseifNode.new(val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 439)
  def _reduce_200(val, _values, result)
     result = ClassDefinitionNode.new(val[1], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 440)
  def _reduce_201(val, _values, result)
     result = ClassDefinitionNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 444)
  def _reduce_202(val, _values, result)
     result = ObjectInstantiationNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 448)
  def _reduce_203(val, _values, result)
     result = SuperNode.new(val[2], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 449)
  def _reduce_204(val, _values, result)
     result = SuperNode.new([], false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 453)
  def _reduce_205(val, _values, result)
     result = ExLiteralNode.new(val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
