#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require 'pp'

module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 133)
  # This code will be put as-is in the parser class

  def parse(code, show_tokens=false)
    @tokens = Riml::Lexer.new.tokenize(code)
    pp(@tokens) if show_tokens
    do_parse
  end

  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    23,    28,    29,    22,    13,    15,    16,    17,    18,    19,
    20,    21,    23,    13,    42,    22,    13,    15,    16,    17,
    18,    19,    20,    21,    75,    12,    13,    14,    70,    68,
    65,    67,    74,    41,    73,    23,    14,    12,    22,    14,
    15,    16,    17,    18,    19,    20,    21,    23,    24,    14,
    22,    64,    15,    16,    17,    18,    19,    20,    21,    23,
    12,    40,    22,    39,    15,    16,    17,    18,    19,    20,
    21,    44,    12,    28,    29,    65,    65,    77,   nil,   nil,
    36,    37,    34,    35,    12,    36,    37,    34,    35,    30,
    31,    32,    33,    27,    26,    28,    29,    36,    37,    23,
    28,    29,    22,   nil,    15,    16,    17,    18,    19,    20,
    21,    23,    28,    29,    22,   nil,    15,    16,    17,    18,
    19,    20,    21,    23,    12,   nil,    22,   nil,    15,    16,
    17,    18,    19,    20,    21,    23,    12,   nil,    22,   nil,
    15,    16,    17,    18,    19,    20,    21,    23,    12,   nil,
    22,   nil,    15,    16,    17,    18,    19,    20,    21,    23,
    12,   nil,    22,   nil,    15,    16,    17,    18,    19,    20,
    21,    23,    12,   nil,    22,   nil,    15,    16,    17,    18,
    19,    20,    21,    23,    12,   nil,    22,   nil,    15,    16,
    17,    18,    19,    20,    21,    23,    12,   nil,    22,   nil,
    15,    16,    17,    18,    19,    20,    21,    23,    12,   nil,
    22,   nil,    15,    16,    17,    18,    19,    20,    21,    23,
    12,   nil,    22,   nil,    15,    16,    17,    18,    19,    20,
    21,    23,    12,   nil,    22,   nil,    15,    16,    17,    18,
    19,    20,    21,    23,    12,   nil,    22,   nil,    15,    16,
    17,    18,    19,    20,    21,    23,    12,   nil,    22,   nil,
    15,    16,    17,    18,    19,    20,    21,    23,    12,   nil,
    22,   nil,    15,    16,    17,    18,    19,    20,    21,    23,
    12,   nil,    22,   nil,    15,    16,    17,    18,    19,    20,
    21,   nil,    12,    36,    37,    34,    35,    30,    31,    32,
    33,    27,    26,   nil,    12,   nil,    58,   nil,    28,    29,
    36,    37,    34,    35,    30,    31,    32,    33,    27,    26,
   nil,   nil,    36,    37,   nil,    28,    29,    36,    37,    34,
    35,    30,    31,    32,    33,    27,    26,    28,    29,   nil,
   nil,   nil,    28,    29,    36,    37,    34,    35,    30,    31,
    32,    33,    27,    26,   nil,   nil,   nil,   nil,   nil,    28,
    29,    36,    37,    34,    35,    30,    31,    32,    33,    27,
    26,   nil,    36,    37,    34,    35,    28,    29,    36,    37,
    34,    35,    30,    31,    32,    33,    27,    28,    29,    36,
    37,    34,    35,    28,    29,    36,    37,    34,    35,    30,
    31,    32,    33,   nil,    28,    29,   nil,   nil,   nil,   nil,
    28,    29,    36,    37,    34,    35,    30,    31,    32,    33,
    27,    26,   nil,   nil,   nil,   nil,   nil,    28,    29,    36,
    37,    34,    35,    30,    31,    32,    33,    27,    26,    36,
    37,    34,    35,   nil,    28,    29,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    28,    29,    36,    37,    34,    35,
    30,    31,    32,    33,    27,    26,   nil,   nil,   nil,   nil,
   nil,    28,    29,    36,    37,    34,    35,    30,    31,    32,
    33,    27,    26,   nil,   nil,   nil,   nil,   nil,    28,    29 ]

racc_action_check = [
     0,    57,    57,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    65,     2,    22,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    71,     0,    71,     0,    64,    59,
    42,    59,    69,    21,    69,    27,     2,    65,    27,    65,
    27,    27,    27,    27,    27,    27,    27,    68,     1,    71,
    68,    42,    68,    68,    68,    68,    68,    68,    68,    12,
    27,    20,    12,    20,    12,    12,    12,    12,    12,    12,
    12,    24,    68,    56,    56,    73,    43,    74,   nil,   nil,
    50,    50,    50,    50,    12,    43,    43,    43,    43,    43,
    43,    43,    43,    43,    43,    50,    50,    54,    54,    39,
    43,    43,    39,   nil,    39,    39,    39,    39,    39,    39,
    39,    23,    54,    54,    23,   nil,    23,    23,    23,    23,
    23,    23,    23,    41,    39,   nil,    41,   nil,    41,    41,
    41,    41,    41,    41,    41,    25,    23,   nil,    25,   nil,
    25,    25,    25,    25,    25,    25,    25,    26,    41,   nil,
    26,   nil,    26,    26,    26,    26,    26,    26,    26,    40,
    25,   nil,    40,   nil,    40,    40,    40,    40,    40,    40,
    40,    37,    26,   nil,    37,   nil,    37,    37,    37,    37,
    37,    37,    37,    29,    40,   nil,    29,   nil,    29,    29,
    29,    29,    29,    29,    29,    30,    37,   nil,    30,   nil,
    30,    30,    30,    30,    30,    30,    30,    31,    29,   nil,
    31,   nil,    31,    31,    31,    31,    31,    31,    31,    32,
    30,   nil,    32,   nil,    32,    32,    32,    32,    32,    32,
    32,    33,    31,   nil,    33,   nil,    33,    33,    33,    33,
    33,    33,    33,    34,    32,   nil,    34,   nil,    34,    34,
    34,    34,    34,    34,    34,    35,    33,   nil,    35,   nil,
    35,    35,    35,    35,    35,    35,    35,    36,    34,   nil,
    36,   nil,    36,    36,    36,    36,    36,    36,    36,    28,
    35,   nil,    28,   nil,    28,    28,    28,    28,    28,    28,
    28,   nil,    36,    38,    38,    38,    38,    38,    38,    38,
    38,    38,    38,   nil,    28,   nil,    38,   nil,    38,    38,
    72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
   nil,   nil,    55,    55,   nil,    72,    72,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,    55,    55,   nil,
   nil,   nil,     3,     3,    62,    62,    62,    62,    62,    62,
    62,    62,    62,    62,   nil,   nil,   nil,   nil,   nil,    62,
    62,    45,    45,    45,    45,    45,    45,    45,    45,    45,
    45,   nil,    51,    51,    51,    51,    45,    45,    46,    46,
    46,    46,    46,    46,    46,    46,    46,    51,    51,    52,
    52,    52,    52,    46,    46,    47,    47,    47,    47,    47,
    47,    47,    47,   nil,    52,    52,   nil,   nil,   nil,   nil,
    47,    47,    48,    48,    48,    48,    48,    48,    48,    48,
    48,    48,   nil,   nil,   nil,   nil,   nil,    48,    48,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    53,
    53,    53,    53,   nil,    49,    49,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    53,    53,    60,    60,    60,    60,
    60,    60,    60,    60,    60,    60,   nil,   nil,   nil,   nil,
   nil,    60,    60,    61,    61,    61,    61,    61,    61,    61,
    61,    61,    61,   nil,   nil,   nil,   nil,   nil,    61,    61 ]

racc_action_pointer = [
    -2,    48,     7,   312,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    57,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,     8,     2,   109,    71,   133,   145,    33,   277,   181,
   193,   205,   217,   229,   241,   253,   265,   169,   278,    97,
   157,   121,    24,    70,   nil,   346,   363,   380,   397,   414,
    65,   357,   374,   424,    82,   307,    43,   -29,   nil,     3,
   441,   458,   329,   nil,    16,    10,   nil,   nil,    45,     6,
   nil,    20,   295,    69,    65,   nil,   nil,   nil ]

racc_action_default = [
    -1,   -49,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -49,   -15,   -16,   -17,   -18,   -19,   -20,   -21,
   -22,   -39,   -49,   -49,   -49,    -5,   -49,   -49,   -49,   -49,
   -49,   -49,   -49,   -49,   -49,   -49,   -49,   -49,   -49,   -24,
   -49,   -49,   -49,   -49,    78,    -4,   -27,   -28,   -29,   -30,
   -31,   -32,   -33,   -34,   -35,   -36,   -37,   -38,   -14,   -49,
   -25,   -40,   -41,   -42,   -44,   -49,   -47,   -23,   -49,   -49,
   -45,   -49,   -26,   -49,   -49,   -48,   -43,   -46 ]

racc_goto_table = [
    25,     2,    38,    63,    66,     1,    59,    69,   nil,   nil,
   nil,   nil,   nil,    43,   nil,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,   nil,    60,
    61,    62,   nil,   nil,    76,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    72,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    71,   nil,   nil,    25 ]

racc_goto_check = [
     4,     2,     3,    13,    13,     1,    12,    14,   nil,   nil,
   nil,   nil,   nil,     3,   nil,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,   nil,     3,
     3,     3,   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,     5,     1,   -10,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -33,   -39,   -57 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 33, :_reduce_1,
  1, 33, :_reduce_2,
  1, 34, :_reduce_3,
  3, 34, :_reduce_4,
  2, 34, :_reduce_5,
  1, 34, :_reduce_6,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  3, 35, :_reduce_14,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 37, :_reduce_17,
  1, 37, :_reduce_18,
  1, 37, :_reduce_19,
  1, 37, :_reduce_20,
  1, 37, :_reduce_21,
  1, 38, :_reduce_22,
  4, 38, :_reduce_23,
  0, 44, :_reduce_24,
  1, 44, :_reduce_25,
  3, 44, :_reduce_26,
  3, 39, :_reduce_27,
  3, 39, :_reduce_28,
  3, 39, :_reduce_29,
  3, 39, :_reduce_30,
  3, 39, :_reduce_31,
  3, 39, :_reduce_32,
  3, 39, :_reduce_33,
  3, 39, :_reduce_34,
  3, 39, :_reduce_35,
  3, 39, :_reduce_36,
  3, 39, :_reduce_37,
  3, 39, :_reduce_38,
  1, 40, :_reduce_39,
  3, 41, :_reduce_40,
  3, 41, :_reduce_41,
  3, 42, :_reduce_42,
  6, 42, :_reduce_43,
  0, 46, :_reduce_44,
  1, 46, :_reduce_45,
  3, 46, :_reduce_46,
  3, 43, :_reduce_47,
  3, 45, :_reduce_48 ]

racc_reduce_n = 49

racc_shift_n = 78

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :END => 4,
  :DEF => 5,
  :NEWLINE => 6,
  :NUMBER => 7,
  :STRING => 8,
  :TRUE => 9,
  :FALSE => 10,
  :NIL => 11,
  :IDENTIFIER => 12,
  :CONSTANT => 13,
  "!" => 14,
  "*" => 15,
  "/" => 16,
  "+" => 17,
  "-" => 18,
  ">" => 19,
  ">=" => 20,
  "<" => 21,
  "<=" => 22,
  "&&" => 23,
  "||" => 24,
  "=" => 25,
  "," => 26,
  "(" => 27,
  ")" => 28,
  ";" => 29,
  "==" => 30,
  "!=" => 31 }

racc_nt_base = 32

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "END",
  "DEF",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"==\"",
  "\"!=\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Operator",
  "Constant",
  "Assign",
  "Def",
  "If",
  "ArgList",
  "Block",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 26)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 27)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 33)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 34)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 35)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_14(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_17(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_18(val, _values, result)
     result = StringNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_19(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_20(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_21(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_22(val, _values, result)
     result = CallNode.new(val[0], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_23(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 73)
  def _reduce_24(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_25(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_26(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_27(val, _values, result)
     result = CallNode.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_28(val, _values, result)
     result = CallNode.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_29(val, _values, result)
     result = CallNode.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_30(val, _values, result)
     result = CallNode.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_31(val, _values, result)
     result = CallNode.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_32(val, _values, result)
     result = CallNode.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_33(val, _values, result)
     result = CallNode.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 87)
  def _reduce_34(val, _values, result)
     result = CallNode.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_35(val, _values, result)
     result = CallNode.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_36(val, _values, result)
     result = CallNode.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_37(val, _values, result)
     result = CallNode.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_38(val, _values, result)
     result = CallNode.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_39(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_40(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_41(val, _values, result)
     result = SetConstantNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_42(val, _values, result)
     result = DefNode.new(val[1], [], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_43(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_44(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_45(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_46(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_47(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 122)
  def _reduce_48(val, _values, result)
     result = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
