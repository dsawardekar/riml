#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require 'pp'

module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 191)
  # This code will be put as-is in the parser class

  # parses tokens or code into output nodes
  def parse(object, show_tokens=false)
    @tokens = if tokens?(object)
      object
    elsif code?(object)
      Riml::Lexer.new.tokenize(object)
    end
    pp(@tokens) if show_tokens
    do_parse
  end

  def next_token
    @tokens.shift
  end

  private
  # is an array of arrays and first five inner arrays are all doubles
  def tokens?(object)
    Array === object and object[0..4].all? {|e| e.respond_to?(:size) and e.size == 2}
  end

  def code?(object)
    String === object
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    32,    54,    18,    18,    33,    94,    34,    81,    29,    30,
    79,    95,    78,    18,    20,    21,    22,   116,    23,    24,
    25,   -30,    28,    27,    31,    93,   103,    85,   102,    18,
   106,    32,    19,    19,   114,    33,   113,    34,   107,    29,
    30,    16,    56,    19,    18,    20,    21,    22,    27,    23,
    24,    25,    95,    28,    27,    31,    39,    40,    53,    19,
    39,    40,    32,    95,    95,   115,    33,   -71,    34,    98,
    29,    30,    16,    82,    19,    18,    20,    21,    22,    94,
    23,    24,    25,    84,    28,    27,    31,   118,   119,    85,
    35,    95,    60,    85,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    16,   nil,    19,    49,    50,    45,    46,
    47,    48,    51,    41,    42,    43,    44,    38,    37,    87,
    49,    50,    49,    50,    39,    40,   nil,   nil,   nil,    85,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,    40,
    39,    40,    49,    50,    45,    46,    47,    48,    51,    41,
    42,    43,    44,    38,    37,   nil,   nil,   nil,    32,   nil,
    39,    40,    33,   nil,    34,   nil,    29,    30,   nil,    49,
    50,   nil,    20,    21,    22,   nil,    23,    24,    25,   nil,
    28,    27,    31,   nil,   nil,   nil,    32,    39,    40,   nil,
    33,   nil,    34,   nil,    29,    30,   nil,    49,    50,    16,
    20,    21,    22,   nil,    23,    24,    25,   nil,    28,    27,
    31,   nil,   nil,   nil,    32,    39,    40,   nil,    33,   nil,
    34,   nil,    29,    30,   nil,   nil,   nil,    16,    20,    21,
    22,   nil,    23,    24,    25,   -30,    28,    27,    31,   nil,
   nil,   nil,    32,   nil,   nil,   nil,    33,   nil,    34,   nil,
    29,    30,   nil,   nil,   nil,    16,    20,    21,    22,   nil,
    23,    24,    25,   nil,    28,    27,    31,   nil,   nil,   nil,
    32,   nil,   nil,   nil,    33,   nil,    34,   nil,    29,    30,
   nil,   nil,   nil,    16,    20,    21,    22,   nil,    23,    24,
    25,   nil,    28,    27,    31,   nil,   nil,   nil,    32,   nil,
   nil,   nil,    33,   nil,    34,   nil,    29,    30,   nil,   nil,
   nil,    16,    20,    21,    22,   nil,    23,    24,    25,   nil,
    28,    27,    31,   nil,   nil,   nil,    32,   nil,   nil,   nil,
    33,   nil,    34,   nil,    29,    30,   nil,   nil,   nil,    16,
    20,    21,    22,   nil,    23,    24,    25,   nil,    28,    27,
    31,   nil,   nil,   nil,    32,   nil,   nil,   nil,    33,   nil,
    34,   nil,    29,    30,   nil,   nil,   nil,    16,    20,    21,
    22,   nil,    23,    24,    25,   -30,    28,    27,    31,   nil,
   nil,   nil,    32,   nil,   nil,   nil,    33,   nil,    34,   nil,
    29,    30,   nil,   nil,   nil,    16,    20,    21,    22,   nil,
    23,    24,    25,   nil,    28,    27,    31,   nil,   nil,   nil,
    32,   nil,   nil,   nil,    33,   nil,    34,   nil,    29,    30,
   nil,   nil,   nil,    16,    20,    21,    22,   nil,    23,    24,
    25,   nil,    28,    27,    31,   nil,   nil,   nil,    32,   nil,
   nil,   nil,    33,   nil,    34,   nil,    29,    30,   nil,   nil,
   nil,    16,    20,    21,    22,   nil,    23,    24,    25,   nil,
    28,    27,    31,   nil,   nil,   nil,    32,   nil,   nil,   nil,
    33,   nil,    34,   nil,    29,    30,   nil,   nil,   nil,    16,
    20,    21,    22,   nil,    23,    24,    25,   nil,    28,    27,
    31,   nil,   nil,   nil,    32,   nil,   nil,   nil,    33,   nil,
    34,   nil,    29,    30,   nil,   nil,   nil,    16,    20,    21,
    22,   nil,    23,    24,    25,   nil,    28,    27,    31,   nil,
   nil,   nil,    32,   nil,   nil,   nil,    33,   nil,    34,   nil,
    29,    30,   nil,   nil,   nil,    16,    20,    21,    22,   nil,
    23,    24,    25,   nil,    28,    27,    31,   nil,   nil,   nil,
    32,   nil,   nil,   nil,    33,   nil,    34,   nil,    29,    30,
   nil,   nil,   nil,    16,    20,    21,    22,   nil,    23,    24,
    25,   nil,    28,    27,    31,   nil,   nil,   nil,    32,   nil,
   nil,   nil,    33,   nil,    34,   nil,    29,    30,   nil,   nil,
   nil,    16,    20,    21,    22,   nil,    23,    24,    25,   nil,
    28,    27,    31,   nil,   nil,   nil,    32,   nil,   nil,   nil,
    33,   nil,    34,   nil,    29,    30,   nil,   nil,   nil,    16,
    20,    21,    22,   nil,    23,    24,    25,   nil,    28,    27,
    31,   nil,   nil,   nil,    32,   nil,   nil,   nil,    33,   nil,
    34,   nil,    29,    30,   nil,   nil,   nil,    16,    20,    21,
    22,   nil,    23,    24,    25,   nil,    28,    27,    31,   nil,
   nil,   nil,    32,   nil,   nil,   nil,    33,   nil,    34,   nil,
    29,    30,   nil,   nil,   nil,    16,    20,    21,    22,   nil,
    23,    24,    25,   nil,    28,    27,    31,   nil,   nil,   nil,
    32,   nil,   nil,   nil,    33,   nil,    34,   nil,    29,    30,
   nil,   nil,   nil,    16,    20,    21,    22,   nil,    23,    24,
    25,   nil,    28,    27,    31,   nil,   nil,   nil,    32,   nil,
   nil,   nil,    33,   nil,    34,   nil,    29,    30,   nil,   nil,
   nil,    16,    20,    21,    22,   nil,    23,    24,    25,   nil,
    28,    27,    31,   nil,   nil,   nil,    32,   nil,   nil,   nil,
    33,   nil,    34,   nil,    29,    30,   nil,   nil,   nil,    16,
    20,    21,    22,   nil,    23,    24,    25,   nil,    28,    27,
    31,   nil,   nil,   nil,    32,   nil,   nil,   nil,    33,   nil,
    34,   nil,    29,    30,   nil,   nil,   nil,    16,    20,    21,
    22,   nil,    23,    24,    25,   nil,    28,    27,    31,   nil,
   nil,   nil,    32,   nil,   nil,   nil,    33,   nil,    34,   nil,
    29,    30,   nil,   nil,   nil,    16,    20,    21,    22,   nil,
    23,    24,    25,   nil,    28,    27,    31,   nil,   nil,   nil,
    32,   nil,   nil,   nil,    33,   nil,    34,   nil,    29,    30,
   nil,   nil,   nil,    16,    20,    21,    22,   nil,    23,    24,
    25,   nil,    28,    27,    31,   nil,   nil,   nil,    32,   nil,
   nil,   nil,    33,    95,    34,   nil,    29,    30,   nil,   nil,
   nil,    16,    20,    21,    22,   nil,    23,    24,    25,   nil,
    28,    27,    31,    95,    49,    50,    45,    46,    47,    48,
    51,    41,    42,    43,    44,    38,    37,   nil,   nil,    16,
   nil,   nil,    39,    40,    49,    50,    45,    46,    47,    48,
    51,    41,    42,    43,    44,    38,    37,    85,   nil,   nil,
   nil,   nil,    39,    40,   nil,   nil,   nil,   nil,   nil,   nil,
    49,    50,    45,    46,    47,    48,    51,    41,    42,    43,
    44,    38,    37,   nil,   nil,   nil,   nil,   nil,    39,    40,
    49,    50,    45,    46,    47,    48,    51,    41,    42,    43,
    44,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,    40,
    49,    50,    45,    46,    47,    48,    51,    41,    42,    43,
    44,    38,    37,   nil,   nil,   nil,   nil,   nil,    39,    40,
    49,    50,    45,    46,    47,    48,    51,    41,    42,    43,
    44,    38,    37,   nil,   nil,   nil,   nil,   nil,    39,    40,
    49,    50,    45,    46,    47,    48,    51,    41,    42,    43,
    44,    38,    37,   nil,   nil,   nil,   nil,   nil,    39,    40,
    49,    50,    45,    46,    47,    48,    51,    49,    50,    45,
    46,    47,    48,    51,   nil,   nil,   nil,   nil,    39,    40,
   nil,   nil,   nil,   nil,   nil,    39,    40,    49,    50,    45,
    46,    47,    48,    51,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,    40,    49,    50,    45,
    46,    47,    48,    51,    41,    42,    43,    44,    38,   nil,
   nil,   nil,   nil,   nil,   nil,    39,    40,    49,    50,    45,
    46,    47,    48,    51,    41,    42,    43,    44,    38,    37,
   nil,   nil,   nil,   nil,   nil,    39,    40,    49,    50,    45,
    46,    47,    48,    51,    41,    42,    43,    44,    38,    37,
   nil,   nil,   nil,   nil,   nil,    39,    40,    49,    50,    45,
    46,    47,    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,    40,    49,    50,    45,
    46,    47,    48,    51,    41,    42,    43,    44,    38,    37,
   nil,   nil,   nil,   nil,   nil,    39,    40,    49,    50,    45,
    46,    47,    48,    51,    41,    42,    43,    44,    38,    37,
   nil,   nil,   nil,    77,   nil,    39,    40,    49,    50,    45,
    46,    47,    48,    51,    41,    42,    43,    44,    38,    37,
   nil,   nil,   nil,   nil,   nil,    39,    40,    49,    50,    45,
    46,    47,    48,    51,    41,    42,    43,    44,    38,    37,
   nil,   nil,   nil,   nil,   nil,    39,    40,    49,    50,    45,
    46,    47,    48,    51,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,    40 ]

racc_action_check = [
     0,    28,     2,   121,     0,    81,     0,    55,     0,     0,
    53,    83,    53,     0,     0,     0,     0,   109,     0,     0,
     0,     0,     0,     0,     0,    81,    89,    92,    89,   109,
    93,   119,     2,   121,   105,   119,   105,   119,    95,   119,
   119,     0,    30,     0,   119,   119,   119,   119,    29,   119,
   119,   119,    88,   119,   119,   119,    75,    75,    26,   109,
    74,    74,    98,   104,    86,   107,    98,    98,    98,    85,
    98,    98,   119,    56,   119,    98,    98,    98,    98,   113,
    98,    98,    98,    57,    98,    98,    98,   114,   116,   117,
     1,   120,    35,    57,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    98,   nil,    98,    57,    57,    57,    57,
    57,    57,    57,    57,    57,    57,    57,    57,    57,    58,
    71,    71,    70,    70,    57,    57,   nil,   nil,   nil,    58,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    71,    71,
    70,    70,    58,    58,    58,    58,    58,    58,    58,    58,
    58,    58,    58,    58,    58,   nil,   nil,   nil,    41,   nil,
    58,    58,    41,   nil,    41,   nil,    41,    41,   nil,    72,
    72,   nil,    41,    41,    41,   nil,    41,    41,    41,   nil,
    41,    41,    41,   nil,   nil,   nil,   103,    72,    72,   nil,
   103,   nil,   103,   nil,   103,   103,   nil,    73,    73,    41,
   103,   103,   103,   nil,   103,   103,   103,   nil,   103,   103,
   103,   nil,   nil,   nil,    78,    73,    73,   nil,    78,   nil,
    78,   nil,    78,    78,   nil,   nil,   nil,   103,    78,    78,
    78,   nil,    78,    78,    78,    78,    78,    78,    78,   nil,
   nil,   nil,    32,   nil,   nil,   nil,    32,   nil,    32,   nil,
    32,    32,   nil,   nil,   nil,    78,    32,    32,    32,   nil,
    32,    32,    32,   nil,    32,    32,    32,   nil,   nil,   nil,
    33,   nil,   nil,   nil,    33,   nil,    33,   nil,    33,    33,
   nil,   nil,   nil,    32,    33,    33,    33,   nil,    33,    33,
    33,   nil,    33,    33,    33,   nil,   nil,   nil,    34,   nil,
   nil,   nil,    34,   nil,    34,   nil,    34,    34,   nil,   nil,
   nil,    33,    34,    34,    34,   nil,    34,    34,    34,   nil,
    34,    34,    34,   nil,   nil,   nil,    87,   nil,   nil,   nil,
    87,   nil,    87,   nil,    87,    87,   nil,   nil,   nil,    34,
    87,    87,    87,   nil,    87,    87,    87,   nil,    87,    87,
    87,   nil,   nil,   nil,    36,   nil,   nil,   nil,    36,   nil,
    36,   nil,    36,    36,   nil,   nil,   nil,    87,    36,    36,
    36,   nil,    36,    36,    36,    36,    36,    36,    36,   nil,
   nil,   nil,    37,   nil,   nil,   nil,    37,   nil,    37,   nil,
    37,    37,   nil,   nil,   nil,    36,    37,    37,    37,   nil,
    37,    37,    37,   nil,    37,    37,    37,   nil,   nil,   nil,
    38,   nil,   nil,   nil,    38,   nil,    38,   nil,    38,    38,
   nil,   nil,   nil,    37,    38,    38,    38,   nil,    38,    38,
    38,   nil,    38,    38,    38,   nil,   nil,   nil,    39,   nil,
   nil,   nil,    39,   nil,    39,   nil,    39,    39,   nil,   nil,
   nil,    38,    39,    39,    39,   nil,    39,    39,    39,   nil,
    39,    39,    39,   nil,   nil,   nil,    40,   nil,   nil,   nil,
    40,   nil,    40,   nil,    40,    40,   nil,   nil,   nil,    39,
    40,    40,    40,   nil,    40,    40,    40,   nil,    40,    40,
    40,   nil,   nil,   nil,    16,   nil,   nil,   nil,    16,   nil,
    16,   nil,    16,    16,   nil,   nil,   nil,    40,    16,    16,
    16,   nil,    16,    16,    16,   nil,    16,    16,    16,   nil,
   nil,   nil,    42,   nil,   nil,   nil,    42,   nil,    42,   nil,
    42,    42,   nil,   nil,   nil,    16,    42,    42,    42,   nil,
    42,    42,    42,   nil,    42,    42,    42,   nil,   nil,   nil,
    43,   nil,   nil,   nil,    43,   nil,    43,   nil,    43,    43,
   nil,   nil,   nil,    42,    43,    43,    43,   nil,    43,    43,
    43,   nil,    43,    43,    43,   nil,   nil,   nil,    54,   nil,
   nil,   nil,    54,   nil,    54,   nil,    54,    54,   nil,   nil,
   nil,    43,    54,    54,    54,   nil,    54,    54,    54,   nil,
    54,    54,    54,   nil,   nil,   nil,    45,   nil,   nil,   nil,
    45,   nil,    45,   nil,    45,    45,   nil,   nil,   nil,    54,
    45,    45,    45,   nil,    45,    45,    45,   nil,    45,    45,
    45,   nil,   nil,   nil,    46,   nil,   nil,   nil,    46,   nil,
    46,   nil,    46,    46,   nil,   nil,   nil,    45,    46,    46,
    46,   nil,    46,    46,    46,   nil,    46,    46,    46,   nil,
   nil,   nil,    47,   nil,   nil,   nil,    47,   nil,    47,   nil,
    47,    47,   nil,   nil,   nil,    46,    47,    47,    47,   nil,
    47,    47,    47,   nil,    47,    47,    47,   nil,   nil,   nil,
    48,   nil,   nil,   nil,    48,   nil,    48,   nil,    48,    48,
   nil,   nil,   nil,    47,    48,    48,    48,   nil,    48,    48,
    48,   nil,    48,    48,    48,   nil,   nil,   nil,    49,   nil,
   nil,   nil,    49,   nil,    49,   nil,    49,    49,   nil,   nil,
   nil,    48,    49,    49,    49,   nil,    49,    49,    49,   nil,
    49,    49,    49,   nil,   nil,   nil,    50,   nil,   nil,   nil,
    50,   nil,    50,   nil,    50,    50,   nil,   nil,   nil,    49,
    50,    50,    50,   nil,    50,    50,    50,   nil,    50,    50,
    50,   nil,   nil,   nil,    51,   nil,   nil,   nil,    51,   nil,
    51,   nil,    51,    51,   nil,   nil,   nil,    50,    51,    51,
    51,   nil,    51,    51,    51,   nil,    51,    51,    51,   nil,
   nil,   nil,    84,   nil,   nil,   nil,    84,   nil,    84,   nil,
    84,    84,   nil,   nil,   nil,    51,    84,    84,    84,   nil,
    84,    84,    84,   nil,    84,    84,    84,   nil,   nil,   nil,
    79,   nil,   nil,   nil,    79,   nil,    79,   nil,    79,    79,
   nil,   nil,   nil,    84,    79,    79,    79,   nil,    79,    79,
    79,   nil,    79,    79,    79,   nil,   nil,   nil,    44,   nil,
   nil,   nil,    44,    97,    44,   nil,    44,    44,   nil,   nil,
   nil,    79,    44,    44,    44,   nil,    44,    44,    44,   nil,
    44,    44,    44,   100,    97,    97,    97,    97,    97,    97,
    97,    97,    97,    97,    97,    97,    97,   nil,   nil,    44,
   nil,   nil,    97,    97,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,    59,   nil,   nil,
   nil,   nil,   100,   100,   nil,   nil,   nil,   nil,   nil,   nil,
    59,    59,    59,    59,    59,    59,    59,    59,    59,    59,
    59,    59,    59,   nil,   nil,   nil,   nil,   nil,    59,    59,
    63,    63,    63,    63,    63,    63,    63,    63,    63,    63,
    63,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    63,    63,
    64,    64,    64,    64,    64,    64,    64,    64,    64,    64,
    64,    64,    64,   nil,   nil,   nil,   nil,   nil,    64,    64,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,   nil,   nil,   nil,   nil,   nil,    65,    65,
   111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   nil,   nil,   nil,   nil,   nil,   111,   111,
    67,    67,    67,    67,    67,    67,    67,    68,    68,    68,
    68,    68,    68,    68,   nil,   nil,   nil,   nil,    67,    67,
   nil,   nil,   nil,   nil,   nil,    68,    68,    69,    69,    69,
    69,    69,    69,    69,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    69,    69,    62,    62,    62,
    62,    62,    62,    62,    62,    62,    62,    62,    62,   nil,
   nil,   nil,   nil,   nil,   nil,    62,    62,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
   nil,   nil,   nil,   nil,   nil,     3,     3,    91,    91,    91,
    91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
   nil,   nil,   nil,   nil,   nil,    91,    91,    76,    76,    76,
    76,    76,    76,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    76,    76,    90,    90,    90,
    90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
   nil,   nil,   nil,   nil,   nil,    90,    90,    52,    52,    52,
    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
   nil,   nil,   nil,    52,   nil,    52,    52,    80,    80,    80,
    80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
   nil,   nil,   nil,   nil,   nil,    80,    80,    61,    61,    61,
    61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
   nil,   nil,   nil,   nil,   nil,    61,    61,    66,    66,    66,
    66,    66,    66,    66,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    66,    66 ]

racc_action_pointer = [
    -2,    90,   -13,  1069,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   492,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    35,   nil,   -40,    23,
    30,   nil,   240,   268,   296,    92,   352,   380,   408,   436,
   464,   156,   520,   548,   856,   604,   632,   660,   688,   716,
   744,   772,  1149,   -31,   576,   -16,    50,    78,   114,   902,
   nil,  1189,  1049,   922,   942,   962,  1209,  1002,  1009,  1029,
    94,    92,   141,   169,    14,    10,  1109,   nil,   212,   828,
  1169,   -18,   nil,     4,   800,    56,    57,   324,    45,   -16,
  1129,  1089,    12,     7,   nil,    23,   nil,   856,    60,   nil,
   876,   nil,   nil,   184,    56,    -8,   nil,    51,   nil,    14,
   nil,   982,   nil,    56,    64,   nil,    73,    74,   nil,    29,
    84,   -12,   nil ]

racc_action_default = [
    -1,   -72,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -16,   -17,   -30,   -19,   -20,   -21,
   -22,   -23,   -24,   -25,   -26,   -27,   -72,   -29,   -49,   -30,
   -72,   -60,   -30,   -30,   -30,   -72,    -5,   -30,   -30,   -30,
   -30,   -30,   -30,   -30,   -30,   -30,   -30,   -30,   -30,   -30,
   -30,   -30,   -72,   -52,   -30,   -72,   -72,   -72,   -72,   -72,
   123,    -4,   -34,   -35,   -36,   -37,   -38,   -39,   -40,   -41,
   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -18,   -31,   -30,
   -51,   -56,   -57,   -72,   -30,   -72,   -72,   -30,   -72,   -72,
   -32,   -50,   -72,   -61,   -55,   -59,   -64,   -72,   -30,   -66,
   -72,   -68,   -28,   -30,   -72,   -72,   -62,   -72,   -65,   -70,
   -67,   -33,   -53,   -56,   -72,   -58,   -72,   -72,   -63,   -30,
   -72,   -69,   -54 ]

racc_goto_table = [
     2,    36,    52,    83,    86,    88,    89,    55,     1,    92,
   105,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    57,    58,
    59,   nil,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,   104,    96,
    80,   117,    99,   nil,   101,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   108,   nil,   nil,   110,   nil,   nil,   nil,
   112,   nil,   nil,   120,    90,    91,   nil,   nil,   nil,   nil,
    97,   nil,   nil,   100,   nil,   nil,   122,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   111,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   109,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   121,
    36 ]

racc_goto_check = [
     2,     4,     3,    20,    20,    20,    18,    17,     1,    19,
    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,     3,
     3,   nil,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,    20,    21,
     3,    19,    21,   nil,    21,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    21,   nil,   nil,    21,   nil,   nil,   nil,
    21,   nil,   nil,    20,     3,     3,   nil,   nil,   nil,   nil,
     3,   nil,   nil,     3,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
     4 ]

racc_goto_pointer = [
   nil,     8,     0,   -14,    -1,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -22,   -72,   -72,
   -54,   -44,   -83 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    17,    26,   nil,   nil,
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 49, :_reduce_1,
  1, 49, :_reduce_2,
  1, 50, :_reduce_3,
  3, 50, :_reduce_4,
  2, 50, :_reduce_5,
  1, 50, :_reduce_6,
  1, 51, :_reduce_7,
  1, 51, :_reduce_8,
  1, 51, :_reduce_9,
  1, 51, :_reduce_10,
  1, 51, :_reduce_11,
  1, 51, :_reduce_12,
  1, 51, :_reduce_13,
  1, 51, :_reduce_14,
  1, 51, :_reduce_15,
  1, 51, :_reduce_16,
  1, 51, :_reduce_17,
  3, 51, :_reduce_18,
  1, 51, :_reduce_19,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 59, :_reduce_22,
  1, 59, :_reduce_23,
  1, 59, :_reduce_24,
  1, 59, :_reduce_25,
  1, 59, :_reduce_26,
  1, 59, :_reduce_27,
  5, 54, :_reduce_28,
  1, 65, :_reduce_29,
  0, 65, :_reduce_30,
  0, 66, :_reduce_31,
  1, 66, :_reduce_32,
  3, 66, :_reduce_33,
  3, 53, :_reduce_34,
  3, 53, :_reduce_35,
  3, 53, :_reduce_36,
  3, 53, :_reduce_37,
  3, 53, :_reduce_38,
  3, 53, :_reduce_39,
  3, 53, :_reduce_40,
  3, 53, :_reduce_41,
  3, 53, :_reduce_42,
  3, 53, :_reduce_43,
  3, 53, :_reduce_44,
  3, 53, :_reduce_45,
  3, 53, :_reduce_46,
  3, 53, :_reduce_47,
  3, 53, :_reduce_48,
  1, 60, :_reduce_49,
  4, 55, :_reduce_50,
  3, 55, :_reduce_51,
  2, 58, :_reduce_52,
  6, 56, :_reduce_53,
  9, 56, :_reduce_54,
  1, 67, :_reduce_55,
  0, 67, :_reduce_56,
  3, 57, :_reduce_57,
  3, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 64, :_reduce_60,
  0, 70, :_reduce_61,
  1, 70, :_reduce_62,
  3, 70, :_reduce_63,
  4, 61, :_reduce_64,
  5, 61, :_reduce_65,
  4, 62, :_reduce_66,
  5, 62, :_reduce_67,
  4, 63, :_reduce_68,
  6, 68, :_reduce_69,
  3, 68, :_reduce_70,
  2, 68, :_reduce_71 ]

racc_reduce_n = 72

racc_shift_n = 123

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :ELSIF => 4,
  :THEN => 5,
  :UNLESS => 6,
  :END => 7,
  :WHILE => 8,
  :UNTIL => 9,
  :DEF => 10,
  :COMMAND => 11,
  :NARGS => 12,
  :INDENT => 13,
  :DEDENT => 14,
  :NEWLINE => 15,
  :NUMBER => 16,
  :STRING => 17,
  :LIST => 18,
  :DICT => 19,
  :TRUE => 20,
  :FALSE => 21,
  :NIL => 22,
  :IDENTIFIER => 23,
  :CONSTANT => 24,
  :SCOPE_MODIFIER => 25,
  :FINISH => 26,
  "!" => 27,
  "*" => 28,
  "/" => 29,
  "+" => 30,
  "+=" => 31,
  "-" => 32,
  "-=" => 33,
  "." => 34,
  ">" => 35,
  ">=" => 36,
  "<" => 37,
  "<=" => 38,
  "&&" => 39,
  "||" => 40,
  "=" => 41,
  "," => 42,
  "(" => 43,
  ")" => 44,
  ";" => 45,
  "==" => 46,
  "!=" => 47 }

racc_nt_base = 48

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "ELSIF",
  "THEN",
  "UNLESS",
  "END",
  "WHILE",
  "UNTIL",
  "DEF",
  "COMMAND",
  "NARGS",
  "INDENT",
  "DEDENT",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "LIST",
  "DICT",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "SCOPE_MODIFIER",
  "FINISH",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"+=\"",
  "\"-\"",
  "\"-=\"",
  "\".\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"==\"",
  "\"!=\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Operator",
  "Call",
  "Assign",
  "Def",
  "Command",
  "VariableRetrieval",
  "Literal",
  "Constant",
  "If",
  "Unless",
  "While",
  "EndScript",
  "Scope",
  "ArgList",
  "Keyword",
  "Block",
  "End",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 31)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 37)
  def _reduce_3(val, _values, result)
     result = Nodes.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 38)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 51)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_18(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 20 omitted

# reduce 21 omitted

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_22(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_23(val, _values, result)
     result = StringNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_24(val, _values, result)
     result = ListNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_25(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_26(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_27(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_28(val, _values, result)
     result = CallNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_30(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_32(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_33(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_34(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_35(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_36(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_37(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_38(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_39(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_40(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_41(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_42(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_43(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_44(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_45(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_46(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_47(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_48(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0]] << val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_49(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_50(val, _values, result)
     result = SetVariableNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_51(val, _values, result)
     result = SetConstantNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 125)
  def _reduce_52(val, _values, result)
     result = GetVariableNode.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_53(val, _values, result)
     indent = val[4].pop; result = DefNode.new(val[1], val[2], [],     val[3], val[4], indent) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_54(val, _values, result)
     indent = val[7].pop; result = DefNode.new(val[1], val[2], val[4], val[6], val[7], indent) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_55(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_56(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_57(val, _values, result)
    
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_60(val, _values, result)
     result = FinishNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_61(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_62(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_63(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_64(val, _values, result)
     indent = val[2].pop; result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_65(val, _values, result)
     result = IfNode.new( val[1], Nodes.new([val[3]]) ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_66(val, _values, result)
     indent = val[2].pop; result = UnlessNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_67(val, _values, result)
     result = UnlessNode.new( val[1], Nodes.new([val[3]]) ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_68(val, _values, result)
     indent = val[2].pop; result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_69(val, _values, result)
     result = val[2] << ElseNode.new(val[5]) << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_70(val, _values, result)
     result = val[2] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_71(val, _values, result)
     result = Nodes.new([]) << val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
