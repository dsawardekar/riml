#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require File.expand_path("../ast_rewriter", __FILE__)
  require File.expand_path("../errors", __FILE__)
module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 534)
  # This code will be put as-is in the parser class

  attr_accessor :ast_rewriter

  # parses tokens or code into output nodes
  def parse(object, ast_rewriter = Riml::AST_Rewriter.new, include_file = nil)
    if tokens?(object)
      @tokens = object
    elsif code?(object)
      @lexer = Riml::Lexer.new(object)
    end

    begin
      ast = do_parse
    rescue Racc::ParseError => e
      raise unless @lexer
      if @lexer.prev_token_is_keyword?
        warning = "#{@lexer.invalid_keyword.inspect} is a keyword, and cannot " \
          "be used as a variable name"
      end
      error_msg = "on line #{@lexer.lineno}: #{e.message}"
      error_msg << "\n\n#{warning}" if warning
      raise Riml::ParseError, error_msg
    end

    @ast_rewriter ||= ast_rewriter
    return ast unless @ast_rewriter
    @ast_rewriter.ast = ast
    @ast_rewriter.rewrite(include_file)
  end

  # get the next token from either the list of tokens provided, or
  # the lexer getting the next token
  def next_token
    return @tokens.shift unless @lexer
    @lexer.next_token
  end

  private
  def tokens?(object)
    Array === object
  end

  def code?(object)
    String === object
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'131,58,266,201,132,360,393,394,201,201,387,365,423,142,55,189,86,367',
'366,385,385,135,36,45,47,46,36,48,43,44,319,388,36,424,264,58,49,67',
'36,59,408,263,407,60,61,125,126,128,123,124,127,111,112,113,117,118',
'119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104',
'103,129,130,97,96,133,167,77,37,169,36,78,37,79,82,80,81,84,37,101,83',
'36,72,73,37,56,55,85,86,74,36,87,57,75,36,45,47,46,88,48,43,44,62,69',
'70,-110,269,58,49,67,76,59,352,201,201,60,61,314,267,358,255,298,135',
'316,385,385,262,298,301,185,37,261,302,149,148,-166,-166,-166,-166,201',
'143,37,201,355,48,-42,-42,48,370,269,37,145,28,371,37,51,77,53,160,351',
'78,145,79,82,80,81,84,145,267,83,160,72,73,160,56,55,85,86,74,160,87',
'57,75,36,45,47,46,88,48,43,44,62,69,70,-41,-41,58,49,67,76,59,160,-43',
'-43,60,61,197,157,-163,-163,-163,-163,-47,-47,372,-191,267,373,-44,-44',
'160,-84,-84,-84,-84,-166,-166,-166,-166,248,143,262,157,349,260,-110',
'261,58,49,67,348,28,-98,37,51,77,53,145,269,78,-97,79,82,80,81,84,51',
'145,83,160,72,73,376,56,55,85,86,74,160,87,57,75,36,45,47,46,88,48,43',
'44,62,69,70,-110,160,58,49,67,76,59,347,-98,248,60,61,-190,135,-46,-46',
'-97,160,-45,-45,125,126,128,135,393,412,125,126,128,123,124,127,-164',
'-164,-164,-164,181,182,183,184,259,125,126,128,123,124,127,28,248,37',
'51,77,53,149,148,78,346,79,82,80,81,84,145,342,83,201,72,73,101,56,55',
'85,86,74,101,87,57,75,36,45,47,46,88,48,43,44,62,69,70,101,379,58,49',
'67,76,59,58,49,67,60,61,304,380,-163,-163,-163,-163,58,49,67,160,339',
'381,202,382,58,145,205,206,208,331,135,145,327,101,305,101,101,201,252',
'125,126,128,123,124,127,28,201,37,51,201,53,138,125,126,128,123,124',
'127,111,112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107',
'106,108,110,109,102,104,103,129,130,97,96,133,101,77,253,313,312,78',
'405,79,82,80,81,84,406,101,83,311,72,73,409,56,55,85,86,74,410,87,57',
'75,36,45,47,46,88,48,43,44,62,69,70,-110,361,58,49,67,76,59,413,137',
'415,60,61,308,416,417,418,201,420,421,297,352,257,352,135,95,259,259',
'135,432,410,259,101,284,248,135,436,305,352,438,89,145,125,126,128,123',
'124,127,28,285,37,51,284,53,441,125,126,128,123,124,127,111,112,113',
'117,118,119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109',
'102,104,103,129,130,97,96,133,101,77,,,,78,,79,82,80,81,84,,101,83,',
'72,73,,56,55,85,86,74,,87,57,75,36,45,47,46,88,48,43,44,62,69,70,,,58',
'49,67,76,59,,,,60,61,,,125,126,128,123,124,127,111,112,113,117,118,119',
'114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104,103',
'129,130,97,28,,37,51,77,53,,,78,,79,82,80,81,84,101,,83,,72,73,,56,55',
'85,86,74,,87,57,75,,45,47,46,88,48,43,44,62,69,70,-110,,58,49,67,76',
'59,,,,60,61,125,126,128,123,124,127,111,112,113,117,118,119,114,115',
'116,120,121,122,98,100,99,105,107,106,108,110,109,102,104,103,129,130',
'97,96,133,28,,77,51,,53,78,-230,79,82,80,81,84,101,,83,,72,73,,56,55',
'85,86,74,,87,57,75,36,45,47,46,88,48,43,44,62,69,70,,,58,49,67,76,59',
',,,60,61,,395,,,,,,,,,,,,,,,,,,,,,,,,,,,,125,126,128,123,124,127,28',
',37,51,,53,125,126,128,123,124,127,111,112,113,117,118,119,114,115,116',
'120,121,122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,97',
'96,133,390,101,,,,,,,142,55,,86,,101,87,,,,45,47,46,,48,43,44,62,,,',
',58,49,67,,59,,,,60,61,125,126,128,123,124,127,111,112,113,117,118,119',
'114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104,103',
'129,130,97,96,133,28,,,51,,53,,251,142,55,,86,,101,87,,,,45,47,46,,48',
'43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,,86,,,87,,,,45,47,46,,48,43',
'44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,251,45,47,46',
',48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,335,,45',
'47,46,,48,43,44,62,,,-110,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87',
'53,,,45,47,46,,48,43,44,62,,,-110,,58,49,67,,59,,,,60,61,142,55,28,86',
',51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55',
'28,86,,51,87,53,,163,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61',
'142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60',
'61,,142,55,161,86,,51,87,53,,,45,47,46,,48,43,44,62,,,-110,,58,49,67',
',59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49',
'67,,59,,,,60,61,,142,55,172,86,,51,87,53,,,45,47,46,,48,43,44,62,,,',
',58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62',
',,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43',
'44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48',
'43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46',
',48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47',
'46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,',
'45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87',
'53,,,45,47,46,,48,43,44,62,125,126,128,,58,49,67,,59,,,,60,61,,142,55',
'28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,-110,,58,49,67,,59,,,,60,61',
',101,28,-113,,51,,53,125,126,128,123,124,127,111,112,113,117,118,119',
'114,115,116,120,121,122,,,125,126,128,142,55,,86,28,,87,51,,53,45,47',
'46,,48,43,44,62,,,,,58,49,67,101,59,,,,60,61,142,55,,86,,,87,,,,45,47',
'46,101,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53',
',,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87',
'53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,',
'51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28',
'86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142',
'55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,-110,,58,49,67,,59,,,,60',
'61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,125,126,128,,58,49',
'67,,59,,,,60,61,,142,55,28,86,,51,87,278,,,45,47,46,,48,43,44,62,,,',
',58,49,67,,59,,,,60,61,,101,28,-113,,51,,53,125,126,128,123,124,127',
'111,112,113,117,118,119,114,115,116,120,121,122,,,125,126,128,142,55',
',86,28,,87,51,,53,45,47,46,,48,43,44,62,,,-110,,58,49,67,101,59,,,,60',
'61,142,55,,86,,,87,,,,45,47,46,101,48,43,44,62,,,,,58,49,67,,59,,,,60',
'61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59',
',,,60,61,,,28,-113,,51,,53,125,126,128,123,124,127,111,112,113,117,118',
'119,114,115,116,120,121,122,,,,,,142,55,,86,28,,87,51,333,53,45,47,46',
',48,43,44,62,,,,,58,49,67,101,59,,,,60,61,142,55,,86,,,87,,,,45,47,46',
',48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45',
'47,46,,48,43,44,62,,,-110,,58,49,67,,59,,,,60,61,,,28,-113,,51,,53,125',
'126,128,123,124,127,111,112,113,117,118,119,114,115,116,120,121,122',
',,,,,142,55,,86,28,,87,51,,53,45,47,46,,48,43,44,62,,,,,58,49,67,101',
'59,,,,60,61,142,55,,86,,,87,,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59',
',,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67',
',59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49',
'67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,',
'58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62',
',,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43',
'44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48',
'43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46',
',48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47',
'46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,',
'45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87',
'53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,',
'51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28',
'86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142',
'55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61',
'142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60',
'61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59',
',,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67',
',59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58',
'49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,',
',,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44',
'62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43',
'44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,',
'48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47',
'46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,',
'45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87',
'53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,',
'51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28',
'86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142',
'55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61',
'142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60',
'61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59',
',,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67',
',59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58',
'49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,',
',,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44',
'62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43',
'44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,',
'48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47',
'46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,',
'45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87',
'53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,',
'51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,,28,-113',
',51,,53,125,126,128,123,124,127,111,112,113,117,118,119,114,115,116',
'120,121,122,,,,,,142,55,,86,28,-113,87,51,,53,45,47,46,,48,43,44,62',
',,,,58,49,67,101,59,,,,60,61,142,55,,86,,,87,,,,45,47,46,,48,43,44,62',
',,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43',
'44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48',
'43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46',
',48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47',
'46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,',
'45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,,28,-113,,51,,53,125',
'126,128,123,124,127,111,112,113,117,118,119,114,115,116,120,121,122',
',,,,,142,55,,86,28,,87,51,,53,45,47,46,,48,43,44,62,,,,,58,49,67,101',
'59,,,,60,61,142,55,,86,,,87,,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59',
',,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67',
',59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,-110,',
'58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,278,,,45,47,46,,48,43,44',
'62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43',
'44,62,,,,,58,49,67,,59,,,,60,61,,,,28,-113,,51,,53,,125,126,128,123',
'124,127,111,112,113,117,118,119,114,115,116,120,121,122,,,,142,55,,86',
'28,-113,87,51,,53,45,47,46,,48,43,44,62,,,,,58,49,67,,59,101,,,60,61',
'142,55,,86,,,,,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,,',
'28,-113,,51,,53,,142,55,,86,125,126,128,123,124,127,45,47,46,,48,43',
'44,,,,,,58,49,67,178,59,,51,,60,61,142,55,,86,125,126,128,123,124,127',
'45,47,46,,48,43,44,62,,,101,,58,49,67,,59,,,,60,61,,,,178,,,51,,,,,',
',,,,,,,,101,201,,,,,,125,126,128,123,124,127,,,178,,,51,125,126,128',
'123,124,127,111,112,113,117,118,119,114,115,116,120,121,122,98,100,99',
'105,107,106,108,110,109,102,104,103,129,130,97,96,133,434,101,,,,,125',
'126,128,123,124,127,,101,,,,,125,126,128,123,124,127,111,112,113,117',
'118,119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102',
'104,103,129,130,97,96,133,201,101,,,,,125,126,128,123,124,127,,101,',
',,,125,126,128,123,124,127,111,112,113,117,118,119,114,115,116,120,121',
'122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,97,96,133',
'201,101,,,,,125,126,128,123,124,127,,101,,,,,125,126,128,123,124,127',
'111,112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106',
'108,110,109,102,104,103,129,130,97,96,133,201,101,,,,,125,126,128,123',
'124,127,,101,,,,,125,126,128,123,124,127,111,112,113,117,118,119,114',
'115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104,103,129',
'130,97,96,133,201,101,,,,,,,,,,,,101,,,,,125,126,128,123,124,127,111',
'112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106,108',
'110,109,102,104,103,129,130,97,96,133,430,,,,,,,,,,,,,101,,,,,125,126',
'128,123,124,127,111,112,113,117,118,119,114,115,116,120,121,122,98,100',
'99,105,107,106,108,110,109,102,104,103,129,130,97,96,133,,,,,,,,,,,',
',,101,125,126,128,123,124,127,111,112,113,117,118,119,114,115,116,120',
'121,122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,97,96',
'133,,,,,,,,,,,,,265,101,125,126,128,123,124,127,111,112,113,117,118',
'119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104',
'103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127,111,112',
'113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106,108,110',
'109,102,104,103,129,130,,,,,,,,,,,,,,,,,101,125,126,128,123,124,127',
'111,112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106',
'108,110,109,102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128',
'123,124,127,111,112,113,117,118,119,114,115,116,120,121,122,125,126',
'128,123,124,127,111,112,113,117,118,119,114,115,116,120,121,122,,,,',
',,,,,,,,101,,,,,,,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113',
'117,118,119,114,115,116,120,121,122,125,126,128,123,124,127,111,112',
'113,117,118,119,114,115,116,120,121,122,,,,,,,,,,,,,101,,,,,,,,,,,,',
',,,,,101,125,126,128,123,124,127,111,112,113,117,118,119,114,115,116',
'120,121,122,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,101,125,126,128,123,124,127',
'111,112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106',
'108,110,109,102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128',
'123,124,127,111,112,113,117,118,119,114,115,116,120,121,122,98,100,99',
'105,107,106,108,110,109,102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101',
'125,126,128,123,124,127,111,112,113,117,118,119,114,115,116,120,121',
'122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,97,96,133',
',,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113,117,118,119,114',
'115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104,103,129',
'130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113,117',
'118,119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102',
'104,103,,,,,,,,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113,117',
'118,119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102',
'104,103,,,,,,,,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113,117',
'118,119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102',
'104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127,111',
'112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106,108',
'110,109,102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123',
'124,127,111,112,113,117,118,119,114,115,116,120,121,122,98,100,99,105',
'107,106,108,110,109,102,104,103,129,130,97,96,133,,,,,,,,,,,,,322,101',
'125,126,128,123,124,127,111,112,113,117,118,119,114,115,116,120,121',
'122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,97,96,133',
',,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113,117,118,119,114',
'115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104,103,129',
'130,97,96,133,,,,,,,,,,325,,,326,101,125,126,128,123,124,127,111,112',
'113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106,108,110',
'109,102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123,124',
'127,111,112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107',
'106,108,110,109,102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126',
'128,123,124,127,111,112,113,117,118,119,114,115,116,120,121,122,98,100',
'99,105,107,106,108,110,109,102,104,103,129,130,97,96,133,,,,,,,345,',
',,,,,101,125,126,128,123,124,127,111,112,113,117,118,119,114,115,116',
'120,121,122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,97',
'96,133,,,,,,,,,,375,,,326,101,125,126,128,123,124,127,111,112,113,117',
'118,119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102',
'104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127,111',
'112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106,108',
'110,109,102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123',
'124,127,111,112,113,117,118,119,114,115,116,120,121,122,98,100,99,105',
'107,106,108,110,109,102,104,103,129,130,97,96,133,,,,,,,256,,,,,,,101',
'125,126,128,123,124,127,111,112,113,117,118,119,114,115,116,120,121',
'122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,97,96,133',
',,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113,117,118,119,114',
'115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104,103,129',
'130,97,96,133,,,,,,,,,,378,,,,101,125,126,128,123,124,127,111,112,113',
'117,118,119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109',
'102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127',
'111,112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106',
'108,110,109,102,104,103,129,130,97,96,133,,,,,,,256,,,,,,,101,125,126',
'128,123,124,127,111,112,113,117,118,119,114,115,116,120,121,122,98,100',
'99,105,107,106,108,110,109,102,104,103,129,130,97,96,133,,,,,,,,,,,',
',,101,125,126,128,123,124,127,111,112,113,117,118,119,114,115,116,120',
'121,122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,97,96',
'133,,,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113,117,118,119',
'114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104,103',
'129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113',
'117,118,119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109',
'102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127',
'111,112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106',
'108,110,109,102,104,103,129,130,97,96,133,,,,,,,345,,,,,,,101' ]
        racc_action_table = arr = ::Array.new(6308, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'21,71,156,202,21,309,357,357,437,350,351,315,408,56,56,71,56,315,315',
'437,350,42,439,56,56,56,429,56,56,56,202,351,357,408,153,56,56,56,317',
'56,386,153,386,56,56,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21',
'21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,56,201,439',
'56,435,201,429,201,201,201,201,201,357,21,201,91,201,201,317,201,201',
'201,201,201,2,201,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,268,201,201,201,201,201,300,422,426,201,201,200,267,307,139,203',
'139,200,422,426,288,190,192,67,435,288,192,277,277,273,273,273,273,367',
'273,91,316,303,367,273,273,316,318,299,2,274,201,319,201,201,430,201',
'268,300,430,276,430,430,430,430,430,275,157,430,267,430,430,203,430',
'430,430,430,430,190,430,430,430,430,430,430,430,430,430,430,430,430',
'430,430,277,277,430,430,430,430,430,299,274,274,430,430,83,54,275,275',
'275,275,276,276,320,157,298,321,275,275,157,134,134,134,134,30,30,30',
'30,134,30,151,171,297,151,8,151,8,8,8,291,430,382,430,430,4,430,256',
'158,4,405,4,4,4,4,4,83,345,4,54,4,4,324,4,4,4,4,4,298,4,4,4,4,4,4,4',
'4,4,4,4,4,4,4,4,171,4,4,4,4,4,290,382,289,4,4,158,256,272,272,405,158',
'271,271,237,237,237,345,392,392,235,235,235,235,235,235,41,41,41,41',
'64,64,64,64,329,225,225,225,225,225,225,4,330,4,4,413,4,39,39,413,287',
'413,413,413,413,413,32,283,413,84,413,413,237,413,413,413,413,413,235',
'413,413,413,413,413,413,413,413,413,413,413,413,413,413,225,338,413',
'413,413,413,413,70,70,70,413,413,193,340,32,32,32,32,69,69,69,280,280',
'341,85,344,86,34,87,89,92,258,93,31,250,242,193,240,239,366,136,226',
'226,226,226,226,226,413,369,413,413,371,413,26,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,226,0,137,199,198,0',
'383,0,0,0,0,0,384,193,0,197,0,0,387,0,0,0,0,0,388,0,0,0,0,0,0,0,0,0',
'0,0,0,0,0,0,310,0,0,0,0,0,393,23,396,0,0,194,397,398,399,401,403,404',
'189,407,142,409,22,18,144,146,179,423,424,147,175,174,150,170,431,194',
'432,433,1,166,227,227,227,227,227,227,0,165,0,0,162,0,440,194,194,194',
'194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194',
'194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,227,434',
',,,434,,434,434,434,434,434,,194,434,,434,434,,434,434,434,434,434,',
'434,434,434,434,434,434,434,434,434,434,434,434,434,434,,,434,434,434',
'434,434,,,,434,434,,,210,210,210,210,210,210,210,210,210,210,210,210',
'210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210',
'210,210,210,210,434,,434,434,90,434,,,90,,90,90,90,90,90,210,,90,,90',
'90,,90,90,90,90,90,,90,90,90,,90,90,90,90,90,90,90,90,90,90,90,,90,90',
'90,90,90,,,,90,90,191,191,191,191,191,191,191,191,191,191,191,191,191',
'191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191',
'191,191,191,191,191,90,,305,90,,90,305,305,305,305,305,305,305,191,',
'305,,305,305,,305,305,305,305,305,,305,305,305,305,305,305,305,305,305',
'305,305,305,305,305,,,305,305,305,305,305,,,,305,305,,359,,,,,,,,,,',
',,,,,,,,,,,,,,,,,228,228,228,228,228,228,305,,305,305,,305,359,359,359',
'359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359',
'359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,356,228',
',,,,,,248,248,,248,,359,248,,,,248,248,248,,248,248,248,248,,,,,248',
'248,248,,248,,,,248,248,356,356,356,356,356,356,356,356,356,356,356',
'356,356,356,356,356,356,356,356,356,356,356,356,356,356,356,356,356',
'356,356,356,356,356,356,356,248,,,248,,248,,248,135,135,,135,,356,135',
',,,135,135,135,,135,135,135,135,,,,,135,135,135,,135,,,,135,135,264',
'264,,264,,,264,,,,264,264,264,,264,264,264,264,,,,,264,264,264,,264',
',,,264,264,,123,123,135,123,,135,123,135,,135,123,123,123,,123,123,123',
'123,,,,,123,123,123,,123,,,,123,123,51,51,264,51,,264,51,264,264,,51',
'51,51,,51,51,51,51,,,51,,51,51,51,,51,,,,51,51,,53,53,123,53,,123,53',
'123,,,53,53,53,,53,53,53,53,,,53,,53,53,53,,53,,,,53,53,312,312,51,312',
',51,312,51,,,312,312,312,,312,312,312,312,,,,,312,312,312,,312,,,,312',
'312,,55,55,53,55,,53,55,53,,55,55,55,55,,55,55,55,55,,,,,55,55,55,,55',
',,,55,55,311,311,312,311,,312,311,312,,,311,311,311,,311,311,311,311',
',,,,311,311,311,,311,,,,311,311,,57,57,55,57,,55,57,55,,,57,57,57,,57',
'57,57,57,,,57,,57,57,57,,57,,,,57,57,59,59,311,59,,311,59,311,,,59,59',
'59,,59,59,59,59,,,,,59,59,59,,59,,,,59,59,,60,60,57,60,,57,60,57,,,60',
'60,60,,60,60,60,60,,,,,60,60,60,,60,,,,60,60,61,61,59,61,,59,61,59,',
',61,61,61,,61,61,61,61,,,,,61,61,61,,61,,,,61,61,,308,308,60,308,,60',
'308,60,,,308,308,308,,308,308,308,308,,,,,308,308,308,,308,,,,308,308',
'322,322,61,322,,61,322,61,,,322,322,322,,322,322,322,322,,,,,322,322',
'322,,322,,,,322,322,,304,304,308,304,,308,304,308,,,304,304,304,,304',
'304,304,304,,,,,304,304,304,,304,,,,304,304,302,302,322,302,,322,302',
'322,,,302,302,302,,302,302,302,302,,,,,302,302,302,,302,,,,302,302,',
'301,301,304,301,,304,301,304,,,301,301,301,,301,301,301,301,,,,,301',
'301,301,,301,,,,301,301,285,285,302,285,,302,285,302,,,285,285,285,',
'285,285,285,285,238,238,238,,285,285,285,,285,,,,285,285,,75,75,301',
'75,,301,75,301,,,75,75,75,,75,75,75,75,,,75,,75,75,75,,75,,,,75,75,',
'238,285,285,,285,,285,212,212,212,212,212,212,212,212,212,212,212,212',
'212,212,212,212,212,212,,,241,241,241,77,77,,77,75,,77,75,,75,77,77',
'77,,77,77,77,77,,,,,77,77,77,212,77,,,,77,77,78,78,,78,,,78,,,,78,78',
'78,241,78,78,78,78,,,,,78,78,78,,78,,,,78,78,,79,79,77,79,,77,79,77',
',,79,79,79,,79,79,79,79,,,,,79,79,79,,79,,,,79,79,82,82,78,82,,78,82',
'78,,,82,82,82,,82,82,82,82,,,,,82,82,82,,82,,,,82,82,,284,284,79,284',
',79,284,79,,,284,284,284,,284,284,284,284,,,,,284,284,284,,284,,,,284',
'284,281,281,82,281,,82,281,82,,,281,281,281,,281,281,281,281,,,,,281',
'281,281,,281,,,,281,281,,278,278,284,278,,284,278,284,,,278,278,278',
',278,278,278,278,,,278,,278,278,278,,278,,,,278,278,266,266,281,266',
',281,266,281,,,266,266,266,,266,266,266,266,176,176,176,,266,266,266',
',266,,,,266,266,,265,265,278,265,,278,265,278,,,265,265,265,,265,265',
'265,265,,,,,265,265,265,,265,,,,265,265,,176,266,266,,266,,266,213,213',
'213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,,,177',
'177,177,326,326,,326,265,,326,265,,265,326,326,326,,326,326,326,326',
',,326,,326,326,326,213,326,,,,326,326,347,347,,347,,,347,,,,347,347',
'347,177,347,347,347,347,,,,,347,347,347,,347,,,,347,347,,262,262,326',
'262,,326,262,326,,,262,262,262,,262,262,262,262,,,,,262,262,262,,262',
',,,262,262,,,347,347,,347,,347,214,214,214,214,214,214,214,214,214,214',
'214,214,214,214,214,214,214,214,,,,,,260,260,,260,262,,260,262,262,262',
'260,260,260,,260,260,260,260,,,,,260,260,260,214,260,,,,260,260,257',
'257,,257,,,257,,,,257,257,257,,257,257,257,257,,,,,257,257,257,,257',
',,,257,257,,251,251,260,251,,260,251,260,,,251,251,251,,251,251,251',
'251,,,251,,251,251,251,,251,,,,251,251,,,257,257,,257,,257,216,216,216',
'216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,,,,,,96',
'96,,96,251,,96,251,,251,96,96,96,,96,96,96,96,,,,,96,96,96,216,96,,',
',96,96,97,97,,97,,,97,,,,97,97,97,,97,97,97,97,,,,,97,97,97,,97,,,,97',
'97,,98,98,96,98,,96,98,96,,,98,98,98,,98,98,98,98,,,,,98,98,98,,98,',
',,98,98,99,99,97,99,,97,99,97,,,99,99,99,,99,99,99,99,,,,,99,99,99,',
'99,,,,99,99,,100,100,98,100,,98,100,98,,,100,100,100,,100,100,100,100',
',,,,100,100,100,,100,,,,100,100,101,101,99,101,,99,101,99,,,101,101',
'101,,101,101,101,101,,,,,101,101,101,,101,,,,101,101,,102,102,100,102',
',100,102,100,,,102,102,102,,102,102,102,102,,,,,102,102,102,,102,,,',
'102,102,103,103,101,103,,101,103,101,,,103,103,103,,103,103,103,103',
',,,,103,103,103,,103,,,,103,103,,104,104,102,104,,102,104,102,,,104',
'104,104,,104,104,104,104,,,,,104,104,104,,104,,,,104,104,105,105,103',
'105,,103,105,103,,,105,105,105,,105,105,105,105,,,,,105,105,105,,105',
',,,105,105,,106,106,104,106,,104,106,104,,,106,106,106,,106,106,106',
'106,,,,,106,106,106,,106,,,,106,106,107,107,105,107,,105,107,105,,,107',
'107,107,,107,107,107,107,,,,,107,107,107,,107,,,,107,107,,108,108,106',
'108,,106,108,106,,,108,108,108,,108,108,108,108,,,,,108,108,108,,108',
',,,108,108,109,109,107,109,,107,109,107,,,109,109,109,,109,109,109,109',
',,,,109,109,109,,109,,,,109,109,,110,110,108,110,,108,110,108,,,110',
'110,110,,110,110,110,110,,,,,110,110,110,,110,,,,110,110,111,111,109',
'111,,109,111,109,,,111,111,111,,111,111,111,111,,,,,111,111,111,,111',
',,,111,111,,112,112,110,112,,110,112,110,,,112,112,112,,112,112,112',
'112,,,,,112,112,112,,112,,,,112,112,113,113,111,113,,111,113,111,,,113',
'113,113,,113,113,113,113,,,,,113,113,113,,113,,,,113,113,,114,114,112',
'114,,112,114,112,,,114,114,114,,114,114,114,114,,,,,114,114,114,,114',
',,,114,114,115,115,113,115,,113,115,113,,,115,115,115,,115,115,115,115',
',,,,115,115,115,,115,,,,115,115,,116,116,114,116,,114,116,114,,,116',
'116,116,,116,116,116,116,,,,,116,116,116,,116,,,,116,116,117,117,115',
'117,,115,117,115,,,117,117,117,,117,117,117,117,,,,,117,117,117,,117',
',,,117,117,,118,118,116,118,,116,118,116,,,118,118,118,,118,118,118',
'118,,,,,118,118,118,,118,,,,118,118,119,119,117,119,,117,119,117,,,119',
'119,119,,119,119,119,119,,,,,119,119,119,,119,,,,119,119,,120,120,118',
'120,,118,120,118,,,120,120,120,,120,120,120,120,,,,,120,120,120,,120',
',,,120,120,121,121,119,121,,119,121,119,,,121,121,121,,121,121,121,121',
',,,,121,121,121,,121,,,,121,121,,122,122,120,122,,120,122,120,,,122',
'122,122,,122,122,122,122,,,,,122,122,122,,122,,,,122,122,313,313,121',
'313,,121,313,121,,,313,313,313,,313,313,313,313,,,,,313,313,313,,313',
',,,313,313,,124,124,122,124,,122,124,122,,,124,124,124,,124,124,124',
'124,,,,,124,124,124,,124,,,,124,124,125,125,313,125,,313,125,313,,,125',
'125,125,,125,125,125,125,,,,,125,125,125,,125,,,,125,125,,126,126,124',
'126,,124,126,124,,,126,126,126,,126,126,126,126,,,,,126,126,126,,126',
',,,126,126,127,127,125,127,,125,127,125,,,127,127,127,,127,127,127,127',
',,,,127,127,127,,127,,,,127,127,,128,128,126,128,,126,128,126,,,128',
'128,128,,128,128,128,128,,,,,128,128,128,,128,,,,128,128,129,129,127',
'129,,127,129,127,,,129,129,129,,129,129,129,129,,,,,129,129,129,,129',
',,,129,129,,130,130,128,130,,128,130,128,,,130,130,130,,130,130,130',
'130,,,,,130,130,130,,130,,,,130,130,131,131,129,131,,129,131,129,,,131',
'131,131,,131,131,131,131,,,,,131,131,131,,131,,,,131,131,,132,132,130',
'132,,130,132,130,,,132,132,132,,132,132,132,132,,,,,132,132,132,,132',
',,,132,132,133,133,131,133,,131,133,131,,,133,133,133,,133,133,133,133',
',,,,133,133,133,,133,,,,133,133,,28,28,132,28,,132,28,132,,,28,28,28',
',28,28,28,28,,,,,28,28,28,,28,,,,28,28,372,372,133,372,,133,372,133',
',,372,372,372,,372,372,372,372,,,,,372,372,372,,372,,,,372,372,,205',
'205,28,205,,28,205,28,,,205,205,205,,205,205,205,205,,,,,205,205,205',
',205,,,,205,205,,,372,372,,372,,372,217,217,217,217,217,217,217,217',
'217,217,217,217,217,217,217,217,217,217,,,,,,394,394,,394,205,205,394',
'205,,205,394,394,394,,394,394,394,394,,,,,394,394,394,217,394,,,,394',
'394,410,410,,410,,,410,,,,410,410,410,,410,410,410,410,,,,,410,410,410',
',410,,,,410,410,,412,412,394,412,,394,412,394,,,412,412,412,,412,412',
'412,412,,,,,412,412,412,,412,,,,412,412,184,184,410,184,,410,184,410',
',,184,184,184,,184,184,184,184,,,,,184,184,184,,184,,,,184,184,,183',
'183,412,183,,412,183,412,,,183,183,183,,183,183,183,183,,,,,183,183',
'183,,183,,,,183,183,143,143,184,143,,184,143,184,,,143,143,143,,143',
'143,143,143,,,,,143,143,143,,143,,,,143,143,,182,182,183,182,,183,182',
'183,,,182,182,182,,182,182,182,182,,,,,182,182,182,,182,,,,182,182,',
',143,143,,143,,143,218,218,218,218,218,218,218,218,218,218,218,218,218',
'218,218,218,218,218,,,,,,181,181,,181,182,,181,182,,182,181,181,181',
',181,181,181,181,,,,,181,181,181,218,181,,,,181,181,178,178,,178,,,178',
',,,178,178,178,,178,178,178,178,,,,,178,178,178,,178,,,,178,178,,160',
'160,181,160,,181,160,181,,,160,160,160,,160,160,160,160,,,,,160,160',
'160,,160,,,,160,160,169,169,178,169,,178,169,178,,,169,169,169,,169',
'169,169,169,,,169,,169,169,169,,169,,,,169,169,,167,167,160,167,,160',
'167,160,,,167,167,167,,167,167,167,167,,,,,167,167,167,,167,,,,167,167',
'161,161,169,161,,169,161,169,,,161,161,161,,161,161,161,161,,,,,161',
'161,161,,161,,,,161,161,,,,167,167,,167,,167,,219,219,219,219,219,219',
'219,219,219,219,219,219,219,219,219,219,219,219,,,,172,172,,172,161',
'161,172,161,,161,172,172,172,,172,172,172,172,,,,,172,172,172,,172,219',
',,172,172,95,95,,95,,,,,,,95,95,95,,95,95,95,95,,,,,95,95,95,,95,,,',
'95,95,,,,172,172,,172,,172,,62,62,,62,229,229,229,229,229,229,62,62',
'62,,62,62,62,,,,,,62,62,62,95,62,,95,,62,62,138,138,,138,230,230,230',
'230,230,230,138,138,138,,138,138,138,138,,,229,,138,138,138,,138,,,',
'138,138,,,,62,,,62,,,,,,,,,,,,,,230,196,,,,,,231,231,231,231,231,231',
',,138,,,138,196,196,196,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,428,231,,,,,232,232,232,232,232,232,,196,,,,,428,428',
'428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428',
'428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,364',
'232,,,,,233,233,233,233,233,233,,428,,,,,364,364,364,364,364,364,364',
'364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364',
'364,364,364,364,364,364,364,364,364,364,364,195,233,,,,,234,234,234',
'234,234,234,,364,,,,,195,195,195,195,195,195,195,195,195,195,195,195',
'195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195',
'195,195,195,195,195,195,362,234,,,,,236,236,236,236,236,236,,195,,,',
',362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362',
'362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362',
'362,363,236,,,,,,,,,,,,362,,,,,363,363,363,363,363,363,363,363,363,363',
'363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363',
'363,363,363,363,363,363,363,363,414,,,,,,,,,,,,,363,,,,,414,414,414',
'414,414,414,414,414,414,414,414,414,414,414,414,414,414,414,414,414',
'414,414,414,414,414,414,414,414,414,414,414,414,414,414,414,,,,,,,,',
',,,,,414,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155',
'155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155',
'155,155,155,,,,,,,,,,,,,155,155,164,164,164,164,164,164,164,164,164',
'164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164',
'164,164,164,164,164,164,164,164,164,,,,,,,,,,,,,,164,211,211,211,211',
'211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211',
'211,211,211,211,211,211,211,211,211,211,211,,,,,,,,,,,,,,,,,211,215',
'215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215',
'215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215',
',,,,,,,,,,,,,215,220,220,220,220,220,220,220,220,220,220,220,220,220',
'220,220,220,220,220,221,221,221,221,221,221,221,221,221,221,221,221',
'221,221,221,221,221,221,,,,,,,,,,,,,220,,,,,,,,,,,,,,,,,,221,222,222',
'222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,223',
'223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223',
',,,,,,,,,,,,222,,,,,,,,,,,,,,,,,,223,224,224,224,224,224,224,224,224',
'224,224,224,224,224,224,224,224,224,224,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,224,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374',
'374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374',
'374,374,,,,,,,,,,,,,,374,377,377,377,377,377,377,377,377,377,377,377',
'377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377',
'377,377,377,377,377,377,377,,,,,,,,,,,,,,377,152,152,152,152,152,152',
'152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152',
'152,152,152,152,152,152,152,152,152,152,152,152,,,,,,,,,,,,,,152,296',
'296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296',
'296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296',
',,,,,,,,,,,,,296,243,243,243,243,243,243,243,243,243,243,243,243,243',
'243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243',
',,,,,,,,,,,,,,,,,,243,244,244,244,244,244,244,244,244,244,244,244,244',
'244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244',
'244,,,,,,,,,,,,,,,,,,,244,245,245,245,245,245,245,245,245,245,245,245',
'245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245',
'245,245,245,245,245,245,245,,,,,,,,,,,,,,245,246,246,246,246,246,246',
'246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246',
'246,246,246,246,246,246,246,246,246,246,246,246,,,,,,,,,,,,,,246,247',
'247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247',
'247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247',
',,,,,,,,,,,,247,247,295,295,295,295,295,295,295,295,295,295,295,295',
'295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295',
'295,295,295,295,295,295,,,,,,,,,,,,,,295,249,249,249,249,249,249,249',
'249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249',
'249,249,249,249,249,249,249,249,249,249,249,,,,,,,,,,249,,,249,249,294',
'294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294',
'294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294',
',,,,,,,,,,,,,294,293,293,293,293,293,293,293,293,293,293,293,293,293',
'293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293',
'293,293,293,293,293,,,,,,,,,,,,,,293,292,292,292,292,292,292,292,292',
'292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292',
'292,292,292,292,292,292,292,292,292,292,,,,,,,292,,,,,,,292,323,323',
'323,323,323,323,323,323,323,323,323,323,323,323,323,323,323,323,323',
'323,323,323,323,323,323,323,323,323,323,323,323,323,323,323,323,,,,',
',,,,,323,,,323,323,354,354,354,354,354,354,354,354,354,354,354,354,354',
'354,354,354,354,354,354,354,354,354,354,354,354,354,354,354,354,354',
'354,354,354,354,354,,,,,,,,,,,,,,354,353,353,353,353,353,353,353,353',
'353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353',
'353,353,353,353,353,353,353,353,353,353,,,,,,,,,,,,,,353,141,141,141',
'141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141',
'141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,,,,,,,141',
',,,,,,141,328,328,328,328,328,328,328,328,328,328,328,328,328,328,328',
'328,328,328,328,328,328,328,328,328,328,328,328,328,328,328,328,328',
'328,328,328,,,,,,,,,,,,,,328,332,332,332,332,332,332,332,332,332,332',
'332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332',
'332,332,332,332,332,332,332,332,,,,,,,,,,332,,,,332,334,334,334,334',
'334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334',
'334,334,334,334,334,334,334,334,334,334,334,334,334,334,,,,,,,,,,,,',
',334,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282',
'282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282',
'282,282,,,,,,,282,,,,,,,282,337,337,337,337,337,337,337,337,337,337',
'337,337,337,337,337,337,337,337,337,337,337,337,337,337,337,337,337',
'337,337,337,337,337,337,337,337,,,,,,,,,,,,,,337,279,279,279,279,279',
'279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279',
'279,279,279,279,279,279,279,279,279,279,279,279,279,,,,,,,,,,,,,,279',
'343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343',
'343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343',
'343,,,,,,,,,,,,,,343,427,427,427,427,427,427,427,427,427,427,427,427',
'427,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427',
'427,427,427,427,427,427,,,,,,,,,,,,,,427,286,286,286,286,286,286,286',
'286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286',
'286,286,286,286,286,286,286,286,286,286,286,,,,,,,286,,,,,,,286' ]
        racc_action_check = arr = ::Array.new(6308, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   474,   553,    75,   nil,   257,   nil,   nil,   nil,   209,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   452,   nil,
   nil,    -2,   447,   470,   nil,   nil,   353,   nil,  3431,   nil,
   157,   378,   318,   nil,   372,   nil,   nil,   nil,   nil,   319,
   nil,   247,   -69,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1066,   nil,  1099,   181,  1164,    -7,  1229,   nil,  1261,
  1294,  1326,  4116,   nil,   251,   nil,   nil,   103,   nil,   362,
   351,   -41,   nil,   nil,   nil,  1554,   nil,  1617,  1649,  1682,
   nil,   nil,  1714,   180,   333,   370,   370,   327,   nil,   415,
   691,    66,   376,   328,   nil,  4074,  2196,  2228,  2261,  2293,
  2326,  2358,  2391,  2423,  2456,  2488,  2521,  2553,  2586,  2618,
  2651,  2683,  2716,  2748,  2781,  2813,  2846,  2878,  2911,  2943,
  2976,  3008,  3041,  1034,  3106,  3138,  3171,  3203,  3236,  3268,
  3301,  3333,  3366,  3398,   153,   969,   385,   437,  4148,    46,
   nil,  5771,   448,  3721,   498,   nil,   499,   503,   nil,   nil,
   457,   159,  5036,   -52,   nil,  4559,   -85,   142,   222,   nil,
  3882,  3979,   479,   nil,  4608,   475,   513,  3947,   nil,  3914,
   458,   206,  4042,   nil,   460,   450,  1835,  1910,  3849,   451,
   nil,  3817,  3754,  3689,  3656,   nil,   nil,   nil,   nil,   493,
   101,   696,   140,   393,   521,  4351,  4192,   474,   463,   462,
   124,    79,   -26,    95,   nil,  3496,   nil,   nil,   nil,   nil,
   609,  4657,  1567,  1890,  2018,  4706,  2146,  3509,  3767,  3994,
  4755,  4773,  4822,  4840,  4889,   291,   380,   508,   812,  4093,
  4125,  4180,  4233,  4286,  4339,   276,  4392,   270,  1512,   329,
   328,  1587,   326,  5134,  5183,  5232,  5281,  5330,   894,  5428,
   329,  2133,   nil,   nil,   nil,   nil,   220,  2100,   329,   nil,
  2068,   nil,  2005,   nil,  1001,  1877,  1844,    92,    80,   nil,
   nil,   223,   219,    67,   124,   140,   134,   116,  1812,  6065,
   315,  1779,  5967,   272,  1747,  1521,  6212,   265,    54,   216,
   217,   166,  5575,  5526,  5477,  5379,  5085,   194,   190,   123,
    86,  1489,  1456,   150,  1424,   778,   nil,   126,  1359,    -2,
   508,  1196,  1131,  3073,   nil,     4,   127,     9,   155,   127,
   141,   143,  1391,  5624,   185,   nil,  1940,   nil,  5820,   296,
   255,   nil,  5869,   nil,  5918,   nil,   nil,  6016,   299,   nil,
   306,   316,   nil,  6114,   323,   230,   nil,  1972,   nil,   nil,
   -20,    -9,   nil,  5722,  5673,   nil,   899,     3,   nil,   824,
   nil,   nil,  4404,  4457,  4298,   nil,   396,   124,   nil,   405,
   nil,   408,  3463,   nil,  4938,   nil,   nil,  4987,   nil,   nil,
   nil,   nil,   215,   393,   480,   nil,   -46,   405,   417,   nil,
   nil,   nil,   318,   492,  3559,   nil,   516,   520,   521,   522,
   nil,   501,   nil,   524,   444,   223,   nil,   494,    -7,   496,
  3591,   nil,  3624,   346,  4510,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    98,   454,   461,   nil,    99,  6163,  4245,    -3,
   168,   542,   511,   545,   602,    55,   nil,   -21,   nil,    -7,
   560,   nil ]

racc_action_default = [
    -1,  -244,    -2,    -3,    -6,    -8,    -9,   -10,   -11,   -12,
   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,
   -23,   -24,   -25,   -26,   -28,   -29,   -30,   -31,  -110,   -33,
   -34,   -35,   -36,   -37,   -38,   -39,   -48,   -49,   -50,   -51,
   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,   -62,   -63,
   -64,   -68,   -71,   -74,  -244,  -110,  -110,  -113,  -109,  -110,
  -110,  -110,  -110,  -156,  -244,  -165,  -167,  -244,  -171,  -110,
  -110,  -110,  -187,  -188,  -189,  -204,  -206,  -110,  -110,  -110,
  -215,  -216,  -110,  -244,  -244,  -244,  -110,  -242,  -243,  -244,
    -5,    -7,  -244,  -244,  -175,  -110,  -110,  -110,  -110,  -110,
  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,
  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,
  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,
  -110,  -110,  -110,  -110,   -82,  -110,   -27,  -244,  -110,   -25,
   -30,  -244,  -244,  -110,   -79,   -93,   -78,   -80,   -60,   -61,
  -170,  -244,   -69,  -244,   -75,  -244,  -244,  -168,  -172,  -176,
  -110,  -110,  -100,  -101,  -115,   -34,   -36,  -110,   -53,   -68,
  -244,  -244,  -110,  -106,  -114,  -152,  -153,  -154,  -110,  -244,
  -155,  -110,  -110,  -110,  -110,  -169,  -173,  -174,  -111,  -244,
  -244,  -205,  -201,  -244,  -244,  -244,  -244,  -244,  -244,  -244,
  -224,  -230,  -244,  -244,  -240,  -110,   442,    -4,  -168,  -158,
  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -126,
  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,
  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,
  -147,  -148,  -149,  -150,  -151,  -209,  -212,  -244,  -110,  -244,
  -244,   -92,   -96,   -95,  -157,   -40,   -32,  -110,  -244,   -94,
  -110,   -66,  -110,   -72,  -110,  -110,  -110,  -244,  -177,  -178,
  -179,   -28,   -29,   -34,   -35,   -36,   -38,   -51,   -74,  -244,
  -244,  -110,  -115,  -244,  -110,  -110,  -115,  -244,  -244,   -82,
  -244,  -244,  -244,  -159,  -160,  -161,  -162,  -244,  -191,  -190,
  -194,  -110,  -110,  -244,  -110,  -110,  -231,  -244,  -110,  -244,
  -244,  -110,  -110,  -110,  -221,  -244,  -244,  -229,  -244,  -244,
  -104,  -244,  -110,  -244,  -244,   -85,   -90,   -86,   -91,   -81,
   -83,   -98,  -244,   -67,   -70,   -73,   -76,   -77,  -244,  -180,
  -244,  -244,   -99,  -116,  -244,  -244,  -102,  -110,  -105,  -112,
  -244,  -195,  -192,  -202,  -203,  -207,  -244,  -229,  -210,  -244,
  -214,  -217,  -244,  -244,  -244,  -222,  -244,  -244,  -225,  -244,
  -238,  -244,  -110,  -241,  -213,   -87,   -88,   -89,   -65,   -97,
  -181,  -182,  -108,  -244,  -244,  -193,  -244,  -244,  -196,  -197,
  -208,  -232,  -233,  -244,  -110,  -211,  -244,  -244,  -244,  -244,
  -227,  -244,  -226,  -244,  -244,  -107,  -183,  -194,  -244,  -194,
  -110,  -234,  -110,  -110,  -244,  -218,  -219,  -220,  -223,  -228,
  -239,  -103,  -244,  -244,  -198,  -199,  -244,  -200,  -244,  -235,
  -110,  -244,  -194,  -244,  -110,  -236,  -184,  -244,  -185,  -237,
  -244,  -186 ]

racc_goto_table = [
    90,    26,     2,   276,   200,    26,    91,   369,   144,   389,
   274,   147,   391,   150,   272,   165,   166,    92,   151,   271,
   250,    94,   168,     1,    93,   303,   307,   180,   204,   162,
   190,   336,   199,   386,   341,   192,   136,   315,   207,   392,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   411,    21,   198,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   401,   nil,
   nil,   nil,   nil,   nil,   150,   171,   425,   277,   nil,   158,
   156,   nil,   270,   nil,   281,   nil,   141,   nil,    92,    92,
   188,   nil,   186,   187,   350,    93,    93,   nil,   nil,    90,
   nil,    26,   nil,   nil,   nil,   203,   209,   nil,   nil,   152,
   nil,   155,   nil,   nil,   nil,   nil,   nil,   175,   176,   177,
   173,   nil,   nil,   nil,   nil,   309,   310,   nil,   nil,   273,
   275,   276,   318,   191,   276,   193,   194,   195,   274,   nil,
   196,   274,   272,   324,   nil,   272,   288,   271,    21,   254,
   271,   289,   nil,   nil,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
   236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   247,   270,   249,   nil,   277,   158,   290,   277,   nil,
   nil,   422,   281,   426,   340,   nil,   258,   nil,   nil,   nil,
   nil,   nil,    26,   317,   nil,   299,   300,   nil,   279,   282,
   nil,   nil,   nil,   270,   283,   286,   437,   152,   299,   320,
   282,   nil,   nil,   nil,   nil,   291,   292,   330,   nil,   293,
   294,   295,   296,   329,   139,   nil,   368,   273,   275,   nil,
   273,   275,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   144,   nil,   147,   nil,   nil,   nil,   nil,   321,   nil,
   nil,   nil,   170,   nil,   nil,   nil,   nil,   nil,   179,   nil,
   384,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   396,   397,   398,   nil,   399,   400,   nil,   402,
   nil,   403,   nil,   nil,   nil,   nil,   323,   nil,   nil,   328,
   nil,   179,   nil,   nil,   nil,   nil,    26,   357,   332,   nil,
   334,   nil,   155,   337,   nil,    90,   330,   nil,   nil,   338,
   nil,   419,   329,   nil,   nil,   nil,   155,   nil,   nil,   279,
   nil,   nil,   343,   nil,   nil,   nil,   nil,   nil,   344,   nil,
   nil,   nil,   431,   nil,   179,   nil,   433,   nil,   nil,   353,
   354,   nil,   356,    21,   nil,    90,   359,   440,   nil,   362,
   363,   364,   nil,   nil,   nil,   nil,   nil,   139,   nil,   nil,
   374,   nil,   nil,   139,   377,   nil,   nil,   nil,   139,   nil,
   nil,   nil,   nil,   nil,   139,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   383,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   429,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   404,   nil,    90,   nil,   nil,
   nil,    26,   435,    90,   nil,    26,   439,    90,   nil,   nil,
   nil,   nil,   414,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   427,   nil,
   428,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   nil,   nil,    21 ]

racc_goto_check = [
     4,    27,     2,    34,    65,    27,     2,    39,    48,    67,
    31,    48,    71,    49,    26,    30,    32,    52,    44,    25,
    51,    60,    40,     1,    41,    69,    69,    58,    56,    55,
    57,    47,    43,    66,    36,    68,    24,    70,     3,    72,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    71,    21,    40,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,    39,   nil,
   nil,   nil,   nil,   nil,    49,    52,    67,    37,   nil,    61,
    53,   nil,    62,   nil,    62,   nil,    21,   nil,    52,    52,
    52,   nil,    60,    60,    64,    41,    41,   nil,   nil,     4,
   nil,    27,   nil,   nil,   nil,    52,    27,   nil,   nil,    21,
   nil,    21,   nil,   nil,   nil,   nil,   nil,    21,    21,    21,
    54,   nil,   nil,   nil,   nil,    65,    65,   nil,   nil,    30,
    32,    34,    65,    21,    34,    21,    21,    21,    31,   nil,
    21,    31,    26,    51,   nil,    26,    44,    25,    21,    27,
    25,    49,   nil,   nil,    21,    21,    21,    21,    21,    21,
    21,    21,    21,    21,    21,    21,    21,    21,    21,    21,
    21,    21,    21,    21,    21,    21,    21,    21,    21,    21,
    21,    21,    21,    21,    21,    21,    21,    21,    21,    21,
    21,    21,    62,    21,   nil,    37,    61,    53,    37,   nil,
   nil,    64,    62,    64,    62,   nil,    54,   nil,   nil,   nil,
   nil,   nil,    27,     2,   nil,    61,    53,   nil,    21,    21,
   nil,   nil,   nil,    62,    54,    21,    64,    21,    61,    53,
    21,   nil,   nil,   nil,   nil,    54,    21,    49,   nil,    21,
    21,    21,    21,    48,    22,   nil,    65,    30,    32,   nil,
    30,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,    48,   nil,    48,   nil,   nil,   nil,   nil,    54,   nil,
   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,    22,   nil,
    65,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    65,    65,    65,   nil,    65,    65,   nil,    65,
   nil,    65,   nil,   nil,   nil,   nil,    21,   nil,   nil,    21,
   nil,    22,   nil,   nil,   nil,   nil,    27,     2,    21,   nil,
    21,   nil,    21,    21,   nil,     4,    49,   nil,   nil,    54,
   nil,    65,    48,   nil,   nil,   nil,    21,   nil,   nil,    21,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,    54,   nil,
   nil,   nil,    65,   nil,    22,   nil,    65,   nil,   nil,    21,
    21,   nil,    21,    21,   nil,     4,    21,    65,   nil,    21,
    21,    21,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,
    21,   nil,   nil,    22,    21,   nil,   nil,   nil,    22,   nil,
   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    27,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    54,   nil,     4,   nil,   nil,
   nil,    27,     2,     4,   nil,    27,     2,     4,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
    21,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   nil,   nil,    21 ]

racc_goto_pointer = [
   nil,    23,     2,   -52,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    48,   206,   nil,    13,  -141,  -146,     1,   nil,   nil,
   -41,  -150,   -40,   nil,  -157,   nil,  -247,   -93,   nil,  -309,
   -34,    16,   nil,   -51,   -33,   nil,   nil,  -233,   -23,   -29,
   nil,  -115,     9,    16,    53,   -26,   -58,   -41,   -35,   nil,
    13,    15,   -86,   nil,  -216,   -80,  -318,  -342,   -40,  -168,
  -163,  -345,  -318 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,   164,    22,    23,   nil,    24,    25,   140,    27,    29,
    30,    31,    32,    33,    34,    35,   280,    39,    38,    40,
    41,    42,    50,    65,   nil,    52,   153,   154,   146,   134,
    66,   nil,    54,   nil,   287,   174,   nil,   nil,    63,    64,
    68,   268,   159,    71,   nil,   306,   nil,   nil,   nil,   nil,
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 97, :_reduce_1,
  1, 97, :_reduce_2,
  1, 98, :_reduce_3,
  3, 98, :_reduce_4,
  2, 98, :_reduce_5,
  1, 98, :_reduce_6,
  2, 98, :_reduce_7,
  1, 99, :_reduce_8,
  1, 99, :_reduce_9,
  1, 99, :_reduce_10,
  1, 99, :_reduce_11,
  1, 99, :_reduce_12,
  1, 99, :_reduce_13,
  1, 99, :_reduce_14,
  1, 99, :_reduce_15,
  1, 99, :_reduce_16,
  1, 99, :_reduce_17,
  1, 99, :_reduce_18,
  1, 99, :_reduce_19,
  1, 99, :_reduce_20,
  1, 99, :_reduce_21,
  1, 99, :_reduce_22,
  1, 99, :_reduce_23,
  1, 99, :_reduce_24,
  1, 117, :_reduce_25,
  1, 117, :_reduce_26,
  2, 117, :_reduce_27,
  1, 117, :_reduce_28,
  1, 117, :_reduce_29,
  1, 117, :_reduce_30,
  1, 117, :_reduce_31,
  3, 117, :_reduce_32,
  1, 118, :_reduce_33,
  1, 118, :_reduce_34,
  1, 118, :_reduce_35,
  1, 118, :_reduce_36,
  1, 118, :_reduce_37,
  1, 118, :_reduce_38,
  1, 118, :_reduce_39,
  3, 118, :_reduce_40,
  1, 132, :_reduce_41,
  1, 132, :_reduce_42,
  1, 132, :_reduce_43,
  1, 132, :_reduce_44,
  1, 132, :_reduce_45,
  1, 132, :_reduce_46,
  1, 132, :_reduce_47,
  1, 100, :_reduce_48,
  1, 100, :_reduce_49,
  1, 129, :_reduce_50,
  1, 129, :_reduce_51,
  1, 129, :_reduce_52,
  1, 129, :_reduce_53,
  1, 129, :_reduce_54,
  1, 129, :_reduce_55,
  1, 129, :_reduce_56,
  1, 134, :_reduce_57,
  1, 133, :_reduce_58,
  1, 133, :_reduce_59,
  2, 133, :_reduce_60,
  2, 133, :_reduce_61,
  1, 135, :_reduce_62,
  1, 137, :_reduce_63,
  1, 136, :_reduce_64,
  5, 139, :_reduce_65,
  3, 138, :_reduce_66,
  4, 138, :_reduce_67,
  0, 140, :_reduce_68,
  1, 140, :_reduce_69,
  3, 140, :_reduce_70,
  1, 119, :_reduce_71,
  3, 141, :_reduce_72,
  4, 141, :_reduce_73,
  0, 142, :_reduce_74,
  1, 142, :_reduce_75,
  3, 142, :_reduce_76,
  3, 143, :_reduce_77,
  2, 126, :_reduce_78,
  2, 126, :_reduce_79,
  2, 126, :_reduce_80,
  4, 126, :_reduce_81,
  2, 127, :_reduce_82,
  4, 127, :_reduce_83,
  2, 146, :_reduce_84,
  3, 145, :_reduce_85,
  3, 145, :_reduce_86,
  4, 145, :_reduce_87,
  4, 145, :_reduce_88,
  3, 147, :_reduce_89,
  2, 147, :_reduce_90,
  2, 147, :_reduce_91,
  1, 147, :_reduce_92,
  1, 144, :_reduce_93,
  2, 144, :_reduce_94,
  2, 120, :_reduce_95,
  2, 120, :_reduce_96,
  5, 130, :_reduce_97,
  4, 130, :_reduce_98,
  4, 130, :_reduce_99,
  2, 130, :_reduce_100,
  2, 130, :_reduce_101,
  4, 130, :_reduce_102,
  5, 152, :_reduce_103,
  2, 152, :_reduce_104,
  4, 113, :_reduce_105,
  2, 113, :_reduce_106,
  6, 101, :_reduce_107,
  5, 101, :_reduce_108,
  1, 148, :_reduce_109,
  0, 148, :_reduce_110,
  1, 153, :_reduce_111,
  3, 153, :_reduce_112,
  0, 150, :_reduce_113,
  1, 150, :_reduce_114,
  1, 151, :_reduce_115,
  3, 151, :_reduce_116,
  3, 121, :_reduce_117,
  3, 121, :_reduce_118,
  3, 121, :_reduce_119,
  3, 121, :_reduce_120,
  3, 121, :_reduce_121,
  3, 121, :_reduce_122,
  3, 121, :_reduce_123,
  3, 121, :_reduce_124,
  3, 121, :_reduce_125,
  3, 121, :_reduce_126,
  3, 121, :_reduce_127,
  3, 121, :_reduce_128,
  3, 121, :_reduce_129,
  3, 121, :_reduce_130,
  3, 121, :_reduce_131,
  3, 121, :_reduce_132,
  3, 121, :_reduce_133,
  3, 121, :_reduce_134,
  3, 121, :_reduce_135,
  3, 121, :_reduce_136,
  3, 121, :_reduce_137,
  3, 121, :_reduce_138,
  3, 121, :_reduce_139,
  3, 121, :_reduce_140,
  3, 121, :_reduce_141,
  3, 121, :_reduce_142,
  3, 121, :_reduce_143,
  3, 121, :_reduce_144,
  3, 121, :_reduce_145,
  3, 121, :_reduce_146,
  3, 121, :_reduce_147,
  3, 121, :_reduce_148,
  3, 121, :_reduce_149,
  3, 121, :_reduce_150,
  3, 121, :_reduce_151,
  2, 125, :_reduce_152,
  2, 125, :_reduce_153,
  2, 125, :_reduce_154,
  2, 123, :_reduce_155,
  1, 123, :_reduce_156,
  3, 114, :_reduce_157,
  3, 114, :_reduce_158,
  3, 154, :_reduce_159,
  3, 154, :_reduce_160,
  3, 154, :_reduce_161,
  3, 154, :_reduce_162,
  1, 155, :_reduce_163,
  1, 155, :_reduce_164,
  1, 155, :_reduce_165,
  1, 155, :_reduce_166,
  1, 155, :_reduce_167,
  2, 156, :_reduce_168,
  2, 156, :_reduce_169,
  2, 156, :_reduce_170,
  1, 128, :_reduce_171,
  2, 128, :_reduce_172,
  2, 104, :_reduce_173,
  2, 104, :_reduce_174,
  2, 104, :_reduce_175,
  1, 157, :_reduce_176,
  2, 157, :_reduce_177,
  2, 157, :_reduce_178,
  2, 157, :_reduce_179,
  3, 158, :_reduce_180,
  4, 158, :_reduce_181,
  4, 158, :_reduce_182,
  6, 102, :_reduce_183,
  9, 102, :_reduce_184,
  9, 102, :_reduce_185,
  11, 102, :_reduce_186,
  1, 159, :_reduce_187,
  1, 159, :_reduce_188,
  1, 159, :_reduce_189,
  1, 149, :_reduce_190,
  1, 149, :_reduce_191,
  1, 160, :_reduce_192,
  2, 160, :_reduce_193,
  0, 160, :_reduce_194,
  0, 162, :_reduce_195,
  1, 162, :_reduce_196,
  1, 162, :_reduce_197,
  3, 162, :_reduce_198,
  3, 162, :_reduce_199,
  3, 163, :_reduce_200,
  2, 103, :_reduce_201,
  4, 103, :_reduce_202,
  4, 103, :_reduce_203,
  0, 164, :_reduce_204,
  1, 164, :_reduce_205,
  1, 112, :_reduce_206,
  4, 115, :_reduce_207,
  5, 115, :_reduce_208,
  3, 115, :_reduce_209,
  4, 116, :_reduce_210,
  5, 116, :_reduce_211,
  3, 116, :_reduce_212,
  5, 122, :_reduce_213,
  4, 107, :_reduce_214,
  1, 111, :_reduce_215,
  1, 111, :_reduce_216,
  4, 108, :_reduce_217,
  6, 106, :_reduce_218,
  6, 106, :_reduce_219,
  6, 106, :_reduce_220,
  3, 109, :_reduce_221,
  4, 109, :_reduce_222,
  6, 109, :_reduce_223,
  0, 166, :_reduce_224,
  2, 166, :_reduce_225,
  3, 166, :_reduce_226,
  3, 166, :_reduce_227,
  4, 166, :_reduce_228,
  2, 161, :_reduce_229,
  1, 161, :_reduce_230,
  1, 165, :_reduce_231,
  3, 165, :_reduce_232,
  3, 165, :_reduce_233,
  4, 165, :_reduce_234,
  3, 167, :_reduce_235,
  4, 168, :_reduce_236,
  5, 168, :_reduce_237,
  4, 110, :_reduce_238,
  6, 110, :_reduce_239,
  2, 131, :_reduce_240,
  4, 124, :_reduce_241,
  1, 124, :_reduce_242,
  1, 105, :_reduce_243 ]

racc_reduce_n = 244

racc_shift_n = 442

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :ELSEIF => 4,
  :THEN => 5,
  :UNLESS => 6,
  :END => 7,
  :WHILE => 8,
  :UNTIL => 9,
  :BREAK => 10,
  :CONTINUE => 11,
  :TRY => 12,
  :CATCH => 13,
  :FINALLY => 14,
  :FOR => 15,
  :IN => 16,
  :DEF => 17,
  :DEF_BANG => 18,
  :SPLAT => 19,
  :CALL => 20,
  :BUILTIN_COMMAND => 21,
  :CLASS => 22,
  :NEW => 23,
  :DEFM => 24,
  :DEFM_BANG => 25,
  :SUPER => 26,
  :RIML_COMMAND => 27,
  :RETURN => 28,
  :NEWLINE => 29,
  :NUMBER => 30,
  :STRING_D => 31,
  :STRING_S => 32,
  :EX_LITERAL => 33,
  :REGEXP => 34,
  :TRUE => 35,
  :FALSE => 36,
  :LET => 37,
  :UNLET => 38,
  :UNLET_BANG => 39,
  :IDENTIFIER => 40,
  :DICT_VAL => 41,
  :SCOPE_MODIFIER => 42,
  :SCOPE_MODIFIER_LITERAL => 43,
  :SPECIAL_VAR_PREFIX => 44,
  :FINISH => 45,
  "!" => 46,
  "*" => 47,
  "/" => 48,
  "%" => 49,
  "+" => 50,
  "-" => 51,
  "." => 52,
  ">" => 53,
  ">#" => 54,
  ">?" => 55,
  "<" => 56,
  "<#" => 57,
  "<?" => 58,
  ">=" => 59,
  ">=#" => 60,
  ">=?" => 61,
  "<=" => 62,
  "<=#" => 63,
  "<=?" => 64,
  "==" => 65,
  "==?" => 66,
  "==#" => 67,
  "=~" => 68,
  "=~?" => 69,
  "=~#" => 70,
  "!~" => 71,
  "!~?" => 72,
  "!~#" => 73,
  "!=" => 74,
  "!=?" => 75,
  "!=#" => 76,
  :IS => 77,
  :ISNOT => 78,
  "&&" => 79,
  "||" => 80,
  "?" => 81,
  "=" => 82,
  "+=" => 83,
  "-=" => 84,
  ".=" => 85,
  "," => 86,
  "(" => 87,
  ")" => 88,
  ";" => 89,
  "[" => 90,
  "]" => 91,
  "{" => 92,
  "}" => 93,
  ":" => 94,
  "===" => 95 }

racc_nt_base = 96

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "ELSEIF",
  "THEN",
  "UNLESS",
  "END",
  "WHILE",
  "UNTIL",
  "BREAK",
  "CONTINUE",
  "TRY",
  "CATCH",
  "FINALLY",
  "FOR",
  "IN",
  "DEF",
  "DEF_BANG",
  "SPLAT",
  "CALL",
  "BUILTIN_COMMAND",
  "CLASS",
  "NEW",
  "DEFM",
  "DEFM_BANG",
  "SUPER",
  "RIML_COMMAND",
  "RETURN",
  "NEWLINE",
  "NUMBER",
  "STRING_D",
  "STRING_S",
  "EX_LITERAL",
  "REGEXP",
  "TRUE",
  "FALSE",
  "LET",
  "UNLET",
  "UNLET_BANG",
  "IDENTIFIER",
  "DICT_VAL",
  "SCOPE_MODIFIER",
  "SCOPE_MODIFIER_LITERAL",
  "SPECIAL_VAR_PREFIX",
  "FINISH",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\".\"",
  "\">\"",
  "\">#\"",
  "\">?\"",
  "\"<\"",
  "\"<#\"",
  "\"<?\"",
  "\">=\"",
  "\">=#\"",
  "\">=?\"",
  "\"<=\"",
  "\"<=#\"",
  "\"<=?\"",
  "\"==\"",
  "\"==?\"",
  "\"==#\"",
  "\"=~\"",
  "\"=~?\"",
  "\"=~#\"",
  "\"!~\"",
  "\"!~?\"",
  "\"!~#\"",
  "\"!=\"",
  "\"!=?\"",
  "\"!=#\"",
  "IS",
  "ISNOT",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\"=\"",
  "\"+=\"",
  "\"-=\"",
  "\".=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\":\"",
  "\"===\"",
  "$start",
  "Root",
  "Statements",
  "Statement",
  "Terminator",
  "ExplicitCall",
  "Def",
  "Return",
  "UnletVariable",
  "ExLiteral",
  "For",
  "While",
  "Until",
  "Try",
  "ClassDefinition",
  "LoopKeyword",
  "EndScript",
  "RimlCommand",
  "MultiAssign",
  "If",
  "Unless",
  "Expression",
  "ExpressionWithoutDictLiteral",
  "Dictionary",
  "DictGetWithDotLiteral",
  "BinaryOperator",
  "Ternary",
  "Assign",
  "Super",
  "UnaryOperator",
  "DictGet",
  "ListOrDictGet",
  "AllVariableRetrieval",
  "LiteralWithoutDictLiteral",
  "Call",
  "ObjectInstantiation",
  "PossibleStringValue",
  "String",
  "Number",
  "Regexp",
  "List",
  "ScopeModifierLiteral",
  "ListLiteral",
  "ListUnpack",
  "ListItems",
  "DictionaryLiteral",
  "DictItems",
  "DictItem",
  "DictGetWithDot",
  "ListOrDictGetWithBrackets",
  "ListOrDictGetAssign",
  "SubList",
  "Scope",
  "DefCallIdentifier",
  "ArgList",
  "ArgListWithoutNothing",
  "ObjectInstantiationCall",
  "ScopeOrSID",
  "AssignExpression",
  "AssignLHS",
  "VariableRetrieval",
  "CurlyBraceName",
  "CurlyBraceVarPart",
  "FunctionType",
  "DefKeywords",
  "Block",
  "ParamList",
  "DefaultParam",
  "Returnable",
  "IfBlock",
  "Catch",
  "ElseBlock",
  "ElseifBlock" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_1(val, _values, result)
     result = Riml::Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_3(val, _values, result)
     result = Riml::Nodes.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_6(val, _values, result)
     result = Riml::Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_7(val, _values, result)
     result = Riml::Nodes.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_21(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_26(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_27(val, _values, result)
     result = Riml::DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_28(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_32(val, _values, result)
     result = Riml::WrapInParensNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_33(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_34(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 87)
  def _reduce_35(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_37(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_38(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_40(val, _values, result)
     result = Riml::WrapInParensNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_41(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_42(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_45(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_47(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_48(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_49(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_50(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_51(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_52(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_53(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_55(val, _values, result)
     result = Riml::TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_56(val, _values, result)
     result = Riml::FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 122)
  def _reduce_57(val, _values, result)
     result = Riml::NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 126)
  def _reduce_58(val, _values, result)
     result = Riml::StringNode.new(val[0], :s) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_59(val, _values, result)
     result = Riml::StringNode.new(val[0], :d) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_60(val, _values, result)
     result = Riml::StringLiteralConcatNode.new(val[0], Riml::StringNode.new(val[1], :s)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_61(val, _values, result)
     result = Riml::StringLiteralConcatNode.new(val[0], Riml::StringNode.new(val[1], :d)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_62(val, _values, result)
     result = Riml::RegexpNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_63(val, _values, result)
     result = Riml::ScopeModifierLiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_64(val, _values, result)
     result = Riml::ListNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_65(val, _values, result)
     result = Riml::ListUnpackNode.new(val[1] << val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_66(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_67(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_68(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_69(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_70(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_71(val, _values, result)
     result = Riml::DictionaryNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 165)
  def _reduce_72(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_73(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_74(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_75(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_76(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_77(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_78(val, _values, result)
     result = Riml::DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_79(val, _values, result)
     result = Riml::DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_80(val, _values, result)
     result = Riml::DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_81(val, _values, result)
     result = Riml::DictGetDotNode.new(Riml::WrapInParensNode.new(val[1]), val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 189)
  def _reduce_82(val, _values, result)
     result = Riml::ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 190)
  def _reduce_83(val, _values, result)
     result = Riml::ListOrDictGetNode.new(Riml::WrapInParensNode.new(val[1]), val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 194)
  def _reduce_84(val, _values, result)
     result = Riml::ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 198)
  def _reduce_85(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 199)
  def _reduce_86(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 200)
  def _reduce_87(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 201)
  def _reduce_88(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 205)
  def _reduce_89(val, _values, result)
     result = Riml::SublistNode.new([val[0], Riml::LiteralNode.new(' : '), val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 206)
  def _reduce_90(val, _values, result)
     result = Riml::SublistNode.new([val[0], Riml::LiteralNode.new(' :')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 207)
  def _reduce_91(val, _values, result)
     result = Riml::SublistNode.new([Riml::LiteralNode.new(': '), val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_92(val, _values, result)
     result = Riml::SublistNode.new([Riml::LiteralNode.new(':')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 212)
  def _reduce_93(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_94(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 217)
  def _reduce_95(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_96(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 222)
  def _reduce_97(val, _values, result)
     result = Riml::CallNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 223)
  def _reduce_98(val, _values, result)
     result = Riml::CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 224)
  def _reduce_99(val, _values, result)
     result = Riml::CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 225)
  def _reduce_100(val, _values, result)
     result = Riml::CallNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_101(val, _values, result)
     result = Riml::CallNode.new(nil, val[0], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 227)
  def _reduce_102(val, _values, result)
     result = Riml::ExplicitCallNode.new(nil, nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 231)
  def _reduce_103(val, _values, result)
     result = Riml::CallNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 232)
  def _reduce_104(val, _values, result)
     result = Riml::CallNode.new(val[0], val[1], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_105(val, _values, result)
     result = Riml::RimlCommandNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_106(val, _values, result)
     result = Riml::RimlCommandNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 241)
  def _reduce_107(val, _values, result)
     result = Riml::ExplicitCallNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 242)
  def _reduce_108(val, _values, result)
     result = Riml::ExplicitCallNode.new(nil, val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_109(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 247)
  def _reduce_110(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 251)
  def _reduce_111(val, _values, result)
     val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_112(val, _values, result)
     result = Riml::SIDNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 256)
  def _reduce_113(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_114(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 261)
  def _reduce_115(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_116(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 266)
  def _reduce_117(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 267)
  def _reduce_118(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 269)
  def _reduce_119(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 270)
  def _reduce_120(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 271)
  def _reduce_121(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_122(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 276)
  def _reduce_123(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 277)
  def _reduce_124(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 278)
  def _reduce_125(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_126(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_127(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 282)
  def _reduce_128(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 284)
  def _reduce_129(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 285)
  def _reduce_130(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 286)
  def _reduce_131(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 288)
  def _reduce_132(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 289)
  def _reduce_133(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 290)
  def _reduce_134(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_135(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_136(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 294)
  def _reduce_137(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 296)
  def _reduce_138(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 297)
  def _reduce_139(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 298)
  def _reduce_140(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 300)
  def _reduce_141(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 301)
  def _reduce_142(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 302)
  def _reduce_143(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 304)
  def _reduce_144(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 305)
  def _reduce_145(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_146(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 307)
  def _reduce_147(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 308)
  def _reduce_148(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 309)
  def _reduce_149(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 311)
  def _reduce_150(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 312)
  def _reduce_151(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_152(val, _values, result)
     result = Riml::UnaryOperatorNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 317)
  def _reduce_153(val, _values, result)
     result = Riml::UnaryOperatorNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_154(val, _values, result)
     result = Riml::UnaryOperatorNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 323)
  def _reduce_155(val, _values, result)
     result = Riml::AssignNode.new(val[1][0], val[1][1], val[1][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 324)
  def _reduce_156(val, _values, result)
     result = Riml::AssignNode.new(val[0][0], val[0][1], val[0][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_157(val, _values, result)
     result = Riml::MultiAssignNode.new([val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 329)
  def _reduce_158(val, _values, result)
     val[0].assigns << val[2]; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_159(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_160(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 336)
  def _reduce_161(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 337)
  def _reduce_162(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 341)
  def _reduce_163(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 342)
  def _reduce_164(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 343)
  def _reduce_165(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 344)
  def _reduce_166(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 345)
  def _reduce_167(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 350)
  def _reduce_168(val, _values, result)
     result = Riml::GetVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 351)
  def _reduce_169(val, _values, result)
     result = Riml::GetSpecialVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 352)
  def _reduce_170(val, _values, result)
     result = Riml::GetVariableByScopeAndDictNameNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 356)
  def _reduce_171(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_172(val, _values, result)
     result = Riml::GetCurlyBraceNameNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 361)
  def _reduce_173(val, _values, result)
     result = Riml::UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 362)
  def _reduce_174(val, _values, result)
     result = Riml::UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 363)
  def _reduce_175(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 367)
  def _reduce_176(val, _values, result)
     result = Riml::CurlyBraceVariable.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 368)
  def _reduce_177(val, _values, result)
     result = Riml::CurlyBraceVariable.new([ Riml::CurlyBracePart.new(val[0]), val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 369)
  def _reduce_178(val, _values, result)
     result = val[0] << Riml::CurlyBracePart.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 370)
  def _reduce_179(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 374)
  def _reduce_180(val, _values, result)
     result = Riml::CurlyBracePart.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 375)
  def _reduce_181(val, _values, result)
     result = Riml::CurlyBracePart.new([val[1], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 376)
  def _reduce_182(val, _values, result)
     result = Riml::CurlyBracePart.new([val[1], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 382)
  def _reduce_183(val, _values, result)
     result = Riml.const_get(val[0]).new('!', val[1], val[2], [], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 383)
  def _reduce_184(val, _values, result)
     result = Riml.const_get(val[0]).new('!', val[1], val[2], val[4], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 384)
  def _reduce_185(val, _values, result)
     result = Riml.const_get(val[0]).new('!', val[1], val[2], [val[4]], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 385)
  def _reduce_186(val, _values, result)
     result = Riml.const_get(val[0]).new('!', val[1], val[2], val[4] << val[6], val[8], val[9]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 389)
  def _reduce_187(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 390)
  def _reduce_188(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 391)
  def _reduce_189(val, _values, result)
     result = "DefMethodNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 396)
  def _reduce_190(val, _values, result)
     result = Riml::GetCurlyBraceNameNode.new('', val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 397)
  def _reduce_191(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 402)
  def _reduce_192(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 403)
  def _reduce_193(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 404)
  def _reduce_194(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 408)
  def _reduce_195(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 409)
  def _reduce_196(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 410)
  def _reduce_197(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 411)
  def _reduce_198(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 412)
  def _reduce_199(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 416)
  def _reduce_200(val, _values, result)
     result = Riml::DefaultParamNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 420)
  def _reduce_201(val, _values, result)
     result = Riml::ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 421)
  def _reduce_202(val, _values, result)
     result = Riml::IfNode.new(val[3], Nodes.new([ReturnNode.new(val[1])])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 422)
  def _reduce_203(val, _values, result)
     result = Riml::UnlessNode.new(val[3], Nodes.new([ReturnNode.new(val[1])])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 426)
  def _reduce_204(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 427)
  def _reduce_205(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 431)
  def _reduce_206(val, _values, result)
     result = Riml::FinishNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 436)
  def _reduce_207(val, _values, result)
     result = Riml::IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 437)
  def _reduce_208(val, _values, result)
     result = Riml::IfNode.new(val[1], Riml::Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 438)
  def _reduce_209(val, _values, result)
     result = Riml::IfNode.new(val[2], Riml::Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 442)
  def _reduce_210(val, _values, result)
     result = Riml::UnlessNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 443)
  def _reduce_211(val, _values, result)
     result = Riml::UnlessNode.new(val[1], Riml::Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 444)
  def _reduce_212(val, _values, result)
     result = Riml::UnlessNode.new(val[2], Riml::Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 448)
  def _reduce_213(val, _values, result)
     result = Riml::TernaryOperatorNode.new([val[0], val[2], val[4]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 452)
  def _reduce_214(val, _values, result)
     result = Riml::WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 456)
  def _reduce_215(val, _values, result)
     result = Riml::BreakNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 457)
  def _reduce_216(val, _values, result)
     result = Riml::ContinueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 461)
  def _reduce_217(val, _values, result)
     result = Riml::UntilNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 465)
  def _reduce_218(val, _values, result)
     result = Riml::ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 466)
  def _reduce_219(val, _values, result)
     result = Riml::ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 467)
  def _reduce_220(val, _values, result)
     result = Riml::ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 471)
  def _reduce_221(val, _values, result)
     result = Riml::TryNode.new(val[1], nil, nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 472)
  def _reduce_222(val, _values, result)
     result = Riml::TryNode.new(val[1], val[2], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 473)
  def _reduce_223(val, _values, result)
     result = Riml::TryNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 477)
  def _reduce_224(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 478)
  def _reduce_225(val, _values, result)
     result = [ Riml::CatchNode.new(nil, val[1]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 479)
  def _reduce_226(val, _values, result)
     result = [ Riml::CatchNode.new(val[1], val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 480)
  def _reduce_227(val, _values, result)
     result = val[0] << Riml::CatchNode.new(nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 481)
  def _reduce_228(val, _values, result)
     result = val[0] << Riml::CatchNode.new(val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 488)
  def _reduce_229(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 489)
  def _reduce_230(val, _values, result)
     result = Riml::Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 493)
  def _reduce_231(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 494)
  def _reduce_232(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 495)
  def _reduce_233(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 496)
  def _reduce_234(val, _values, result)
     result = val[1] << val[2] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 500)
  def _reduce_235(val, _values, result)
     result = Riml::ElseNode.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 504)
  def _reduce_236(val, _values, result)
     result = Riml::Nodes.new([Riml::ElseifNode.new(val[1], val[3])]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 505)
  def _reduce_237(val, _values, result)
     result = val[0] << Riml::ElseifNode.new(val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 509)
  def _reduce_238(val, _values, result)
     result = Riml::ClassDefinitionNode.new(val[1], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 510)
  def _reduce_239(val, _values, result)
     result = Riml::ClassDefinitionNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 514)
  def _reduce_240(val, _values, result)
     result = Riml::ObjectInstantiationNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 518)
  def _reduce_241(val, _values, result)
     result = Riml::SuperNode.new(val[2], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 519)
  def _reduce_242(val, _values, result)
     result = Riml::SuperNode.new([], false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 523)
  def _reduce_243(val, _values, result)
     result = Riml::ExLiteralNode.new(val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
