#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require File.expand_path("../ast_rewriter", __FILE__)
  require File.expand_path("../errors", __FILE__)
module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 452)
  # This code will be put as-is in the parser class

  # parses tokens or code into output nodes
  def parse(object, rewrite_ast = true)
    if tokens?(object)
      @tokens = object
    elsif code?(object)
      @lexer = Riml::Lexer.new(object)
    end

    begin
      ast = do_parse
    rescue Racc::ParseError => e
      raise unless @lexer
      raise Riml::ParseError,  "line #{@lexer.lineno}: #{e.message}"
    end

    return ast if rewrite_ast == false
    AST_Rewriter.new(ast).rewrite
  end

  def next_token
    return @tokens.shift unless @lexer
    @lexer.next_token
  end

  private
  def tokens?(object)
    Array === object
  end

  def code?(object)
    String === object
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'120,335,336,184,121,360,136,330,54,55,242,271,54,55,253,311,345,273',
'241,54,55,313,312,56,91,63,31,361,31,331,146,56,276,63,31,56,31,63,31',
'234,243,258,56,31,63,124,115,116,307,113,114,117,101,102,103,107,108',
'109,104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118',
'119,87,86,122,120,52,148,50,121,52,155,32,33,32,33,148,52,148,91,32',
'33,32,33,32,33,43,45,44,32,33,47,40,41,42,146,181,244,43,45,44,48,305',
'47,40,41,42,128,128,246,302,115,116,48,113,114,117,101,102,103,107,108',
'109,104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118',
'119,87,86,122,120,50,148,50,121,52,288,184,45,44,-158,124,124,47,91',
'50,-159,52,316,43,45,44,245,240,47,40,41,42,126,239,335,351,124,-91',
'48,56,301,63,115,116,317,113,114,117,115,116,115,116,128,113,114,117',
'101,102,103,107,108,109,104,105,106,110,111,112,88,90,89,95,97,96,98',
'100,99,92,94,93,118,119,87,86,122,120,50,300,52,121,-91,91,184,-138',
'-138,-138,-138,91,47,91,246,238,124,-139,-139,-139,-139,248,126,126',
'237,124,124,124,-140,-140,-140,-140,115,116,115,116,321,113,114,117',
'115,116,115,116,128,115,116,228,113,114,117,101,102,103,107,108,109',
'104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119',
'87,86,122,120,91,136,91,121,-141,-141,-141,-141,91,253,91,296,228,91',
'167,168,169,170,253,253,297,326,253,253,323,318,253,56,285,63,233,245',
'115,116,324,113,114,117,115,116,124,113,114,117,325,115,116,308,113',
'114,117,101,102,103,107,108,109,104,105,106,110,111,112,88,90,89,95',
'97,96,98,100,99,92,94,93,118,119,87,86,122,120,91,233,56,121,63,236',
'91,56,348,63,347,228,184,91,128,228,189,188,185,184,184,124,184,184',
'56,253,-84,295,346,91,349,293,115,116,352,113,114,117,115,116,128,113',
'114,117,354,115,116,355,113,114,117,101,102,103,107,108,109,104,105',
'106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122',
'120,91,356,184,121,358,-83,91,301,269,301,171,270,246,91,184,367,184',
'245,283,124,371,301,373,91,124,184,84,376,,,,,115,116,,113,114,117,115',
'116,,113,114,117,,115,116,,113,114,117,101,102,103,107,108,109,104,105',
'106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122',
'120,91,,,121,,,91,,,,,,,91,,,,,,,,,,,,,,,,,,,115,116,,113,114,117,115',
'116,,113,114,117,,115,116,,113,114,117,101,102,103,107,108,109,104,105',
'106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122',
'120,91,,,121,,,91,,,,,,278,91,,,,,,,,,,,,,,,,,,,115,116,,113,114,117',
'115,116,,113,114,117,,115,116,,113,114,117,101,102,103,107,108,109,104',
'105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87',
'86,122,120,91,,,121,,,91,,,,,,,91,,,,,,,,,,,,,,,,,,,115,116,,,,,,,,',
',,,115,116,,113,114,117,101,102,103,107,108,109,104,105,106,110,111',
'112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,120,91,,',
'121,,,,,,320,,,282,91,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,115,116,,113,114',
'117,101,102,103,107,108,109,104,105,106,110,111,112,88,90,89,95,97,96',
'98,100,99,92,94,93,118,119,87,86,122,120,,,,121,,,,,,281,,,282,91,,',
',,,,,,,,,369,,,,,,,,,,,,,,,,,,,,115,116,,113,114,117,101,102,103,107',
'108,109,104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93',
'118,119,87,86,122,120,,,,121,,,,,,,,,,91,,,,,,,,,,,,365,,,,,,,,,,,,',
',,,,,,,115,116,,113,114,117,101,102,103,107,108,109,104,105,106,110',
'111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,120,',
',,121,,,,,,,,,,91,,,,,,,,,,,,184,,,,,,,,,,,,,,,,,,,,115,116,,113,114',
'117,101,102,103,107,108,109,104,105,106,110,111,112,88,90,89,95,97,96',
'98,100,99,92,94,93,118,119,87,86,122,120,,,,121,,,,,,,,,,91,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,115,116,,113,114,117,101,102,103,107,108,109',
'104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119',
'87,86,122,120,,,,121,,,,,,,,,,91,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,115',
'116,,113,114,117,101,102,103,107,108,109,104,105,106,110,111,112,88',
'90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,120,,,,121,,,,,',
',,,,91,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,115,116,,113,114,117,101,102,103',
'107,108,109,104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94',
'93,118,119,87,86,122,120,,,,121,,,,,,,,,,91,,,,,,,,,,,,184,,,,,,,,,',
',,,,,,,,,,115,116,,113,114,117,101,102,103,107,108,109,104,105,106,110',
'111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,120,',
',,121,332,,,,,,,,,91,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,115,116,,113,114',
'117,101,102,103,107,108,109,104,105,106,110,111,112,88,90,89,95,97,96',
'98,100,99,92,94,93,118,119,87,86,122,120,,,262,121,,,,,,,,,,91,,,,,',
',,,,,,263,,,,,,,,,,,,,,,,,,,,115,116,,113,114,117,101,102,103,107,108',
'109,104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118',
'119,87,86,122,120,,,,121,337,,,,,,,,,91,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,115,116,,113,114,117,101,102,103,107,108,109,104,105,106,110,111',
'112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,120,,,,121',
',,,,,,,,,91,,,,,,,,,,,,184,,,,,,,,,,,,,,,,,,,,115,116,,113,114,117,101',
'102,103,107,108,109,104,105,106,110,111,112,88,90,89,95,97,96,98,100',
'99,92,94,93,118,119,87,86,122,120,,,266,121,,,,,,,,,,91,,,,,,,,,,,,263',
',,,,,,,,,,,,,,,,,,,115,116,,113,114,117,101,102,103,107,108,109,104',
'105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87',
'86,122,120,,,,121,,,,,,,,,,91,,,,,,,,,,,,184,,,,,,,,,,,,,,,,,,,,115',
'116,,113,114,117,101,102,103,107,108,109,104,105,106,110,111,112,88',
'90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,120,,,,121,,,,,',
',,,,91,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,115,116,,113,114,117,101,102,103',
'107,108,109,104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94',
'93,118,119,87,86,122,,,,72,,,236,73,,74,77,75,76,79,91,,78,,67,68,,54',
'55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71',
'57,,,,58,59,115,116,,113,114,117,101,102,103,107,108,109,104,105,106',
'110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,30',
',,72,50,,52,73,231,74,77,75,76,79,91,,78,,67,68,,54,55,80,81,69,,82',
'70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59,115',
'116,,113,114,117,101,102,103,107,108,109,104,105,106,110,111,112,88',
'90,89,95,97,96,98,100,99,92,94,93,118,119,87,86,122,30,,,72,50,,52,73',
'231,74,77,75,76,79,91,,78,,67,68,,54,55,80,81,69,,82,70,31,43,45,44',
'46,83,47,40,41,42,60,64,65,-91,,56,48,63,71,57,,,,58,59,,115,116,,113',
'114,117,101,102,103,107,108,109,104,105,106,110,111,112,88,90,89,95',
'97,96,98,100,99,92,94,93,118,119,87,,30,72,32,33,50,73,52,74,77,75,76',
'79,,,78,91,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42',
'60,64,65,,,56,48,63,71,57,,,,58,59,,115,116,,113,114,117,101,102,103',
'107,108,109,104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94',
'93,118,119,,,30,72,,,50,73,52,74,77,75,76,79,,,78,91,67,68,,54,55,80',
'81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,',
',,58,59,,115,116,,113,114,117,101,102,103,107,108,109,104,105,106,110',
'111,112,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,91,67,68',
',54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48',
'63,71,57,,,,58,59,,115,116,,113,114,117,101,102,103,107,108,109,104',
'105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,,,,,30,72,',
',50,73,52,74,77,75,76,79,,,78,91,67,68,,54,55,80,81,69,,82,70,,43,45',
'44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,115,116,,113',
'114,117,101,102,103,107,108,109,104,105,106,110,111,112,,,,,,,,,,,,',
',,,,30,72,,,50,73,52,74,77,75,76,79,,,78,91,67,68,,54,55,80,81,69,,82',
'70,31,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59',
',115,116,,113,114,117,101,102,103,107,108,109,104,105,106,110,111,112',
',,,,,,,,,,,,,,,,30,72,32,33,50,73,52,74,77,75,76,79,,,78,91,67,68,,54',
'55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71',
'57,,,,58,59,,115,116,,113,114,117,101,102,103,107,108,109,104,105,106',
'110,111,112,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,91',
'67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,',
'56,48,63,71,57,,,,58,59,,115,116,,113,114,117,101,102,103,107,108,109',
'104,105,106,110,111,112,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76',
'79,,,78,91,67,68,,54,55,80,81,69,,82,70,31,43,45,44,46,83,47,40,41,42',
'60,64,65,,,56,48,63,71,57,,,,58,59,,115,116,,113,114,117,101,102,103',
'107,108,109,104,105,106,110,111,112,,,,,,,,,,,,,,,,,30,72,32,33,50,73',
'52,74,77,75,76,79,,,78,91,67,68,,54,55,80,81,69,,82,70,,43,45,44,46',
'83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,115,116,,113,114',
'117,101,102,103,107,108,109,104,105,106,110,111,112,,,,,,,,,,,,,,,,',
'30,72,,,50,73,52,74,77,75,76,79,,,78,91,67,68,,54,55,80,81,69,,82,70',
',43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,115',
'116,,113,114,117,101,102,103,107,108,109,104,105,106,110,111,112,,,',
',,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,91,67,68,,54,55,80',
'81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,-91,,56,48,63,71,57',
',,,58,59,,115,116,,113,114,117,101,102,103,107,108,109,104,105,106,110',
'111,112,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,91,67,68',
',54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48',
'63,71,57,,,,58,59,,115,116,,113,114,117,101,102,103,107,108,109,104',
'105,106,110,111,112,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79',
',,78,91,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60',
'64,65,,,56,48,63,71,57,,,,58,59,,115,116,,113,114,117,101,102,103,107',
'108,109,104,105,106,110,111,112,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74',
'77,75,76,79,,,78,91,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47',
'40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,115,116,,113,114,117,101',
'102,103,107,108,109,104,105,106,110,111,112,88,90,89,95,97,96,98,100',
'99,92,94,93,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,91,67,68,,54,55',
'80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57',
',,,58,59,,115,116,,113,114,117,101,102,103,107,108,109,104,105,106,110',
'111,112,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,91,67,68',
',54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48',
'63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52',
'74,77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47',
'40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81',
'69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58',
'59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79',
',,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64',
'65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72',
',,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45',
'44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,',
'54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63',
'71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74',
'77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40',
'41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69',
',82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,',
',78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64',
'65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72',
',,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45',
'44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,',
'54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63',
'71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74',
'77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40',
'41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69',
',82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,',
',78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64',
'65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72',
',,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45',
'44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,',
'54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63',
'71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74',
'77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40',
'41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69',
',82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,',
',78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64',
'65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72',
',,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45',
'44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,',
'54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63',
'71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74',
'77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40',
'41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69',
',82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,',
',78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64',
'65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72',
',,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45',
'44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,',
'54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63',
'71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74',
'77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40',
'41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69',
',82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,',
',78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64',
'65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72',
',,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45',
'44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,',
'54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63',
'71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74',
'77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40',
'41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69',
',82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,',
',78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64',
'65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72',
',,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45',
'44,46,83,47,40,41,42,60,64,65,-91,,56,48,63,71,57,,,,58,59,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,156,72,,,50,73,52,74,77,75,76,79,,,78,,67',
'68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,-91,',
'56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50',
'73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46',
'83,47,40,41,42,60,64,65,-91,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,,54',
'55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,-91,,56,48,63',
'71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74',
'77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40',
'41,42,60,64,65,-91,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81',
'69,,82,70,31,43,45,44,46,83,47,40,41,42,60,64,65,-91,,56,48,63,71,57',
',,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,32,33,50,73,52,74',
'77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40',
'41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69',
',82,70,,43,45,44,46,83,47,40,41,42,60,64,65,-91,,56,48,63,71,57,,,,58',
'59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79',
',,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64',
'65,-91,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30',
'72,,,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43',
'45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68',
',54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48',
'63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52',
'74,77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47',
'40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81',
'69,,82,70,31,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,',
',58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,32,33,50,73,52,74,77',
'75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41',
'42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82',
'70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78',
',67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,',
',56,48,63,71,57,,,,58,59,115,116,,113,114,117,101,102,103,107,108,109',
'104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118,119',
'87,86,122,30,,,72,50,,52,73,-190,74,77,75,76,79,91,,78,,67,68,,54,55',
'80,81,69,,82,70,31,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71',
'57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,32,33,50,73,52',
'74,77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47',
'40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81',
'69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58',
'59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79',
',,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64',
'65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72',
',,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45',
'44,46,83,47,40,41,42,60,64,65,-91,,56,48,63,71,57,,,,58,59,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68',
',54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,-91,,56',
'48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73',
'52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,31,43,45,44,46',
'83,47,40,41,42,60,64,65,,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,30,72,32,33,50,73,52,74,77,75,76,79,,,78,,67,68,,54',
'55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64,65,,,56,48,63,71',
'57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77',
'75,76,79,,,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41',
'42,60,64,65,-91,,56,48,63,71,57,,,,58,59,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,30,72,,,50,73,52,74,77,75,76,79,,,78,,67,68,,54,55,80,81,69',
',82,70,,43,45,44,46,83,47,40,41,42,60,64,65,-91,,56,48,63,71,57,,,,58',
'59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,72,,,50,73,52,74,77,75,76,79',
',,78,,67,68,,54,55,80,81,69,,82,70,,43,45,44,46,83,47,40,41,42,60,64',
'65,,,56,48,63,71,57,,,,58,59,115,116,,113,114,117,101,102,103,107,108',
'109,104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94,93,118',
'119,87,86,122,30,,,,50,286,52,,,,,,115,116,91,113,114,117,101,102,103',
'107,108,109,104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94',
'93,118,119,87,86,122,,,,,,,,,,,,,115,116,91,113,114,117,101,102,103',
'107,108,109,104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94',
'93,118,119,87,86,122,,,,,,,,,,,,,115,116,91,113,114,117,101,102,103',
'107,108,109,104,105,106,110,111,112,88,90,89,95,97,96,98,100,99,92,94',
'93,118,119,87,86,122,,,,,,,,,,,,,,,91' ]
        racc_action_table = arr = ::Array.new(9062, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'322,304,304,185,322,348,149,300,81,81,142,183,60,60,327,272,327,183',
'142,54,54,272,272,65,221,65,304,348,370,300,154,81,185,81,2,60,364,60',
'374,131,144,174,54,274,54,149,322,322,267,322,322,322,322,322,322,322',
'322,322,322,322,322,322,322,322,322,322,322,322,322,322,322,322,322',
'322,322,322,322,322,322,322,322,196,81,154,60,196,60,54,304,304,370',
'370,131,54,174,322,2,2,364,364,374,374,242,242,242,274,274,242,242,242',
'242,53,78,145,243,243,243,242,265,243,243,243,243,162,150,147,261,196',
'196,243,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196',
'190,78,53,242,190,242,242,273,46,46,147,162,150,273,196,243,146,243',
'275,52,52,52,146,138,52,52,52,52,164,138,334,334,164,14,52,14,260,14',
'209,209,276,209,209,209,161,161,190,190,13,190,190,190,190,190,190,190',
'190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190',
'190,190,190,190,190,190,190,190,3,52,260,52,3,14,209,313,13,13,13,13',
'161,313,190,259,136,13,9,9,9,9,152,9,186,135,152,9,186,37,37,37,37,160',
'160,206,206,280,206,206,206,218,218,219,219,10,3,3,134,3,3,3,3,3,3,3',
'3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,251,160,38,206,251',
'10,10,10,10,218,250,219,250,130,3,62,62,62,62,252,294,252,294,291,277',
'291,277,232,148,232,148,129,258,207,207,292,207,207,207,208,208,38,208',
'208,208,293,251,251,268,251,251,251,251,251,251,251,251,251,251,251',
'251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251',
'251,251,251,251,158,207,127,245,158,245,251,208,64,329,64,329,125,299',
'251,151,123,84,82,80,79,312,153,315,317,66,157,326,249,328,159,330,247',
'210,210,335,210,210,210,211,211,163,211,211,211,338,158,158,339,158',
'158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158',
'158,158,158,158,158,158,158,158,158,158,158,158,158,158,139,210,340',
'342,139,344,345,211,347,181,349,63,182,235,158,359,360,362,234,230,187',
'366,367,368,220,7,372,1,375,,,,,212,212,,212,212,212,213,213,,213,213',
'213,,139,139,,139,139,139,139,139,139,139,139,139,139,139,139,139,139',
'139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139',
'139,227,212,,,227,,,213,,,,,,,139,,,,,,,,,,,,,,,,,,,214,214,,214,214',
'214,215,215,,215,215,215,,227,227,,227,227,227,227,227,227,227,227,227',
'227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227',
'227,227,227,227,227,227,319,214,,,319,,,215,,,,,,227,227,,,,,,,,,,,',
',,,,,,,216,216,,216,216,216,217,217,,217,217,217,,319,319,,319,319,319',
'319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319',
'319,319,319,319,319,319,319,319,319,319,319,319,279,216,,,279,,,217',
',,,,,,319,,,,,,,,,,,,,,,,,,,222,222,,,,,,,,,,,,279,279,,279,279,279',
'279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279',
'279,279,279,279,279,279,279,279,279,279,279,279,229,222,,,229,,,,,,279',
',,279,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,229,229,,229,229,229,229,229',
'229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229',
'229,229,229,229,229,229,229,229,229,229,363,,,,363,,,,,,229,,,229,229',
',,,,,,,,,,,363,,,,,,,,,,,,,,,,,,,,363,363,,363,363,363,363,363,363,363',
'363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363',
'363,363,363,363,363,363,363,363,353,,,,353,,,,,,,,,,363,,,,,,,,,,,,353',
',,,,,,,,,,,,,,,,,,,353,353,,353,353,353,353,353,353,353,353,353,353',
'353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353',
'353,353,353,353,353,310,,,,310,,,,,,,,,,353,,,,,,,,,,,,310,,,,,,,,,',
',,,,,,,,,,310,310,,310,310,310,310,310,310,310,310,310,310,310,310,310',
'310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310',
'310,310,284,,,,284,,,,,,,,,,310,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,284,284',
',284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284',
'284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,287,,,,287',
',,,,,,,,,284,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,287,287,,287,287,287,287',
'287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287',
'287,287,287,287,287,287,287,287,287,287,287,175,,,,175,,,,,,,,,,287',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,175,175,,175,175,175,175,175,175,175',
'175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175',
'175,175,175,175,175,175,175,175,179,,,,179,,,,,,,,,,175,,,,,,,,,,,,179',
',,,,,,,,,,,,,,,,,,,179,179,,179,179,179,179,179,179,179,179,179,179',
'179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179',
'179,179,179,179,179,303,,,,303,303,,,,,,,,,179,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,303,303,,303,303,303,303,303,303,303,303,303,303,303,303,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303',
'303,303,177,,,177,177,,,,,,,,,,303,,,,,,,,,,,,177,,,,,,,,,,,,,,,,,,',
',177,177,,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177',
'177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177',
'306,,,,306,306,,,,,,,,,177,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,306,306,,306',
'306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306',
'306,306,306,306,306,306,306,306,306,306,306,306,306,306,180,,,,180,',
',,,,,,,,306,,,,,,,,,,,,180,,,,,,,,,,,,,,,,,,,,180,180,,180,180,180,180',
'180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180',
'180,180,180,180,180,180,180,180,180,180,180,178,,,178,178,,,,,,,,,,180',
',,,,,,,,,,,178,,,,,,,,,,,,,,,,,,,,178,178,,178,178,178,178,178,178,178',
'178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178',
'178,178,178,178,178,178,178,178,309,,,,309,,,,,,,,,,178,,,,,,,,,,,,309',
',,,,,,,,,,,,,,,,,,,309,309,,309,309,309,309,309,309,309,309,309,309',
'309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309',
'309,309,309,309,309,133,,,,133,,,,,,,,,,309,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,133,133,,133,133,133,133,133,133,133,133,133,133,133,133,133',
'133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133',
'133,133,,,,124,,,133,124,,124,124,124,124,124,133,,124,,124,124,,124',
'124,124,124,124,,124,124,,124,124,124,124,124,124,124,124,124,124,124',
'124,,,124,124,124,124,124,,,,124,124,257,257,,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,124,,,228,124,,124,228,124,228,228',
'228,228,228,257,,228,,228,228,,228,228,228,228,228,,228,228,,228,228',
'228,228,228,228,228,228,228,228,228,228,,,228,228,228,228,228,,,,228',
'228,256,256,,256,256,256,256,256,256,256,256,256,256,256,256,256,256',
'256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256',
'256,228,,,0,228,,228,0,228,0,0,0,0,0,256,,0,,0,0,,0,0,0,0,0,,0,0,0,0',
'0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,0,0,,,,0,0,,191,191,,191,191,191,191',
'191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191',
'191,191,191,191,191,191,191,191,191,,0,72,0,0,0,72,0,72,72,72,72,72',
',,72,191,72,72,,72,72,72,72,72,,72,72,,72,72,72,72,72,72,72,72,72,72',
'72,72,,,72,72,72,72,72,,,,72,72,,192,192,,192,192,192,192,192,192,192',
'192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192',
'192,192,192,192,192,,,72,73,,,72,73,72,73,73,73,73,73,,,73,192,73,73',
',73,73,73,73,73,,73,73,,73,73,73,73,73,73,73,73,73,73,73,73,,,73,73',
'73,73,73,,,,73,73,,193,193,,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,,,,,,,,,,,,,,,,,73,74,,,73,74,73,74,74,74,74,74',
',,74,193,74,74,,74,74,74,74,74,,74,74,,74,74,74,74,74,74,74,74,74,74',
'74,74,,,74,74,74,74,74,,,,74,74,,224,224,,224,224,224,224,224,224,224',
'224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224',
'224,224,224,,,,,74,77,,,74,77,74,77,77,77,77,77,,,77,224,77,77,,77,77',
'77,77,77,,77,77,,77,77,77,77,77,77,77,77,77,77,77,77,,,77,77,77,77,77',
',,,77,77,,195,195,,195,195,195,195,195,195,195,195,195,195,195,195,195',
'195,195,,,,,,,,,,,,,,,,,77,70,,,77,70,77,70,70,70,70,70,,,70,195,70',
'70,,70,70,70,70,70,,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,,,70',
'70,70,70,70,,,,70,70,,197,197,,197,197,197,197,197,197,197,197,197,197',
'197,197,197,197,197,,,,,,,,,,,,,,,,,70,336,70,70,70,336,70,336,336,336',
'336,336,,,336,197,336,336,,336,336,336,336,336,,336,336,,336,336,336',
'336,336,336,336,336,336,336,336,336,,,336,336,336,336,336,,,,336,336',
',198,198,,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198',
',,,,,,,,,,,,,,,,336,351,,,336,351,336,351,351,351,351,351,,,351,198',
'351,351,,351,351,351,351,351,,351,351,,351,351,351,351,351,351,351,351',
'351,351,351,351,,,351,351,351,351,351,,,,351,351,,199,199,,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,199,,,,,,,,,,,,,,,,,351',
'352,,,351,352,351,352,352,352,352,352,,,352,199,352,352,,352,352,352',
'352,352,,352,352,352,352,352,352,352,352,352,352,352,352,352,352,352',
',,352,352,352,352,352,,,,352,352,,200,200,,200,200,200,200,200,200,200',
'200,200,200,200,200,200,200,200,,,,,,,,,,,,,,,,,352,59,352,352,352,59',
'352,59,59,59,59,59,,,59,200,59,59,,59,59,59,59,59,,59,59,,59,59,59,59',
'59,59,59,59,59,59,59,59,,,59,59,59,59,59,,,,59,59,,201,201,,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,,,,,,,,,,,,,,,,',
'59,58,,,59,58,59,58,58,58,58,58,,,58,201,58,58,,58,58,58,58,58,,58,58',
',58,58,58,58,58,58,58,58,58,58,58,58,,,58,58,58,58,58,,,,58,58,,202',
'202,,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,,,',
',,,,,,,,,,,,,58,85,,,58,85,58,85,85,85,85,85,,,85,202,85,85,,85,85,85',
'85,85,,85,85,,85,85,85,85,85,85,85,85,85,85,85,85,85,,85,85,85,85,85',
',,,85,85,,203,203,,203,203,203,203,203,203,203,203,203,203,203,203,203',
'203,203,,,,,,,,,,,,,,,,,85,86,,,85,86,85,86,86,86,86,86,,,86,203,86',
'86,,86,86,86,86,86,,86,86,,86,86,86,86,86,86,86,86,86,86,86,86,,,86',
'86,86,86,86,,,,86,86,,204,204,,204,204,204,204,204,204,204,204,204,204',
'204,204,204,204,204,,,,,,,,,,,,,,,,,86,87,,,86,87,86,87,87,87,87,87',
',,87,204,87,87,,87,87,87,87,87,,87,87,,87,87,87,87,87,87,87,87,87,87',
'87,87,,,87,87,87,87,87,,,,87,87,,205,205,,205,205,205,205,205,205,205',
'205,205,205,205,205,205,205,205,,,,,,,,,,,,,,,,,87,88,,,87,88,87,88',
'88,88,88,88,,,88,205,88,88,,88,88,88,88,88,,88,88,,88,88,88,88,88,88',
'88,88,88,88,88,88,,,88,88,88,88,88,,,,88,88,,223,223,,223,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223',
'223,223,223,223,223,223,,,,,88,89,,,88,89,88,89,89,89,89,89,,,89,223',
'89,89,,89,89,89,89,89,,89,89,,89,89,89,89,89,89,89,89,89,89,89,89,,',
'89,89,89,89,89,,,,89,89,,194,194,,194,194,194,194,194,194,194,194,194',
'194,194,194,194,194,194,,,,,,,,,,,,,,,,,89,90,,,89,90,89,90,90,90,90',
'90,,,90,194,90,90,,90,90,90,90,90,,90,90,,90,90,90,90,90,90,90,90,90',
'90,90,90,,,90,90,90,90,90,,,,90,90,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,90,91,,,90,91,90,91,91,91,91,91,,,91,,91,91,,91,91,91,91,91,,91,91',
',91,91,91,91,91,91,91,91,91,91,91,91,,,91,91,91,91,91,,,,91,91,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,91,92,,,91,92,91,92,92,92,92,92,,,92,',
'92,92,,92,92,92,92,92,,92,92,,92,92,92,92,92,92,92,92,92,92,92,92,,',
'92,92,92,92,92,,,,92,92,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,92,93,,,92',
'93,92,93,93,93,93,93,,,93,,93,93,,93,93,93,93,93,,93,93,,93,93,93,93',
'93,93,93,93,93,93,93,93,,,93,93,93,93,93,,,,93,93,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,93,94,,,93,94,93,94,94,94,94,94,,,94,,94,94,,94,94',
'94,94,94,,94,94,,94,94,94,94,94,94,94,94,94,94,94,94,,,94,94,94,94,94',
',,,94,94,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,94,95,,,94,95,94,95,95,95',
'95,95,,,95,,95,95,,95,95,95,95,95,,95,95,,95,95,95,95,95,95,95,95,95',
'95,95,95,,,95,95,95,95,95,,,,95,95,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,95,96,,,95,96,95,96,96,96,96,96,,,96,,96,96,,96,96,96,96,96,,96,96',
',96,96,96,96,96,96,96,96,96,96,96,96,,,96,96,96,96,96,,,,96,96,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,96,97,,,96,97,96,97,97,97,97,97,,,97,',
'97,97,,97,97,97,97,97,,97,97,,97,97,97,97,97,97,97,97,97,97,97,97,,',
'97,97,97,97,97,,,,97,97,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,97,98,,,97',
'98,97,98,98,98,98,98,,,98,,98,98,,98,98,98,98,98,,98,98,,98,98,98,98',
'98,98,98,98,98,98,98,98,,,98,98,98,98,98,,,,98,98,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,98,99,,,98,99,98,99,99,99,99,99,,,99,,99,99,,99,99',
'99,99,99,,99,99,,99,99,99,99,99,99,99,99,99,99,99,99,,,99,99,99,99,99',
',,,99,99,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,99,100,,,99,100,99,100,100',
'100,100,100,,,100,,100,100,,100,100,100,100,100,,100,100,,100,100,100',
'100,100,100,100,100,100,100,100,100,,,100,100,100,100,100,,,,100,100',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,100,101,,,100,101,100,101,101,101',
'101,101,,,101,,101,101,,101,101,101,101,101,,101,101,,101,101,101,101',
'101,101,101,101,101,101,101,101,,,101,101,101,101,101,,,,101,101,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,101,102,,,101,102,101,102,102,102,102',
'102,,,102,,102,102,,102,102,102,102,102,,102,102,,102,102,102,102,102',
'102,102,102,102,102,102,102,,,102,102,102,102,102,,,,102,102,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,102,103,,,102,103,102,103,103,103,103,103',
',,103,,103,103,,103,103,103,103,103,,103,103,,103,103,103,103,103,103',
'103,103,103,103,103,103,,,103,103,103,103,103,,,,103,103,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,103,104,,,103,104,103,104,104,104,104,104,,',
'104,,104,104,,104,104,104,104,104,,104,104,,104,104,104,104,104,104',
'104,104,104,104,104,104,,,104,104,104,104,104,,,,104,104,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,104,105,,,104,105,104,105,105,105,105,105,,',
'105,,105,105,,105,105,105,105,105,,105,105,,105,105,105,105,105,105',
'105,105,105,105,105,105,,,105,105,105,105,105,,,,105,105,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,105,106,,,105,106,105,106,106,106,106,106,,',
'106,,106,106,,106,106,106,106,106,,106,106,,106,106,106,106,106,106',
'106,106,106,106,106,106,,,106,106,106,106,106,,,,106,106,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,106,107,,,106,107,106,107,107,107,107,107,,',
'107,,107,107,,107,107,107,107,107,,107,107,,107,107,107,107,107,107',
'107,107,107,107,107,107,,,107,107,107,107,107,,,,107,107,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,107,108,,,107,108,107,108,108,108,108,108,,',
'108,,108,108,,108,108,108,108,108,,108,108,,108,108,108,108,108,108',
'108,108,108,108,108,108,,,108,108,108,108,108,,,,108,108,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,108,109,,,108,109,108,109,109,109,109,109,,',
'109,,109,109,,109,109,109,109,109,,109,109,,109,109,109,109,109,109',
'109,109,109,109,109,109,,,109,109,109,109,109,,,,109,109,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,109,110,,,109,110,109,110,110,110,110,110,,',
'110,,110,110,,110,110,110,110,110,,110,110,,110,110,110,110,110,110',
'110,110,110,110,110,110,,,110,110,110,110,110,,,,110,110,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,110,111,,,110,111,110,111,111,111,111,111,,',
'111,,111,111,,111,111,111,111,111,,111,111,,111,111,111,111,111,111',
'111,111,111,111,111,111,,,111,111,111,111,111,,,,111,111,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,111,112,,,111,112,111,112,112,112,112,112,,',
'112,,112,112,,112,112,112,112,112,,112,112,,112,112,112,112,112,112',
'112,112,112,112,112,112,,,112,112,112,112,112,,,,112,112,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,112,113,,,112,113,112,113,113,113,113,113,,',
'113,,113,113,,113,113,113,113,113,,113,113,,113,113,113,113,113,113',
'113,113,113,113,113,113,,,113,113,113,113,113,,,,113,113,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,113,114,,,113,114,113,114,114,114,114,114,,',
'114,,114,114,,114,114,114,114,114,,114,114,,114,114,114,114,114,114',
'114,114,114,114,114,114,,,114,114,114,114,114,,,,114,114,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,114,115,,,114,115,114,115,115,115,115,115,,',
'115,,115,115,,115,115,115,115,115,,115,115,,115,115,115,115,115,115',
'115,115,115,115,115,115,,,115,115,115,115,115,,,,115,115,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,115,116,,,115,116,115,116,116,116,116,116,,',
'116,,116,116,,116,116,116,116,116,,116,116,,116,116,116,116,116,116',
'116,116,116,116,116,116,,,116,116,116,116,116,,,,116,116,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,116,117,,,116,117,116,117,117,117,117,117,,',
'117,,117,117,,117,117,117,117,117,,117,117,,117,117,117,117,117,117',
'117,117,117,117,117,117,,,117,117,117,117,117,,,,117,117,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,117,118,,,117,118,117,118,118,118,118,118,,',
'118,,118,118,,118,118,118,118,118,,118,118,,118,118,118,118,118,118',
'118,118,118,118,118,118,,,118,118,118,118,118,,,,118,118,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,118,119,,,118,119,118,119,119,119,119,119,,',
'119,,119,119,,119,119,119,119,119,,119,119,,119,119,119,119,119,119',
'119,119,119,119,119,119,,,119,119,119,119,119,,,,119,119,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,119,120,,,119,120,119,120,120,120,120,120,,',
'120,,120,120,,120,120,120,120,120,,120,120,,120,120,120,120,120,120',
'120,120,120,120,120,120,,,120,120,120,120,120,,,,120,120,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,120,121,,,120,121,120,121,121,121,121,121,,',
'121,,121,121,,121,121,121,121,121,,121,121,,121,121,121,121,121,121',
'121,121,121,121,121,121,,,121,121,121,121,121,,,,121,121,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,121,122,,,121,122,121,122,122,122,122,122,,',
'122,,122,122,,122,122,122,122,122,,122,122,,122,122,122,122,122,122',
'122,122,122,122,122,122,,,122,122,122,122,122,,,,122,122,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,122,57,,,122,57,122,57,57,57,57,57,,,57,,57',
'57,,57,57,57,57,57,,57,57,,57,57,57,57,57,57,57,57,57,57,57,57,,,57',
'57,57,57,57,,,,57,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,55,,,57,55',
'57,55,55,55,55,55,,,55,,55,55,,55,55,55,55,55,,55,55,,55,55,55,55,55',
'55,55,55,55,55,55,55,55,,55,55,55,55,55,,,,55,55,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,55,156,,,55,156,55,156,156,156,156,156,,,156,,156,156',
',156,156,156,156,156,,156,156,,156,156,156,156,156,156,156,156,156,156',
'156,156,156,,156,156,156,156,156,,,,156,156,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,156,126,,,156,126,156,126,126,126,126,126,,,126,,126,126',
',126,126,126,126,126,,126,126,,126,126,126,126,126,126,126,126,126,126',
'126,126,126,,126,126,126,126,126,,,,126,126,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,126,295,,,126,295,126,295,295,295,295,295,,,295,,295,295',
',295,295,295,295,295,,295,295,,295,295,295,295,295,295,295,295,295,295',
'295,295,295,,295,295,295,295,295,,,,295,295,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,295,231,,,295,231,295,231,231,231,231,231,,,231,,231,231',
',231,231,231,231,231,,231,231,,231,231,231,231,231,231,231,231,231,231',
'231,231,231,,231,231,231,231,231,,,,231,231,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,231,184,,,231,184,231,184,184,184,184,184,,,184,,184,184',
',184,184,184,184,184,,184,184,184,184,184,184,184,184,184,184,184,184',
'184,184,184,184,,184,184,184,184,184,,,,184,184,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,184,170,184,184,184,170,184,170,170,170,170,170,,,170',
',170,170,,170,170,170,170,170,,170,170,,170,170,170,170,170,170,170',
'170,170,170,170,170,,,170,170,170,170,170,,,,170,170,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,170,50,,,170,50,170,50,50,50,50,50,,,50,,50,50,',
'50,50,50,50,50,,50,50,,50,50,50,50,50,50,50,50,50,50,50,50,50,,50,50',
'50,50,50,,,,50,50,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,50,282,,,50,282',
'50,282,282,282,282,282,,,282,,282,282,,282,282,282,282,282,,282,282',
',282,282,282,282,282,282,282,282,282,282,282,282,282,,282,282,282,282',
'282,,,,282,282,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,282,30,,,282,30,282',
'30,30,30,30,30,,,30,,30,30,,30,30,30,30,30,,30,30,,30,30,30,30,30,30',
'30,30,30,30,30,30,,,30,30,30,30,30,,,,30,30,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,30,278,,,30,278,30,278,278,278,278,278,,,278,,278,278,,278',
'278,278,278,278,,278,278,,278,278,278,278,278,278,278,278,278,278,278',
'278,,,278,278,278,278,278,,,,278,278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,278,169,,,278,169,278,169,169,169,169,169,,,169,,169,169,,169,169',
'169,169,169,,169,169,,169,169,169,169,169,169,169,169,169,169,169,169',
',,169,169,169,169,169,,,,169,169,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'169,365,,,169,365,169,365,365,365,365,365,,,365,,365,365,,365,365,365',
'365,365,,365,365,365,365,365,365,365,365,365,365,365,365,365,365,365',
',,365,365,365,365,365,,,,365,365,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'365,270,365,365,365,270,365,270,270,270,270,270,,,270,,270,270,,270',
'270,270,270,270,,270,270,,270,270,270,270,270,270,270,270,270,270,270',
'270,,,270,270,270,270,270,,,,270,270,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,270,269,,,270,269,270,269,269,269,269,269,,,269,,269,269,,269,269',
'269,269,269,,269,269,,269,269,269,269,269,269,269,269,269,269,269,269',
',,269,269,269,269,269,,,,269,269,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'269,266,,,269,266,269,266,266,266,266,266,,,266,,266,266,,266,266,266',
'266,266,,266,266,,266,266,266,266,266,266,266,266,266,266,266,266,,',
'266,266,266,266,266,,,,266,266,255,255,,255,255,255,255,255,255,255',
'255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255',
'255,255,255,255,255,255,255,255,266,,,263,266,,266,263,263,263,263,263',
'263,263,255,,263,,263,263,,263,263,263,263,263,,263,263,263,263,263',
'263,263,263,263,263,263,263,263,263,263,,,263,263,263,263,263,,,,263',
'263,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,263,262,263,263,263,262,263,262',
'262,262,262,262,,,262,,262,262,,262,262,262,262,262,,262,262,,262,262',
'262,262,262,262,262,262,262,262,262,262,,,262,262,262,262,262,,,,262',
'262,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,262,168,,,262,168,262,168,168',
'168,168,168,,,168,,168,168,,168,168,168,168,168,,168,168,,168,168,168',
'168,168,168,168,168,168,168,168,168,,,168,168,168,168,168,,,,168,168',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,168,167,,,168,167,168,167,167,167',
'167,167,,,167,,167,167,,167,167,167,167,167,,167,167,,167,167,167,167',
'167,167,167,167,167,167,167,167,,,167,167,167,167,167,,,,167,167,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,167,244,,,167,244,167,244,244,244,244',
'244,,,244,,244,244,,244,244,244,244,244,,244,244,,244,244,244,244,244',
'244,244,244,244,244,244,244,244,,244,244,244,244,244,,,,244,244,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,244,248,,,244,248,244,248,248,248,248',
'248,,,248,,248,248,,248,248,248,248,248,,248,248,,248,248,248,248,248',
'248,248,248,248,248,248,248,248,,248,248,248,248,248,,,,248,248,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,248,369,,,248,369,248,369,369,369,369',
'369,,,369,,369,369,,369,369,369,369,369,,369,369,369,369,369,369,369',
'369,369,369,369,369,369,369,369,,,369,369,369,369,369,,,,369,369,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,369,253,369,369,369,253,369,253,253',
'253,253,253,,,253,,253,253,,253,253,253,253,253,,253,253,,253,253,253',
'253,253,253,253,253,253,253,253,253,,,253,253,253,253,253,,,,253,253',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,253,188,,,253,188,253,188,188,188',
'188,188,,,188,,188,188,,188,188,188,188,188,,188,188,,188,188,188,188',
'188,188,188,188,188,188,188,188,188,,188,188,188,188,188,,,,188,188',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,188,155,,,188,155,188,155,155,155',
'155,155,,,155,,155,155,,155,155,155,155,155,,155,155,,155,155,155,155',
'155,155,155,155,155,155,155,155,155,,155,155,155,155,155,,,,155,155',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,155,240,,,155,240,155,240,240,240',
'240,240,,,240,,240,240,,240,240,240,240,240,,240,240,,240,240,240,240',
'240,240,240,240,240,240,240,240,,,240,240,240,240,240,,,,240,240,254',
'254,,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254',
'254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,240',
',,,240,240,240,,,,,,298,298,254,298,298,298,298,298,298,298,298,298',
'298,298,298,298,298,298,298,298,298,298,298,298,298,298,298,298,298',
'298,298,298,298,298,298,,,,,,,,,,,,,226,226,298,226,226,226,226,226',
'226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226',
'226,226,226,226,226,226,226,226,226,226,,,,,,,,,,,,,225,225,226,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,,,,,,,,,,,,',
',,225' ]
        racc_action_check = arr = ::Array.new(9062, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  2204,   513,     6,   241,   nil,   nil,   nil,   419,   nil,   178,
   246,   nil,   nil,   168,   154,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  7337,   nil,   nil,   nil,   nil,   nil,   nil,   189,   273,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   140,   nil,   nil,   nil,
  7163,   nil,   152,    70,    -1,  6554,   nil,  6467,  3074,  2987,
    -8,   nil,   256,   456,   370,   -20,   387,   nil,   nil,   nil,
  2639,   nil,  2291,  2378,  2465,   nil,   nil,  2552,    71,   397,
   383,   -12,   335,   nil,   422,  3161,  3248,  3335,  3422,  3509,
  3596,  3683,  3770,  3857,  3944,  4031,  4118,  4205,  4292,  4379,
  4466,  4553,  4640,  4727,  4814,  4901,  4988,  5075,  5162,  5249,
  5336,  5423,  5510,  5597,  5684,  5771,  5858,  5945,  6032,  6119,
  6206,  6293,  6380,   329,  2026,   325,  6728,   365,   nil,   313,
   245,    -2,   nil,  1942,   199,   226,   218,   nil,    98,   484,
   nil,   nil,   -77,   nil,   -56,    25,    90,    84,   309,   -47,
    82,   378,   177,   335,   -11,  8731,  6641,   344,   403,   338,
   228,   158,    81,   404,   102,   nil,   nil,  8209,  8122,  7511,
  7076,   nil,   nil,   nil,     0,  1294,   nil,  1537,  1780,  1375,
  1699,   479,   482,     4,  6989,   -25,   179,   414,  8644,   nil,
   160,  2210,  2297,  2384,  3515,  2558,    79,  2645,  2732,  2819,
  2906,  2993,  3080,  3167,  3254,  3341,   230,   309,   315,   152,
   390,   396,   471,   477,   552,   558,   633,   639,   236,   238,
   413,   -73,   714,  3428,  2471,  8964,  8917,   565,  2115,   808,
   412,  6902,   264,   nil,   410,   458,   nil,   nil,   nil,   nil,
  8818,   nil,    73,    85,  8296,   365,   nil,   342,  8383,   345,
   247,   322,   256,  8557,  8823,  7864,  2120,  2031,   262,   217,
   157,   119,  8035,  7948,   nil,   111,  7859,    41,   365,  7772,
  7685,   nil,     8,   141,    15,   173,   161,   261,  7424,   727,
   187,   nil,  7250,   nil,  1132,   nil,   nil,  1213,   nil,   nil,
   nil,   260,   264,   328,   257,  6815,   nil,   nil,  8870,   390,
   -12,   nil,   nil,  1456,    -2,   nil,  1618,   nil,   nil,  1861,
  1051,   nil,   398,   222,   nil,   400,   nil,   401,   nil,   646,
   nil,   nil,    -2,   nil,   nil,   nil,   340,   -73,   427,   327,
   347,   nil,   nil,   nil,   189,   412,  2726,   nil,   443,   446,
   481,   nil,   461,   nil,   484,   400,   nil,   453,   -14,   455,
   nil,  2813,  2900,   970,   nil,   nil,   nil,   nil,   nil,   473,
   413,   nil,   475,   889,     8,  7598,   500,   467,   502,  8470,
     0,   nil,   484,   nil,    10,   507,   nil ]

racc_action_default = [
    -1,  -204,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,
   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -31,
   -91,   -33,   -34,   -35,   -36,   -37,   -38,   -39,   -40,   -41,
   -42,   -43,   -44,   -45,   -46,   -47,  -204,   -49,   -50,   -51,
   -54,   -57,   -60,  -204,   -91,   -92,   -90,   -91,   -91,   -91,
   -91,  -133,  -204,  -204,   -91,   -91,   -91,  -155,  -156,  -157,
   -91,  -167,   -91,   -91,   -91,  -176,  -177,   -91,  -204,  -204,
  -204,   -91,  -202,  -203,  -204,    -5,   -91,   -91,   -91,   -91,
   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,
   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,
   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,
   -91,   -91,   -91,   -70,   -91,   -69,   -92,   -67,   -79,   -66,
   -68,  -204,  -147,  -204,   -64,   -65,  -204,   -48,  -204,   -55,
   -39,   -40,  -204,   -61,  -204,  -204,  -142,  -144,   -91,  -204,
  -204,  -204,  -204,  -204,  -204,   -92,   -92,   -89,   -93,  -129,
  -130,  -131,  -138,  -141,  -139,  -132,  -140,   -91,   -91,   -91,
   -91,  -143,  -145,  -146,  -204,  -165,  -166,  -204,  -204,  -204,
  -204,  -204,  -204,  -184,  -190,  -204,  -204,  -200,   -92,   377,
    -4,   -95,   -96,   -97,   -98,   -99,  -100,  -101,  -102,  -103,
  -104,  -105,  -106,  -107,  -108,  -109,  -110,  -111,  -112,  -113,
  -114,  -115,  -116,  -117,  -118,  -119,  -120,  -121,  -122,  -123,
  -124,  -125,  -126,  -127,  -128,  -170,  -173,  -204,   -91,  -204,
  -204,   -78,  -204,   -80,  -142,  -144,   -32,   -82,   -81,   -52,
   -91,   -58,  -204,  -204,   -92,   -91,  -150,  -204,   -92,  -204,
  -204,   -93,  -204,   -91,  -134,  -135,  -136,  -137,  -159,  -158,
  -161,  -204,   -91,   -91,  -191,  -204,   -91,  -204,  -204,   -91,
   -91,  -181,  -204,  -204,  -189,  -204,  -204,  -204,   -91,  -204,
  -204,   -71,   -76,   -72,   -77,   -84,   -53,   -56,   -59,   -62,
   -63,  -204,  -204,  -204,  -204,   -92,   -86,   -88,   -94,  -204,
  -162,  -160,  -168,  -204,  -189,  -171,  -204,  -175,  -178,  -204,
  -204,  -182,  -204,  -204,  -185,  -204,  -198,  -204,  -201,  -174,
   -73,   -74,   -75,   -83,  -148,  -149,   -87,  -204,  -204,  -204,
  -204,  -163,  -169,  -192,  -193,  -204,   -91,  -172,  -204,  -204,
  -204,  -187,  -204,  -186,  -204,   -85,  -151,  -161,  -204,  -161,
  -194,   -91,   -91,  -204,  -179,  -180,  -183,  -188,  -199,  -204,
  -204,  -164,  -204,  -204,  -195,   -91,  -204,  -161,  -204,   -91,
  -196,  -152,  -204,  -153,  -197,  -204,  -154 ]

racc_goto_table = [
    85,     2,   132,   140,     3,   144,   129,   131,   141,   315,
   149,   166,   143,   152,   333,     1,   149,   235,   165,   164,
   123,   261,   265,   142,   329,   138,   130,   230,   145,   182,
   272,   137,   334,   nil,   133,   nil,   nil,   149,   nil,   nil,
   186,   nil,   150,   299,   350,   183,   nil,   154,   162,   342,
   nil,   134,   172,   173,   139,   nil,   157,   131,   131,   174,
   259,   159,   160,   161,   nil,   nil,   nil,   nil,   176,   150,
   nil,   nil,   nil,   nil,   175,   nil,   177,   178,   179,   nil,
   nil,   180,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   190,
   191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
   201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   232,   229,   249,
   359,   280,   362,   nil,   151,   nil,   247,   nil,   153,   nil,
   163,   131,   nil,   129,   153,   267,   268,   nil,   nil,   260,
   372,   275,   nil,   nil,   nil,   129,   250,   252,   nil,   nil,
   251,   151,   134,   130,   nil,   187,   123,   nil,   nil,   nil,
   nil,   254,   255,   256,   257,   130,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   274,   nil,   nil,     3,   277,
   nil,   nil,   nil,   140,   140,   144,   290,   nil,   141,   141,
   123,   nil,   289,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   279,   292,   nil,   284,   nil,   nil,   131,   314,
   nil,   nil,   nil,   nil,   287,   291,   nil,   nil,   nil,   294,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   298,   nil,   nil,
   nil,   nil,   nil,   nil,   304,   328,   303,     3,   nil,   nil,
   306,   nil,    85,   309,   310,   338,   339,   nil,   340,   341,
   nil,   343,   319,   344,   nil,   nil,   322,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   327,   nil,   nil,   nil,
   nil,   nil,    85,   nil,   nil,   nil,   nil,   nil,   357,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   366,   nil,   nil,   368,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   375,   nil,
   353,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   364,   nil,   363,     3,   nil,   nil,   nil,
   nil,   nil,    85,   nil,   nil,   nil,   370,   nil,    85,     3,
   374,   nil,    85,     3 ]

racc_goto_check = [
     4,     2,    13,    33,     3,    15,    43,    45,    34,    32,
    34,    33,    40,     9,    57,     1,    34,    50,    48,     9,
    41,    55,    55,    39,    54,    37,    41,    44,    46,    33,
    56,    31,    58,   nil,     3,   nil,   nil,    34,   nil,   nil,
     9,   nil,    13,    52,    57,    53,   nil,    45,    13,    32,
   nil,    41,    13,    13,     3,   nil,    47,    45,    45,    45,
    50,     3,     3,     3,   nil,   nil,   nil,   nil,     4,    13,
   nil,   nil,   nil,   nil,     3,   nil,     3,     3,     3,   nil,
   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,    47,     3,    46,
    52,    44,    52,   nil,    10,   nil,    13,   nil,     7,   nil,
    10,    45,   nil,    43,     7,    53,    53,   nil,   nil,    46,
    52,    53,   nil,   nil,   nil,    43,    47,    47,   nil,   nil,
     3,    10,    41,    41,   nil,     7,    41,   nil,   nil,   nil,
   nil,     3,     3,     3,     3,    41,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,     3,    47,
   nil,   nil,   nil,    33,    33,    15,    15,   nil,    34,    34,
    41,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     3,    13,   nil,     3,   nil,   nil,    45,    53,
   nil,   nil,   nil,   nil,     3,    47,   nil,   nil,   nil,    47,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,
   nil,   nil,   nil,   nil,     2,    53,     3,     3,   nil,   nil,
     3,   nil,     4,     3,     3,    53,    53,   nil,    53,    53,
   nil,    53,     3,    53,   nil,   nil,     3,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,
   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,    53,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    53,   nil,   nil,    53,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    53,   nil,
     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,     3,     3,   nil,   nil,   nil,
   nil,   nil,     4,   nil,   nil,   nil,     2,   nil,     4,     3,
     2,   nil,     4,     3 ]

racc_goto_pointer = [
   nil,    15,     1,     4,    -2,   nil,   nil,    84,   nil,   -41,
    80,   nil,   nil,   -12,   nil,   -47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -15,  -264,   -49,   -44,   nil,   nil,   -25,   nil,   -29,
   -40,    13,   nil,    -7,   -97,    -7,   -25,     1,   -42,   nil,
  -114,   nil,  -217,   -34,  -276,  -156,  -153,  -290,  -272 ]

racc_goto_default = [
   nil,   nil,   nil,   158,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    34,    35,    36,    37,    38,    39,    49,   nil,    51,   nil,
   nil,   125,   135,   127,   nil,    53,   nil,   nil,    61,    62,
   147,    66,   nil,   264,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 99, :_reduce_1,
  1, 99, :_reduce_2,
  1, 100, :_reduce_3,
  3, 100, :_reduce_4,
  2, 100, :_reduce_5,
  1, 100, :_reduce_6,
  1, 101, :_reduce_7,
  1, 101, :_reduce_8,
  1, 101, :_reduce_9,
  1, 101, :_reduce_10,
  1, 101, :_reduce_11,
  1, 101, :_reduce_12,
  1, 101, :_reduce_13,
  1, 101, :_reduce_14,
  1, 101, :_reduce_15,
  1, 101, :_reduce_16,
  1, 101, :_reduce_17,
  1, 101, :_reduce_18,
  1, 101, :_reduce_19,
  1, 101, :_reduce_20,
  1, 101, :_reduce_21,
  1, 101, :_reduce_22,
  1, 101, :_reduce_23,
  1, 101, :_reduce_24,
  1, 101, :_reduce_25,
  1, 101, :_reduce_26,
  1, 101, :_reduce_27,
  1, 101, :_reduce_28,
  1, 101, :_reduce_29,
  1, 101, :_reduce_30,
  1, 101, :_reduce_31,
  3, 101, :_reduce_32,
  1, 102, :_reduce_33,
  1, 102, :_reduce_34,
  1, 102, :_reduce_35,
  1, 113, :_reduce_36,
  1, 113, :_reduce_37,
  1, 113, :_reduce_38,
  1, 113, :_reduce_39,
  1, 113, :_reduce_40,
  1, 113, :_reduce_41,
  1, 113, :_reduce_42,
  1, 113, :_reduce_43,
  1, 113, :_reduce_44,
  1, 128, :_reduce_45,
  1, 129, :_reduce_46,
  1, 129, :_reduce_47,
  2, 115, :_reduce_48,
  1, 130, :_reduce_49,
  1, 133, :_reduce_50,
  1, 131, :_reduce_51,
  3, 134, :_reduce_52,
  4, 134, :_reduce_53,
  0, 135, :_reduce_54,
  1, 135, :_reduce_55,
  3, 135, :_reduce_56,
  1, 132, :_reduce_57,
  3, 136, :_reduce_58,
  4, 136, :_reduce_59,
  0, 137, :_reduce_60,
  1, 137, :_reduce_61,
  3, 137, :_reduce_62,
  3, 138, :_reduce_63,
  2, 107, :_reduce_64,
  2, 107, :_reduce_65,
  2, 107, :_reduce_66,
  2, 107, :_reduce_67,
  2, 108, :_reduce_68,
  2, 108, :_reduce_69,
  2, 108, :_reduce_70,
  3, 139, :_reduce_71,
  3, 139, :_reduce_72,
  4, 139, :_reduce_73,
  4, 139, :_reduce_74,
  3, 142, :_reduce_75,
  2, 142, :_reduce_76,
  2, 142, :_reduce_77,
  1, 142, :_reduce_78,
  1, 141, :_reduce_79,
  2, 141, :_reduce_80,
  2, 140, :_reduce_81,
  2, 140, :_reduce_82,
  5, 105, :_reduce_83,
  4, 105, :_reduce_84,
  6, 105, :_reduce_85,
  4, 105, :_reduce_86,
  5, 105, :_reduce_87,
  4, 105, :_reduce_88,
  2, 105, :_reduce_89,
  1, 143, :_reduce_90,
  0, 143, :_reduce_91,
  0, 145, :_reduce_92,
  1, 145, :_reduce_93,
  3, 145, :_reduce_94,
  3, 103, :_reduce_95,
  3, 103, :_reduce_96,
  3, 103, :_reduce_97,
  3, 103, :_reduce_98,
  3, 103, :_reduce_99,
  3, 103, :_reduce_100,
  3, 103, :_reduce_101,
  3, 103, :_reduce_102,
  3, 103, :_reduce_103,
  3, 103, :_reduce_104,
  3, 103, :_reduce_105,
  3, 103, :_reduce_106,
  3, 103, :_reduce_107,
  3, 103, :_reduce_108,
  3, 103, :_reduce_109,
  3, 103, :_reduce_110,
  3, 103, :_reduce_111,
  3, 103, :_reduce_112,
  3, 103, :_reduce_113,
  3, 103, :_reduce_114,
  3, 103, :_reduce_115,
  3, 103, :_reduce_116,
  3, 103, :_reduce_117,
  3, 103, :_reduce_118,
  3, 103, :_reduce_119,
  3, 103, :_reduce_120,
  3, 103, :_reduce_121,
  3, 103, :_reduce_122,
  3, 103, :_reduce_123,
  3, 103, :_reduce_124,
  3, 103, :_reduce_125,
  3, 103, :_reduce_126,
  3, 103, :_reduce_127,
  3, 103, :_reduce_128,
  2, 104, :_reduce_129,
  2, 104, :_reduce_130,
  2, 104, :_reduce_131,
  2, 106, :_reduce_132,
  1, 106, :_reduce_133,
  3, 146, :_reduce_134,
  3, 146, :_reduce_135,
  3, 146, :_reduce_136,
  3, 146, :_reduce_137,
  1, 147, :_reduce_138,
  1, 147, :_reduce_139,
  1, 147, :_reduce_140,
  1, 147, :_reduce_141,
  2, 111, :_reduce_142,
  2, 111, :_reduce_143,
  2, 111, :_reduce_144,
  2, 112, :_reduce_145,
  2, 112, :_reduce_146,
  2, 112, :_reduce_147,
  4, 148, :_reduce_148,
  4, 148, :_reduce_149,
  2, 148, :_reduce_150,
  6, 109, :_reduce_151,
  9, 109, :_reduce_152,
  9, 109, :_reduce_153,
  11, 109, :_reduce_154,
  1, 149, :_reduce_155,
  1, 149, :_reduce_156,
  1, 149, :_reduce_157,
  1, 144, :_reduce_158,
  1, 144, :_reduce_159,
  1, 150, :_reduce_160,
  0, 150, :_reduce_161,
  0, 152, :_reduce_162,
  1, 152, :_reduce_163,
  3, 152, :_reduce_164,
  2, 110, :_reduce_165,
  2, 110, :_reduce_166,
  1, 127, :_reduce_167,
  4, 116, :_reduce_168,
  5, 116, :_reduce_169,
  3, 116, :_reduce_170,
  4, 117, :_reduce_171,
  5, 117, :_reduce_172,
  3, 117, :_reduce_173,
  5, 118, :_reduce_174,
  4, 119, :_reduce_175,
  1, 126, :_reduce_176,
  1, 126, :_reduce_177,
  4, 120, :_reduce_178,
  6, 121, :_reduce_179,
  6, 121, :_reduce_180,
  3, 122, :_reduce_181,
  4, 122, :_reduce_182,
  6, 122, :_reduce_183,
  0, 154, :_reduce_184,
  2, 154, :_reduce_185,
  3, 154, :_reduce_186,
  3, 154, :_reduce_187,
  4, 154, :_reduce_188,
  2, 151, :_reduce_189,
  1, 151, :_reduce_190,
  1, 153, :_reduce_191,
  3, 153, :_reduce_192,
  3, 153, :_reduce_193,
  4, 153, :_reduce_194,
  3, 155, :_reduce_195,
  4, 156, :_reduce_196,
  5, 156, :_reduce_197,
  4, 123, :_reduce_198,
  6, 123, :_reduce_199,
  2, 124, :_reduce_200,
  4, 125, :_reduce_201,
  1, 125, :_reduce_202,
  1, 114, :_reduce_203 ]

racc_reduce_n = 204

racc_shift_n = 377

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :ELSEIF => 4,
  :THEN => 5,
  :UNLESS => 6,
  :END => 7,
  :WHILE => 8,
  :UNTIL => 9,
  :BREAK => 10,
  :CONTINUE => 11,
  :TRY => 12,
  :CATCH => 13,
  :ENSURE => 14,
  :FOR => 15,
  :IN => 16,
  :DEF => 17,
  :DEF_BANG => 18,
  :SPLAT => 19,
  :CALL => 20,
  :BUILTIN_COMMAND => 21,
  :CLASS => 22,
  :NEW => 23,
  :DEFM => 24,
  :DEFM_BANG => 25,
  :SUPER => 26,
  :RETURN => 27,
  :NEWLINE => 28,
  :NUMBER => 29,
  :STRING_D => 30,
  :STRING_S => 31,
  :HEREDOC => 32,
  :EX_LITERAL => 33,
  :REGEXP => 34,
  :TRUE => 35,
  :FALSE => 36,
  :NIL => 37,
  :LET => 38,
  :UNLET => 39,
  :UNLET_BANG => 40,
  :IDENTIFIER => 41,
  :DICT_VAL => 42,
  :SCOPE_MODIFIER => 43,
  :SCOPE_MODIFIER_LITERAL => 44,
  :SPECIAL_VAR_PREFIX => 45,
  :FINISH => 46,
  "!" => 47,
  "*" => 48,
  "/" => 49,
  "%" => 50,
  "+" => 51,
  "-" => 52,
  "." => 53,
  ">" => 54,
  ">#" => 55,
  ">?" => 56,
  "<" => 57,
  "<#" => 58,
  "<?" => 59,
  ">=" => 60,
  ">=#" => 61,
  ">=?" => 62,
  "<=" => 63,
  "<=#" => 64,
  "<=?" => 65,
  "==" => 66,
  "==?" => 67,
  "==#" => 68,
  "=~" => 69,
  "=~?" => 70,
  "=~#" => 71,
  "!~" => 72,
  "!~?" => 73,
  "!~#" => 74,
  "!=" => 75,
  "!=?" => 76,
  "!=#" => 77,
  :IS => 78,
  :ISNOT => 79,
  "&&" => 80,
  "||" => 81,
  "?" => 82,
  "=" => 83,
  "+=" => 84,
  "-=" => 85,
  ".=" => 86,
  "," => 87,
  "(" => 88,
  ")" => 89,
  ";" => 90,
  "|" => 91,
  "[" => 92,
  "]" => 93,
  "{" => 94,
  "}" => 95,
  ":" => 96,
  "===" => 97 }

racc_nt_base = 98

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "ELSEIF",
  "THEN",
  "UNLESS",
  "END",
  "WHILE",
  "UNTIL",
  "BREAK",
  "CONTINUE",
  "TRY",
  "CATCH",
  "ENSURE",
  "FOR",
  "IN",
  "DEF",
  "DEF_BANG",
  "SPLAT",
  "CALL",
  "BUILTIN_COMMAND",
  "CLASS",
  "NEW",
  "DEFM",
  "DEFM_BANG",
  "SUPER",
  "RETURN",
  "NEWLINE",
  "NUMBER",
  "STRING_D",
  "STRING_S",
  "HEREDOC",
  "EX_LITERAL",
  "REGEXP",
  "TRUE",
  "FALSE",
  "NIL",
  "LET",
  "UNLET",
  "UNLET_BANG",
  "IDENTIFIER",
  "DICT_VAL",
  "SCOPE_MODIFIER",
  "SCOPE_MODIFIER_LITERAL",
  "SPECIAL_VAR_PREFIX",
  "FINISH",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\".\"",
  "\">\"",
  "\">#\"",
  "\">?\"",
  "\"<\"",
  "\"<#\"",
  "\"<?\"",
  "\">=\"",
  "\">=#\"",
  "\">=?\"",
  "\"<=\"",
  "\"<=#\"",
  "\"<=?\"",
  "\"==\"",
  "\"==?\"",
  "\"==#\"",
  "\"=~\"",
  "\"=~?\"",
  "\"=~#\"",
  "\"!~\"",
  "\"!~?\"",
  "\"!~#\"",
  "\"!=\"",
  "\"!=?\"",
  "\"!=#\"",
  "IS",
  "ISNOT",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\"=\"",
  "\"+=\"",
  "\"-=\"",
  "\".=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"|\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\":\"",
  "\"===\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "BinaryOperator",
  "UnaryOperator",
  "Call",
  "Assign",
  "DictGet",
  "ListOrDictGet",
  "Def",
  "Return",
  "VariableRetrieval",
  "UnletVariable",
  "Literal",
  "ExLiteral",
  "Heredoc",
  "If",
  "Unless",
  "Ternary",
  "While",
  "Until",
  "For",
  "Try",
  "ClassDefinition",
  "ObjectInstantiation",
  "Super",
  "LoopKeyword",
  "EndScript",
  "Number",
  "String",
  "Regexp",
  "List",
  "Dictionary",
  "ScopeModifierLiteral",
  "ListLiteral",
  "ListItems",
  "DictionaryLiteral",
  "DictItems",
  "DictItem",
  "ListOrDictGetWithBrackets",
  "DictGetWithDotLiteral",
  "DictGetWithDot",
  "SubList",
  "Scope",
  "DefCallIdentifier",
  "ArgList",
  "AssignExpression",
  "AssignLHS",
  "CurlyBraceName",
  "FunctionType",
  "Keyword",
  "Block",
  "ParamList",
  "IfBlock",
  "Catch",
  "ElseBlock",
  "ElseifBlock" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_3(val, _values, result)
     result = Nodes.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_21(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_26(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 73)
  def _reduce_27(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_28(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_32(val, _values, result)
     result = WrapInParensNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_33(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_34(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_35(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_37(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_38(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_40(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_41(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_42(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_43(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_44(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_45(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_46(val, _values, result)
     result = StringNode.new(val[0], :s) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_47(val, _values, result)
     result = StringNode.new(val[0], :d) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_48(val, _values, result)
     result = HeredocNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_49(val, _values, result)
     result = RegexpNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_50(val, _values, result)
     result = ScopeModifierLiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 122)
  def _reduce_51(val, _values, result)
     result = ListNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 126)
  def _reduce_52(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_53(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_54(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_55(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_56(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_57(val, _values, result)
     result = DictionaryNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_58(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_59(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_60(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_61(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_62(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_63(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_64(val, _values, result)
     result = DictGetBracketNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_65(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 161)
  def _reduce_66(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_67(val, _values, result)
     result = DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_68(val, _values, result)
     result = ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_69(val, _values, result)
     result = ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_70(val, _values, result)
     result = ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_71(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_72(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_73(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_74(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_75(val, _values, result)
     result = Nodes.new([val[0], LiteralNode.new(' : '), val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_76(val, _values, result)
     result = Nodes.new([val[0], LiteralNode.new(' :')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 181)
  def _reduce_77(val, _values, result)
     result = Nodes.new([LiteralNode.new(': '), val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_78(val, _values, result)
     result = Nodes.new([LiteralNode.new(':')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_79(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 187)
  def _reduce_80(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_81(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 192)
  def _reduce_82(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 196)
  def _reduce_83(val, _values, result)
     result = CallNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 197)
  def _reduce_84(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 198)
  def _reduce_85(val, _values, result)
     result = ExplicitCallNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 199)
  def _reduce_86(val, _values, result)
     result = ExplicitCallNode.new(nil, nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 200)
  def _reduce_87(val, _values, result)
     result = ExplicitCallNode.new(nil, val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 201)
  def _reduce_88(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_89(val, _values, result)
     result = CallNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 206)
  def _reduce_90(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 207)
  def _reduce_91(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 211)
  def _reduce_92(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 212)
  def _reduce_93(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_94(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 217)
  def _reduce_95(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_96(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 220)
  def _reduce_97(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 221)
  def _reduce_98(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 222)
  def _reduce_99(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 225)
  def _reduce_100(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 227)
  def _reduce_101(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 228)
  def _reduce_102(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_103(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 231)
  def _reduce_104(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 232)
  def _reduce_105(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_106(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 235)
  def _reduce_107(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_108(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_109(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 239)
  def _reduce_110(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 240)
  def _reduce_111(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 241)
  def _reduce_112(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 243)
  def _reduce_113(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_114(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_115(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 247)
  def _reduce_116(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 248)
  def _reduce_117(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 249)
  def _reduce_118(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 251)
  def _reduce_119(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_120(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 253)
  def _reduce_121(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 255)
  def _reduce_122(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 256)
  def _reduce_123(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_124(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 258)
  def _reduce_125(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 259)
  def _reduce_126(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 261)
  def _reduce_127(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_128(val, _values, result)
     result = BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 266)
  def _reduce_129(val, _values, result)
     result = UnaryOperatorNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 267)
  def _reduce_130(val, _values, result)
     result = UnaryOperatorNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 268)
  def _reduce_131(val, _values, result)
     result = UnaryOperatorNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 273)
  def _reduce_132(val, _values, result)
     result = AssignNode.new(val[1][0], val[1][1], val[1][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_133(val, _values, result)
     result = AssignNode.new(val[0][0], val[0][1], val[0][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 279)
  def _reduce_134(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_135(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_136(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 282)
  def _reduce_137(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 286)
  def _reduce_138(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 287)
  def _reduce_139(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 288)
  def _reduce_140(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 289)
  def _reduce_141(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 294)
  def _reduce_142(val, _values, result)
     result = GetVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 295)
  def _reduce_143(val, _values, result)
     result = GetSpecialVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 296)
  def _reduce_144(val, _values, result)
     result = GetCurlyBraceNameNode.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 300)
  def _reduce_145(val, _values, result)
     result = UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 301)
  def _reduce_146(val, _values, result)
     result = UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 302)
  def _reduce_147(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_148(val, _values, result)
     result = CurlyBraceVariable.new([ CurlyBracePart.new(val[0]), CurlyBracePart.new(val[2]) ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 307)
  def _reduce_149(val, _values, result)
     result = CurlyBraceVariable.new([ CurlyBracePart.new(val[1]), CurlyBracePart.new(val[3]) ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 308)
  def _reduce_150(val, _values, result)
     result = val[0] << CurlyBracePart.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 314)
  def _reduce_151(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], [], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 315)
  def _reduce_152(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], val[4], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_153(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], [val[4]], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 317)
  def _reduce_154(val, _values, result)
     result = Object.const_get(val[0]).new('!', val[1], val[2], val[4] << val[6], val[8], val[9]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 321)
  def _reduce_155(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 322)
  def _reduce_156(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 323)
  def _reduce_157(val, _values, result)
     result = "DefMethodNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_158(val, _values, result)
     result = GetCurlyBraceNameNode.new('', val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 329)
  def _reduce_159(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_160(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_161(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 339)
  def _reduce_162(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 340)
  def _reduce_163(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 341)
  def _reduce_164(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 345)
  def _reduce_165(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 346)
  def _reduce_166(val, _values, result)
     result = ReturnNode.new(nil)    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 350)
  def _reduce_167(val, _values, result)
     result = FinishNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 355)
  def _reduce_168(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 356)
  def _reduce_169(val, _values, result)
     result = IfNode.new(val[1], Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_170(val, _values, result)
     result = IfNode.new(val[2], Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 361)
  def _reduce_171(val, _values, result)
     result = UnlessNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 362)
  def _reduce_172(val, _values, result)
     result = UnlessNode.new(val[1], Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 363)
  def _reduce_173(val, _values, result)
     result = UnlessNode.new(val[2], Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 367)
  def _reduce_174(val, _values, result)
     result = TernaryOperatorNode.new([val[0], val[2], val[4]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 371)
  def _reduce_175(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 375)
  def _reduce_176(val, _values, result)
     result = BreakNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 376)
  def _reduce_177(val, _values, result)
     result = ContinueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 380)
  def _reduce_178(val, _values, result)
     result = UntilNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 384)
  def _reduce_179(val, _values, result)
     result = ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 385)
  def _reduce_180(val, _values, result)
     result = ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 389)
  def _reduce_181(val, _values, result)
     result = TryNode.new(val[1], nil, nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 390)
  def _reduce_182(val, _values, result)
     result = TryNode.new(val[1], val[2], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 391)
  def _reduce_183(val, _values, result)
     result = TryNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 395)
  def _reduce_184(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 396)
  def _reduce_185(val, _values, result)
     result = [ CatchNode.new(nil, val[1]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 397)
  def _reduce_186(val, _values, result)
     result = [ CatchNode.new(val[1], val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 398)
  def _reduce_187(val, _values, result)
     result = val[0] << CatchNode.new(nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 399)
  def _reduce_188(val, _values, result)
     result = val[0] << CatchNode.new(val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 406)
  def _reduce_189(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 407)
  def _reduce_190(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 411)
  def _reduce_191(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 412)
  def _reduce_192(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 413)
  def _reduce_193(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 414)
  def _reduce_194(val, _values, result)
     result = val[1] << val[2] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 418)
  def _reduce_195(val, _values, result)
     result = ElseNode.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 422)
  def _reduce_196(val, _values, result)
     result = Nodes.new([ElseifNode.new(val[1], val[3])]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 423)
  def _reduce_197(val, _values, result)
     result = val[0] << ElseifNode.new(val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 427)
  def _reduce_198(val, _values, result)
     result = ClassDefinitionNode.new(val[1], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 428)
  def _reduce_199(val, _values, result)
     result = ClassDefinitionNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 432)
  def _reduce_200(val, _values, result)
     result = ObjectInstantiationNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 436)
  def _reduce_201(val, _values, result)
     result = SuperNode.new(val[2], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 437)
  def _reduce_202(val, _values, result)
     result = SuperNode.new([], false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 441)
  def _reduce_203(val, _values, result)
     result = ExLiteralNode.new(val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
