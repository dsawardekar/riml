#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require File.expand_path("../ast_rewriter", __FILE__)
  require File.expand_path("../errors", __FILE__)
module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 534)
  # This code will be put as-is in the parser class

  attr_accessor :ast_rewriter

  # parses tokens or code into output nodes
  def parse(object, ast_rewriter = Riml::AST_Rewriter.new, include_file = nil)
    if tokens?(object)
      @tokens = object
    elsif code?(object)
      @lexer = Riml::Lexer.new(object)
    end

    begin
      ast = do_parse
    rescue Racc::ParseError => e
      raise unless @lexer
      if @lexer.prev_token_is_keyword?
        warning = "#{@lexer.invalid_keyword.inspect} is a keyword, and cannot " \
          "be used as a variable name"
      end
      error_msg = "on line #{@lexer.lineno}: #{e.message}"
      error_msg << "\n\n#{warning}" if warning
      raise Riml::ParseError, error_msg
    end

    @ast_rewriter ||= ast_rewriter
    return ast unless @ast_rewriter
    @ast_rewriter.ast = ast
    @ast_rewriter.rewrite(include_file)
  end

  # get the next token from either the list of tokens provided, or
  # the lexer getting the next token
  def next_token
    return @tokens.shift unless @lexer
    @lexer.next_token
  end

  private
  def tokens?(object)
    Array === object
  end

  def code?(object)
    String === object
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'131,58,417,201,132,284,392,393,201,201,423,264,386,142,55,189,86,301',
'263,384,384,302,36,45,47,46,36,48,43,44,370,424,36,387,364,58,49,67',
'36,59,366,365,266,60,61,125,126,128,123,124,127,111,112,113,117,118',
'119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104',
'103,129,130,97,96,133,178,77,37,51,36,78,37,79,82,80,81,84,37,101,83',
'145,72,73,37,56,55,85,86,74,36,87,57,75,36,45,47,46,88,48,43,44,62,69',
'70,360,157,58,49,67,76,59,201,201,359,60,61,308,-84,-84,-84,-84,314',
'384,384,408,248,407,316,255,37,135,-47,-47,36,149,148,-166,-166,-166',
'-166,305,143,145,201,357,269,371,267,48,37,262,28,372,37,51,261,53,160',
'125,126,128,123,124,127,111,112,113,117,118,119,114,115,116,120,121',
'122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,97,96,133',
'37,77,-41,-41,160,78,160,79,82,80,81,84,145,101,83,157,72,73,269,56',
'55,85,86,74,298,87,57,75,36,45,47,46,88,48,43,44,62,69,70,-110,298,58',
'49,67,76,59,-97,135,262,60,61,260,267,261,201,267,58,49,67,48,248,269',
'375,-43,-43,-190,259,160,145,259,160,259,-166,-166,-166,-166,160,143',
'248,197,149,148,-42,-42,-45,-45,28,145,37,51,77,53,160,259,78,-97,79',
'82,80,81,84,145,-191,83,160,72,73,160,56,55,85,86,74,160,87,57,75,135',
'45,47,46,88,48,43,44,62,69,70,-110,51,58,49,67,76,59,257,135,284,60',
'61,-98,351,-163,-163,-163,-163,125,126,128,123,124,127,-44,-44,-110',
'378,58,49,67,-164,-164,-164,-164,181,182,183,184,125,126,128,123,124',
'127,-46,-46,28,379,77,51,380,53,78,-230,79,82,80,81,84,350,-98,83,253',
'72,73,101,56,55,85,86,74,381,87,57,75,36,45,47,46,88,48,43,44,62,69',
'70,101,252,58,49,67,76,59,58,49,67,60,61,160,338,125,126,128,123,124',
'127,111,112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107',
'106,108,110,109,102,104,103,129,130,97,28,354,37,51,77,53,392,412,78',
'101,79,82,80,81,84,101,145,83,135,72,73,135,56,55,85,86,74,208,87,57',
'75,36,45,47,46,88,48,43,44,62,69,70,-110,206,58,49,67,76,59,205,58,58',
'60,61,304,201,297,-163,-163,-163,-163,201,348,201,402,58,311,312,185',
'313,405,406,318,409,410,347,413,135,305,415,416,285,418,125,126,128',
'123,124,127,28,201,37,51,420,53,421,125,126,128,123,124,127,111,112',
'113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106,108,110',
'109,102,104,103,129,130,97,96,133,101,77,346,351,248,78,351,79,82,80',
'81,84,345,101,83,145,72,73,101,56,55,85,86,74,145,87,57,75,36,45,47',
'46,88,48,43,44,62,69,70,-110,201,58,49,67,76,59,101,433,410,60,61,101',
'341,125,126,128,123,124,127,111,112,113,117,118,119,114,115,116,120',
'121,122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,138,28',
'137,37,51,77,53,135,437,78,438,79,82,80,81,84,101,351,83,440,72,73,95',
'56,55,85,86,74,326,87,57,75,36,45,47,46,88,48,43,44,62,69,70,330,89',
'58,49,67,76,59,443,,,60,61,,,125,126,128,123,124,127,111,112,113,117',
'118,119,114,115,116,120,121,122,,,,,,,,,,125,126,128,123,124,127,28',
',37,51,77,53,,,78,,79,82,80,81,84,101,,83,,72,73,,56,55,85,86,74,,87',
'57,75,36,45,47,46,88,48,43,44,62,69,70,101,,58,49,67,76,59,,,,60,61',
',394,,,,,,,,,,,,,,,,,,,,,,,,,,,,125,126,128,123,124,127,28,,37,51,,53',
'125,126,128,123,124,127,111,112,113,117,118,119,114,115,116,120,121',
'122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,97,96,133',
'389,101,,,,,,,142,55,,86,,101,87,,,,45,47,46,,48,43,44,62,,,,,58,49',
'67,,59,,,,60,61,125,126,128,123,124,127,111,112,113,117,118,119,114',
'115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104,103,129',
'130,97,96,133,28,,,51,,53,,251,142,55,,86,,101,87,,,,45,47,46,,48,43',
'44,62,,,,,58,49,67,,59,,,,60,61,142,55,,86,,,87,,,,45,47,46,,48,43,44',
'62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,251,45,47,46,',
'48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,334,,45',
'47,46,,48,43,44,62,,,-110,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87',
'53,,,45,47,46,,48,43,44,62,,,-110,,58,49,67,,59,,,,60,61,142,55,28,86',
',51,87,53,,,45,47,46,,48,43,44,62,,,-110,,58,49,67,,59,,,,60,61,,142',
'55,28,86,,51,87,53,,163,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60',
'61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,125,126,128,,58,49',
'67,,59,,,,60,61,,142,55,161,86,,51,87,53,,,45,47,46,,48,43,44,62,,,-110',
',58,49,67,,59,,,,60,61,,101,28,-113,,51,,53,125,126,128,123,124,127',
'111,112,113,117,118,119,114,115,116,120,121,122,,,125,126,128,142,55',
',86,172,,87,51,,53,45,47,46,,48,43,44,62,,,,,58,49,67,101,59,,,,60,61',
'142,55,,86,,,87,,,,45,47,46,101,48,43,44,62,,,,,58,49,67,,59,,,,60,61',
',142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,',
'60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59',
',,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,125,126,128',
',58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62',
',,,,58,49,67,,59,,,,60,61,,,101,28,-113,,51,,53,,125,126,128,123,124',
'127,111,112,113,117,118,119,114,115,116,120,121,122,125,126,128,142',
'55,,86,28,-113,87,51,,53,45,47,46,,48,43,44,62,,,,,58,49,67,,59,101',
',,60,61,142,55,,86,,,87,,,,45,47,46,101,48,43,44,62,125,126,128,,58',
'49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,',
',,,58,49,67,,59,,,,60,61,,101,28,-113,,51,,53,125,126,128,123,124,127',
'111,112,113,117,118,119,114,115,116,120,121,122,,,,,,142,55,,86,28,',
'87,51,,53,45,47,46,,48,43,44,62,,,-110,,58,49,67,101,59,,,,60,61,142',
'55,,86,,,87,,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142',
'55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61',
'142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60',
'61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59',
',,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67',
',59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58',
'49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,',
',,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44',
'62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43',
'44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,',
'48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47',
'46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,,,28,,,51,332,53,,125,126',
'128,123,124,127,111,112,113,117,118,119,114,115,116,120,121,122,,,,142',
'55,,86,28,,87,51,,53,45,47,46,,48,43,44,62,,,,,58,49,67,,59,101,,,60',
'61,142,55,,86,,,87,,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61',
',142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,',
'60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59',
',,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67',
',59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49',
'67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,',
'58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62',
',,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43',
'44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48',
'43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46',
',48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47',
'46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,',
'45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87',
'53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,',
'51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28',
'86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142',
'55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61',
'142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60',
'61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59',
',,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67',
',59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58',
'49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,',
',,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44',
'62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43',
'44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,',
'48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47',
'46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,',
'45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87',
'53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,',
'51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28',
'86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142',
'55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61',
'142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60',
'61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59',
',,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67',
',59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58',
'49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,',
',,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44',
'62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48,43',
'44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,',
'48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47',
'46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,',
'45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87',
'53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,',
'51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28',
'86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,,,28',
'-113,,51,,53,,125,126,128,123,124,127,111,112,113,117,118,119,114,115',
'116,120,121,122,,,,142,55,,86,28,-113,87,51,,53,45,47,46,,48,43,44,62',
',,,,58,49,67,,59,101,,,60,61,142,55,,86,,,87,,,,45,47,46,,48,43,44,62',
',,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43',
'44,62,,,,,58,49,67,,59,,,,60,61,142,55,28,86,,51,87,53,,,45,47,46,,48',
'43,44,62,,,-110,,58,49,67,,59,,,,60,61,,,,28,-113,,51,,53,,125,126,128',
'123,124,127,111,112,113,117,118,119,114,115,116,120,121,122,,,,142,55',
',86,28,,87,51,,278,45,47,46,,48,43,44,62,,,-110,,58,49,67,,59,101,,',
'60,61,142,55,,86,,,87,,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60',
'61,,142,55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59',
',,,60,61,,,28,-113,,51,,53,125,126,128,123,124,127,111,112,113,117,118',
'119,114,115,116,120,121,122,,,,,,142,55,,86,28,-113,87,51,,53,45,47',
'46,,48,43,44,62,,,,,58,49,67,101,59,,,,60,61,142,55,,86,,,87,,,,45,47',
'46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,87,53,,',
'45,47,46,,48,43,44,62,,,-110,,58,49,67,,59,,,,60,61,142,55,28,86,,51',
'87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86',
',51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,142,55,28',
'86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142',
'55,28,86,,51,87,53,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61',
',,28,-113,,51,,53,125,126,128,123,124,127,111,112,113,117,118,119,114',
'115,116,120,121,122,,,,,,142,55,,86,28,,87,51,,278,45,47,46,,48,43,44',
'62,,,,,58,49,67,101,59,,,,60,61,142,55,,86,125,126,128,123,124,127,45',
'47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,142,55,28,86,,51,,53,',
',45,47,46,,48,43,44,,,101,,,58,49,67,,59,,,,60,61,142,55,178,86,,51',
',,,,45,47,46,,48,43,44,62,,,,,58,49,67,,59,,,,60,61,,,,167,,,169,,,',
',,,,,,,,,,,201,,,,,,125,126,128,123,124,127,,,178,,,51,125,126,128,123',
'124,127,111,112,113,117,118,119,114,115,116,120,121,122,98,100,99,105',
'107,106,108,110,109,102,104,103,129,130,97,96,133,201,101,,,,,125,126',
'128,123,124,127,,101,,,,,125,126,128,123,124,127,111,112,113,117,118',
'119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104',
'103,129,130,97,96,133,201,101,,,,,125,126,128,123,124,127,,101,,,,,125',
'126,128,123,124,127,111,112,113,117,118,119,114,115,116,120,121,122',
'98,100,99,105,107,106,108,110,109,102,104,103,129,130,97,96,133,201',
'101,,,,,125,126,128,123,124,127,,101,,,,,125,126,128,123,124,127,111',
'112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106,108',
'110,109,102,104,103,129,130,97,96,133,201,101,,,,,125,126,128,123,124',
'127,,101,,,,,125,126,128,123,124,127,111,112,113,117,118,119,114,115',
'116,120,121,122,98,100,99,105,107,106,108,110,109,102,104,103,129,130',
'97,96,133,435,101,,,,,125,126,128,123,124,127,,101,,,,,125,126,128,123',
'124,127,111,112,113,117,118,119,114,115,116,120,121,122,98,100,99,105',
'107,106,108,110,109,102,104,103,129,130,97,96,133,430,101,,,,,,,,,,',
',101,,,,,125,126,128,123,124,127,111,112,113,117,118,119,114,115,116',
'120,121,122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,97',
'96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113,117,118',
'119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104',
'103,129,130,97,96,133,,,,,,,256,,,,,,,101,125,126,128,123,124,127,111',
'112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106,108',
'110,109,102,104,103,129,130,97,96,133,,,,,,,344,,,,,,,101,125,126,128',
'123,124,127,111,112,113,117,118,119,114,115,116,120,121,122,98,100,99',
'105,107,106,108,110,109,102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101',
'125,126,128,123,124,127,111,112,113,117,118,119,114,115,116,120,121',
'122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,97,96,133',
',,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113,117,118,119,114',
'115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104,103,129',
'130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113,117',
'118,119,114,115,116,120,121,122,125,126,128,123,124,127,111,112,113',
'117,118,119,114,115,116,120,121,122,,,,,,,,,,,,,101,,,,,,,,,,,,,,,,',
',101,125,126,128,123,124,127,111,112,113,117,118,119,114,115,116,120',
'121,122,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,101,125,126,128,123,124,127,111',
'112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106,108',
'110,109,102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123',
'124,127,111,112,113,117,118,119,114,115,116,120,121,122,98,100,99,105',
'107,106,108,110,109,102,104,103,129,130,97,96,133,,,,,,,344,,,,,,,101',
'125,126,128,123,124,127,111,112,113,117,118,119,114,115,116,120,121',
'122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,97,96,133',
',,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113,117,118,119,114',
'115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104,103,129',
'130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113,117',
'118,119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102',
'104,103,,,,,,,,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113,117',
'118,119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102',
'104,103,,,,,,,,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113,117',
'118,119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102',
'104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127,111',
'112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106,108',
'110,109,102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123',
'124,127,111,112,113,117,118,119,114,115,116,120,121,122,98,100,99,105',
'107,106,108,110,109,102,104,103,129,130,97,96,133,,,,,,,,,,,,,321,101',
'125,126,128,123,124,127,111,112,113,117,118,119,114,115,116,120,121',
'122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,97,96,133',
',,,,,,,,,324,,,325,101,125,126,128,123,124,127,111,112,113,117,118,119',
'114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104,103',
'129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113',
'117,118,119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109',
'102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127',
'111,112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106',
'108,110,109,102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128',
'123,124,127,111,112,113,117,118,119,114,115,116,120,121,122,98,100,99',
'105,107,106,108,110,109,102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101',
'125,126,128,123,124,127,111,112,113,117,118,119,114,115,116,120,121',
'122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,97,96,133',
',,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113,117,118,119,114',
'115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104,103,129',
'130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113,117',
'118,119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102',
'104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127,111',
'112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106,108',
'110,109,102,104,103,129,130,97,96,133,,,,,,,256,,,,,,,101,125,126,128',
'123,124,127,111,112,113,117,118,119,114,115,116,120,121,122,98,100,99',
'105,107,106,108,110,109,102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101',
'125,126,128,123,124,127,111,112,113,117,118,119,114,115,116,120,121',
'122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,97,96,133',
',,,,,,,,,377,,,,101,125,126,128,123,124,127,111,112,113,117,118,119',
'114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104,103',
'129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113',
'117,118,119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109',
'102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127',
'111,112,113,117,118,119,114,115,116,120,121,122,98,100,99,105,107,106',
'108,110,109,102,104,103,129,130,97,96,133,,,,,,,,,,,,,,101,125,126,128',
'123,124,127,111,112,113,117,118,119,114,115,116,120,121,122,98,100,99',
'105,107,106,108,110,109,102,104,103,129,130,97,96,133,,,,,,,,,,374,',
',325,101,125,126,128,123,124,127,111,112,113,117,118,119,114,115,116',
'120,121,122,98,100,99,105,107,106,108,110,109,102,104,103,129,130,97',
'96,133,,,,,,,,,,,,,,101,125,126,128,123,124,127,111,112,113,117,118',
'119,114,115,116,120,121,122,98,100,99,105,107,106,108,110,109,102,104',
'103,129,130,97,96,133,,,,,,,,,,,,,265,101' ]
        racc_action_table = arr = ::Array.new(6261, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'21,71,397,318,21,162,356,356,426,439,408,153,350,62,62,71,62,192,153',
'426,439,192,2,62,62,62,436,62,62,62,318,408,356,350,315,62,62,62,317',
'62,315,315,156,62,62,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21',
'21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,62,435,2,62',
'91,435,436,435,435,435,435,435,356,21,435,276,435,435,317,435,435,435',
'435,435,429,435,435,435,435,435,435,435,435,435,435,435,435,435,435',
'310,54,435,435,435,435,435,422,349,309,435,435,194,134,134,134,134,200',
'422,349,385,134,385,200,139,91,139,276,276,441,277,277,30,30,30,30,194',
'30,166,366,307,268,319,267,366,429,288,435,320,435,435,288,435,54,194',
'194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194',
'194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194',
'441,4,277,277,268,4,267,4,4,4,4,4,274,194,4,171,4,4,158,4,4,4,4,4,190',
'4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,203,4,4,4,4,4,405,170,151,4,4,151,298',
'151,316,157,70,70,70,316,150,299,323,274,274,158,147,171,344,146,158',
'328,273,273,273,273,190,273,329,83,39,39,273,273,271,271,4,256,4,4,90',
'4,203,144,90,405,90,90,90,90,90,275,157,90,298,90,90,157,90,90,90,90',
'90,299,90,90,90,344,90,90,90,90,90,90,90,90,90,90,90,83,90,90,90,90',
'90,142,256,174,90,90,381,300,275,275,275,275,225,225,225,225,225,225',
'275,275,8,337,8,8,8,41,41,41,41,64,64,64,64,227,227,227,227,227,227',
'272,272,90,339,305,90,340,90,305,305,305,305,305,305,305,300,381,305',
'137,305,305,225,305,305,305,305,305,343,305,305,305,305,305,305,305',
'305,305,305,305,305,305,305,227,136,305,305,305,305,305,69,69,69,305',
'305,280,280,210,210,210,210,210,210,210,210,210,210,210,210,210,210',
'210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210',
'210,210,305,303,305,305,0,305,391,391,0,175,0,0,0,0,0,210,32,0,179,0',
'0,93,0,0,0,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,87,86,85',
'0,0,193,84,189,32,32,32,32,365,297,368,369,370,197,198,67,199,382,383',
'202,386,387,291,392,42,193,395,396,165,398,228,228,228,228,228,228,0',
'400,0,0,403,0,404,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,228,201,290,407,289,201,409,201,201,201,201,201',
'287,193,201,34,201,201,239,201,201,201,201,201,31,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,201,420,201,201,201,201,201,240',
'423,424,201,201,242,283,211,211,211,211,211,211,211,211,211,211,211',
'211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211',
'211,211,211,211,26,201,23,201,201,413,201,22,431,413,432,413,413,413',
'413,413,211,433,413,434,413,413,18,413,413,413,413,413,250,413,413,413',
'413,413,413,413,413,413,413,413,413,413,413,258,1,413,413,413,413,413',
'442,,,413,413,,,212,212,212,212,212,212,212,212,212,212,212,212,212',
'212,212,212,212,212,,,,,,,,,,229,229,229,229,229,229,413,,413,413,430',
'413,,,430,,430,430,430,430,430,212,,430,,430,430,,430,430,430,430,430',
',430,430,430,430,430,430,430,430,430,430,430,430,430,430,229,,430,430',
'430,430,430,,,,430,430,,358,,,,,,,,,,,,,,,,,,,,,,,,,,,,230,230,230,230',
'230,230,430,,430,430,,430,358,358,358,358,358,358,358,358,358,358,358',
'358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358',
'358,358,358,358,358,358,358,355,230,,,,,,,135,135,,135,,358,135,,,,135',
'135,135,,135,135,135,135,,,,,135,135,135,,135,,,,135,135,355,355,355',
'355,355,355,355,355,355,355,355,355,355,355,355,355,355,355,355,355',
'355,355,355,355,355,355,355,355,355,355,355,355,355,355,355,135,,,135',
',135,,135,248,248,,248,,355,248,,,,248,248,248,,248,248,248,248,,,,',
'248,248,248,,248,,,,248,248,264,264,,264,,,264,,,,264,264,264,,264,264',
'264,264,,,,,264,264,264,,264,,,,264,264,,123,123,248,123,,248,123,248',
',248,123,123,123,,123,123,123,123,,,,,123,123,123,,123,,,,123,123,51',
'51,264,51,,264,51,264,264,,51,51,51,,51,51,51,51,,,51,,51,51,51,,51',
',,,51,51,,53,53,123,53,,123,53,123,,,53,53,53,,53,53,53,53,,,53,,53',
'53,53,,53,,,,53,53,251,251,51,251,,51,251,51,,,251,251,251,,251,251',
'251,251,,,251,,251,251,251,,251,,,,251,251,,55,55,53,55,,53,55,53,,55',
'55,55,55,,55,55,55,55,,,,,55,55,55,,55,,,,55,55,257,257,251,257,,251',
'257,251,,,257,257,257,,257,257,257,257,237,237,237,,257,257,257,,257',
',,,257,257,,57,57,55,57,,55,57,55,,,57,57,57,,57,57,57,57,,,57,,57,57',
'57,,57,,,,57,57,,237,257,257,,257,,257,213,213,213,213,213,213,213,213',
'213,213,213,213,213,213,213,213,213,213,,,238,238,238,59,59,,59,57,',
'59,57,,57,59,59,59,,59,59,59,59,,,,,59,59,59,213,59,,,,59,59,60,60,',
'60,,,60,,,,60,60,60,238,60,60,60,60,,,,,60,60,60,,60,,,,60,60,,61,61',
'59,61,,59,61,59,,,61,61,61,,61,61,61,61,,,,,61,61,61,,61,,,,61,61,284',
'284,60,284,,60,284,60,,,284,284,284,,284,284,284,284,,,,,284,284,284',
',284,,,,284,284,,285,285,61,285,,61,285,61,,,285,285,285,,285,285,285',
'285,241,241,241,,285,285,285,,285,,,,285,285,205,205,284,205,,284,205',
'284,,,205,205,205,,205,205,205,205,,,,,205,205,205,,205,,,,205,205,',
',241,285,285,,285,,285,,214,214,214,214,214,214,214,214,214,214,214',
'214,214,214,214,214,214,214,177,177,177,410,410,,410,205,205,410,205',
',205,410,410,410,,410,410,410,410,,,,,410,410,410,,410,214,,,410,410',
'371,371,,371,,,371,,,,371,371,371,177,371,371,371,371,176,176,176,,371',
'371,371,,371,,,,371,371,,412,412,410,412,,410,412,410,,,412,412,412',
',412,412,412,412,,,,,412,412,412,,412,,,,412,412,,176,371,371,,371,',
'371,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216',
'216,216,,,,,,75,75,,75,412,,75,412,,412,75,75,75,,75,75,75,75,,,75,',
'75,75,75,216,75,,,,75,75,77,77,,77,,,77,,,,77,77,77,,77,77,77,77,,,',
',77,77,77,,77,,,,77,77,,78,78,75,78,,75,78,75,,,78,78,78,,78,78,78,78',
',,,,78,78,78,,78,,,,78,78,79,79,77,79,,77,79,77,,,79,79,79,,79,79,79',
'79,,,,,79,79,79,,79,,,,79,79,,82,82,78,82,,78,82,78,,,82,82,82,,82,82',
'82,82,,,,,82,82,82,,82,,,,82,82,281,281,79,281,,79,281,79,,,281,281',
'281,,281,281,281,281,,,,,281,281,281,,281,,,,281,281,,184,184,82,184',
',82,184,82,,,184,184,184,,184,184,184,184,,,,,184,184,184,,184,,,,184',
'184,183,183,281,183,,281,183,281,,,183,183,183,,183,183,183,183,,,,',
'183,183,183,,183,,,,183,183,,260,260,184,260,,184,260,184,,,260,260',
'260,,260,260,260,260,,,,,260,260,260,,260,,,,260,260,28,28,183,28,,183',
'28,183,,,28,28,28,,28,28,28,28,,,,,28,28,28,,28,,,,28,28,,262,262,260',
'262,,260,262,260,,,262,262,262,,262,262,262,262,,,,,262,262,262,,262',
',,,262,262,265,265,28,265,,28,265,28,,,265,265,265,,265,265,265,265',
',,,,265,265,265,,265,,,,265,265,,,,262,,,262,262,262,,217,217,217,217',
'217,217,217,217,217,217,217,217,217,217,217,217,217,217,,,,182,182,',
'182,265,,182,265,,265,182,182,182,,182,182,182,182,,,,,182,182,182,',
'182,217,,,182,182,181,181,,181,,,181,,,,181,181,181,,181,181,181,181',
',,,,181,181,181,,181,,,,181,181,,301,301,182,301,,182,301,182,,,301',
'301,301,,301,301,301,301,,,,,301,301,301,,301,,,,301,301,178,178,181',
'178,,181,178,181,,,178,178,178,,178,178,178,178,,,,,178,178,178,,178',
',,,178,178,,96,96,301,96,,301,96,301,,,96,96,96,,96,96,96,96,,,,,96',
'96,96,,96,,,,96,96,97,97,178,97,,178,97,178,,,97,97,97,,97,97,97,97',
',,,,97,97,97,,97,,,,97,97,,98,98,96,98,,96,98,96,,,98,98,98,,98,98,98',
'98,,,,,98,98,98,,98,,,,98,98,99,99,97,99,,97,99,97,,,99,99,99,,99,99',
'99,99,,,,,99,99,99,,99,,,,99,99,,100,100,98,100,,98,100,98,,,100,100',
'100,,100,100,100,100,,,,,100,100,100,,100,,,,100,100,101,101,99,101',
',99,101,99,,,101,101,101,,101,101,101,101,,,,,101,101,101,,101,,,,101',
'101,,102,102,100,102,,100,102,100,,,102,102,102,,102,102,102,102,,,',
',102,102,102,,102,,,,102,102,103,103,101,103,,101,103,101,,,103,103',
'103,,103,103,103,103,,,,,103,103,103,,103,,,,103,103,,104,104,102,104',
',102,104,102,,,104,104,104,,104,104,104,104,,,,,104,104,104,,104,,,',
'104,104,105,105,103,105,,103,105,103,,,105,105,105,,105,105,105,105',
',,,,105,105,105,,105,,,,105,105,,106,106,104,106,,104,106,104,,,106',
'106,106,,106,106,106,106,,,,,106,106,106,,106,,,,106,106,107,107,105',
'107,,105,107,105,,,107,107,107,,107,107,107,107,,,,,107,107,107,,107',
',,,107,107,,108,108,106,108,,106,108,106,,,108,108,108,,108,108,108',
'108,,,,,108,108,108,,108,,,,108,108,109,109,107,109,,107,109,107,,,109',
'109,109,,109,109,109,109,,,,,109,109,109,,109,,,,109,109,,110,110,108',
'110,,108,110,108,,,110,110,110,,110,110,110,110,,,,,110,110,110,,110',
',,,110,110,111,111,109,111,,109,111,109,,,111,111,111,,111,111,111,111',
',,,,111,111,111,,111,,,,111,111,,112,112,110,112,,110,112,110,,,112',
'112,112,,112,112,112,112,,,,,112,112,112,,112,,,,112,112,113,113,111',
'113,,111,113,111,,,113,113,113,,113,113,113,113,,,,,113,113,113,,113',
',,,113,113,,114,114,112,114,,112,114,112,,,114,114,114,,114,114,114',
'114,,,,,114,114,114,,114,,,,114,114,115,115,113,115,,113,115,113,,,115',
'115,115,,115,115,115,115,,,,,115,115,115,,115,,,,115,115,,116,116,114',
'116,,114,116,114,,,116,116,116,,116,116,116,116,,,,,116,116,116,,116',
',,,116,116,117,117,115,117,,115,117,115,,,117,117,117,,117,117,117,117',
',,,,117,117,117,,117,,,,117,117,,118,118,116,118,,116,118,116,,,118',
'118,118,,118,118,118,118,,,,,118,118,118,,118,,,,118,118,119,119,117',
'119,,117,119,117,,,119,119,119,,119,119,119,119,,,,,119,119,119,,119',
',,,119,119,,120,120,118,120,,118,120,118,,,120,120,120,,120,120,120',
'120,,,,,120,120,120,,120,,,,120,120,121,121,119,121,,119,121,119,,,121',
'121,121,,121,121,121,121,,,,,121,121,121,,121,,,,121,121,,313,313,120',
'313,,120,313,120,,,313,313,313,,313,313,313,313,,,,,313,313,313,,313',
',,,313,313,393,393,121,393,,121,393,121,,,393,393,393,,393,393,393,393',
',,,,393,393,393,,393,,,,393,393,,124,124,313,124,,313,124,313,,,124',
'124,124,,124,124,124,124,,,,,124,124,124,,124,,,,124,124,125,125,393',
'125,,393,125,393,,,125,125,125,,125,125,125,125,,,,,125,125,125,,125',
',,,125,125,,126,126,124,126,,124,126,124,,,126,126,126,,126,126,126',
'126,,,,,126,126,126,,126,,,,126,126,127,127,125,127,,125,127,125,,,127',
'127,127,,127,127,127,127,,,,,127,127,127,,127,,,,127,127,,128,128,126',
'128,,126,128,126,,,128,128,128,,128,128,128,128,,,,,128,128,128,,128',
',,,128,128,129,129,127,129,,127,129,127,,,129,129,129,,129,129,129,129',
',,,,129,129,129,,129,,,,129,129,,130,130,128,130,,128,130,128,,,130',
'130,130,,130,130,130,130,,,,,130,130,130,,130,,,,130,130,131,131,129',
'131,,129,131,129,,,131,131,131,,131,131,131,131,,,,,131,131,131,,131',
',,,131,131,,132,132,130,132,,130,132,130,,,132,132,132,,132,132,132',
'132,,,,,132,132,132,,132,,,,132,132,133,133,131,133,,131,133,131,,,133',
'133,133,,133,133,133,133,,,,,133,133,133,,133,,,,133,133,,346,346,132',
'346,,132,346,132,,,346,346,346,,346,346,346,346,,,,,346,346,346,,346',
',,,346,346,266,266,133,266,,133,266,133,,,266,266,266,,266,266,266,266',
',,,,266,266,266,,266,,,,266,266,,,,346,346,,346,,346,,218,218,218,218',
'218,218,218,218,218,218,218,218,218,218,218,218,218,218,,,,302,302,',
'302,266,266,302,266,,266,302,302,302,,302,302,302,302,,,,,302,302,302',
',302,218,,,302,302,304,304,,304,,,304,,,,304,304,304,,304,304,304,304',
',,,,304,304,304,,304,,,,304,304,,172,172,302,172,,302,172,302,,,172',
'172,172,,172,172,172,172,,,,,172,172,172,,172,,,,172,172,278,278,304',
'278,,304,278,304,,,278,278,278,,278,278,278,278,,,278,,278,278,278,',
'278,,,,278,278,,,,172,172,,172,,172,,219,219,219,219,219,219,219,219',
'219,219,219,219,219,219,219,219,219,219,,,,169,169,,169,278,,169,278',
',278,169,169,169,,169,169,169,169,,,169,,169,169,169,,169,219,,,169',
'169,167,167,,167,,,167,,,,167,167,167,,167,167,167,167,,,,,167,167,167',
',167,,,,167,167,,143,143,169,143,,169,143,169,,,143,143,143,,143,143',
'143,143,,,,,143,143,143,,143,,,,143,143,,,167,167,,167,,167,220,220',
'220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,,,,',
',308,308,,308,143,143,308,143,,143,308,308,308,,308,308,308,308,,,,',
'308,308,308,220,308,,,,308,308,311,311,,311,,,311,,,,311,311,311,,311',
'311,311,311,,,,,311,311,311,,311,,,,311,311,,325,325,308,325,,308,325',
'308,,,325,325,325,,325,325,325,325,,,325,,325,325,325,,325,,,,325,325',
'312,312,311,312,,311,312,311,,,312,312,312,,312,312,312,312,,,,,312',
'312,312,,312,,,,312,312,,321,321,325,321,,325,321,325,,,321,321,321',
',321,321,321,321,,,,,321,321,321,,321,,,,321,321,161,161,312,161,,312',
'161,312,,,161,161,161,,161,161,161,161,,,,,161,161,161,,161,,,,161,161',
',160,160,321,160,,321,160,321,,,160,160,160,,160,160,160,160,,,,,160',
'160,160,,160,,,,160,160,,,161,161,,161,,161,221,221,221,221,221,221',
'221,221,221,221,221,221,221,221,221,221,221,221,,,,,,122,122,,122,160',
',122,160,,160,122,122,122,,122,122,122,122,,,,,122,122,122,221,122,',
',,122,122,138,138,,138,231,231,231,231,231,231,138,138,138,,138,138',
'138,138,,,,,138,138,138,,138,,,,138,138,,56,56,122,56,,122,,122,,,56',
'56,56,,56,56,56,,,231,,,56,56,56,,56,,,,56,56,95,95,138,95,,138,,,,',
'95,95,95,,95,95,95,95,,,,,95,95,95,,95,,,,95,95,,,,56,,,56,,,,,,,,,',
',,,,,363,,,,,,232,232,232,232,232,232,,,95,,,95,363,363,363,363,363',
'363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363',
'363,363,363,363,363,363,363,363,363,363,363,363,363,361,232,,,,,233',
'233,233,233,233,233,,363,,,,,361,361,361,361,361,361,361,361,361,361',
'361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361',
'361,361,361,361,361,361,361,361,362,233,,,,,234,234,234,234,234,234',
',361,,,,,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362',
'362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362',
'362,362,362,195,234,,,,,235,235,235,235,235,235,,362,,,,,195,195,195',
'195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195',
'195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,196,235',
',,,,236,236,236,236,236,236,,195,,,,,196,196,196,196,196,196,196,196',
'196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,196,196,196,196,196,428,236,,,,,226,226,226,226',
'226,226,,196,,,,,428,428,428,428,428,428,428,428,428,428,428,428,428',
'428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428',
'428,428,428,428,428,414,226,,,,,,,,,,,,428,,,,,414,414,414,414,414,414',
'414,414,414,414,414,414,414,414,414,414,414,414,414,414,414,414,414',
'414,414,414,414,414,414,414,414,414,414,414,414,,,,,,,,,,,,,,414,282',
'282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282',
'282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282',
',,,,,,282,,,,,,,282,292,292,292,292,292,292,292,292,292,292,292,292',
'292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292',
'292,292,292,292,292,292,,,,,,,292,,,,,,,292,191,191,191,191,191,191',
'191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191',
'191,191,191,191,191,191,191,191,191,191,191,191,,,,,,,,,,,,,,191,376',
'376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376',
'376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376',
',,,,,,,,,,,,,376,215,215,215,215,215,215,215,215,215,215,215,215,215',
'215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215',
'215,215,215,215,215,,,,,,,,,,,,,,215,222,222,222,222,222,222,222,222',
'222,222,222,222,222,222,222,222,222,222,223,223,223,223,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,,,,,,,,,,,,,222,,,,,,,,',
',,,,,,,,,223,224,224,224,224,224,224,224,224,224,224,224,224,224,224',
'224,224,224,224,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,224,353,353,353,353,353',
'353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353',
'353,353,353,353,353,353,353,353,353,353,353,353,353,,,,,,,,,,,,,,353',
'286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286',
'286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286',
'286,,,,,,,286,,,,,,,286,293,293,293,293,293,293,293,293,293,293,293',
'293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293',
'293,293,293,293,293,293,293,,,,,,,,,,,,,,293,352,352,352,352,352,352',
'352,352,352,352,352,352,352,352,352,352,352,352,352,352,352,352,352',
'352,352,352,352,352,352,352,352,352,352,352,352,,,,,,,,,,,,,,352,243',
'243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243',
'243,243,243,243,243,243,243,243,243,243,243,243,,,,,,,,,,,,,,,,,,,243',
'244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244',
'244,244,244,244,244,244,244,244,244,244,244,244,244,,,,,,,,,,,,,,,,',
',,244,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245',
'245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245',
'245,245,,,,,,,,,,,,,,245,246,246,246,246,246,246,246,246,246,246,246',
'246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246',
'246,246,246,246,246,246,246,,,,,,,,,,,,,,246,247,247,247,247,247,247',
'247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247',
'247,247,247,247,247,247,247,247,247,247,247,247,,,,,,,,,,,,,247,247',
'249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249',
'249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249',
'249,,,,,,,,,,249,,,249,249,373,373,373,373,373,373,373,373,373,373,373',
'373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373',
'373,373,373,373,373,373,373,,,,,,,,,,,,,,373,294,294,294,294,294,294',
'294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294',
'294,294,294,294,294,294,294,294,294,294,294,294,,,,,,,,,,,,,,294,295',
'295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295',
'295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295',
',,,,,,,,,,,,,295,296,296,296,296,296,296,296,296,296,296,296,296,296',
'296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296',
'296,296,296,296,296,,,,,,,,,,,,,,296,427,427,427,427,427,427,427,427',
'427,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427',
'427,427,427,427,427,427,427,427,427,427,,,,,,,,,,,,,,427,342,342,342',
'342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342',
'342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,,,,,,,,',
',,,,,342,336,336,336,336,336,336,336,336,336,336,336,336,336,336,336',
'336,336,336,336,336,336,336,336,336,336,336,336,336,336,336,336,336',
'336,336,336,,,,,,,,,,,,,,336,141,141,141,141,141,141,141,141,141,141',
'141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141',
'141,141,141,141,141,141,141,141,,,,,,,141,,,,,,,141,333,333,333,333',
'333,333,333,333,333,333,333,333,333,333,333,333,333,333,333,333,333',
'333,333,333,333,333,333,333,333,333,333,333,333,333,333,,,,,,,,,,,,',
',333,331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,331',
'331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,331',
'331,331,,,,,,,,,,331,,,,331,327,327,327,327,327,327,327,327,327,327',
'327,327,327,327,327,327,327,327,327,327,327,327,327,327,327,327,327',
'327,327,327,327,327,327,327,327,,,,,,,,,,,,,,327,279,279,279,279,279',
'279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279',
'279,279,279,279,279,279,279,279,279,279,279,279,279,,,,,,,,,,,,,,279',
'164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164',
'164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164',
'164,,,,,,,,,,,,,,164,322,322,322,322,322,322,322,322,322,322,322,322',
'322,322,322,322,322,322,322,322,322,322,322,322,322,322,322,322,322',
'322,322,322,322,322,322,,,,,,,,,,322,,,322,322,152,152,152,152,152,152',
'152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152',
'152,152,152,152,152,152,152,152,152,152,152,152,,,,,,,,,,,,,,152,155',
'155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155',
'155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155',
',,,,,,,,,,,,155,155' ]
        racc_action_check = arr = ::Array.new(6261, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   472,   730,    -7,   nil,   207,   nil,   nil,   nil,   322,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   622,   nil,
   nil,    -2,   603,   636,   nil,   nil,   600,   nil,  1937,   nil,
    69,   584,   445,   nil,   575,   nil,   nil,   nil,   nil,   257,
   nil,   285,   457,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1066,   nil,  1099,    80,  1164,  4136,  1229,   nil,  1292,
  1324,  1357,    -7,   nil,   289,   nil,   nil,   498,   nil,   388,
   222,   -41,   nil,   nil,   nil,  1645,   nil,  1677,  1710,  1742,
   nil,   nil,  1775,   247,   496,   479,   478,   432,   nil,   513,
   296,    55,   457,   401,   nil,  4168,  2195,  2227,  2260,  2292,
  2325,  2357,  2390,  2422,  2455,  2487,  2520,  2552,  2585,  2617,
  2650,  2682,  2715,  2747,  2780,  2812,  2845,  2877,  2910,  2942,
  2975,  3007,  4071,  1034,  3105,  3137,  3170,  3202,  3235,  3267,
  3300,  3332,  3365,  3397,    50,   894,   383,   359,  4103,    55,
   nil,  5773,   256,  3750,   260,   nil,   236,   233,   nil,   nil,
   178,   170,  6116,   -75,   nil,  6165,   -45,   223,   186,   nil,
  4008,  3975,   -81,   nil,  6018,   464,   116,  3717,   nil,  3685,
   165,   183,  3590,   nil,   259,   384,  1540,  1487,  2162,   398,
   nil,  2097,  2065,  1872,  1840,   nil,   nil,   nil,   nil,   486,
   192,  4677,    15,   519,   126,  4371,  4424,   520,   521,   523,
   129,   600,   502,   208,   nil,  1454,   nil,   nil,   nil,   nil,
   390,   607,   696,  1242,  1469,  4775,  1595,  2017,  3477,  3637,
  3763,  4021,  4824,  4842,  4891,   307,  4465,   328,   506,   723,
   812,  4080,  4200,  4253,  4306,  4359,  4412,  1187,  1262,   524,
   552,  1413,   557,  5136,  5185,  5234,  5283,  5332,   969,  5381,
   623,  1131,   nil,   nil,   nil,   nil,   254,  1196,   641,   nil,
  1905,   nil,  1970,   nil,  1001,  2002,  3462,   122,   120,   nil,
   nil,   200,   289,   198,   179,   268,    54,   118,  3622,  5969,
   343,  1807,  4579,   565,  1389,  1422,  4989,   525,    79,   515,
   516,   457,  4628,  5038,  5479,  5528,  5577,   479,   220,   229,
   309,  2130,  3525,   464,  3557,   383,   nil,   152,  3813,   121,
   112,  3845,  3910,  3040,   nil,    27,   233,     9,   -26,    74,
    79,  3943,  6067,   179,   nil,  3878,   nil,  5920,   238,   196,
   nil,  5871,   nil,  5822,   nil,   nil,  5724,   275,   nil,   291,
   294,   nil,  5675,   320,   235,   nil,  3430,   nil,   nil,    98,
    -7,   nil,  5087,  4940,   nil,   899,     3,   nil,   824,   nil,
   nil,  4265,  4318,  4212,   nil,   502,   129,   nil,   504,   527,
   493,  1549,   nil,  5430,   nil,   nil,  4726,   nil,   nil,   nil,
   nil,   307,   452,   534,   nil,    53,   455,   462,   nil,   nil,
   nil,   473,   517,  3072,   nil,   542,   543,    -5,   545,   nil,
   531,   nil,   nil,   523,   477,   213,   nil,   564,    -9,   567,
  1517,   nil,  1582,   689,  4530,   nil,   nil,   nil,   nil,   nil,
   612,   nil,    97,   560,   567,   nil,   -21,  5626,  4477,    75,
   778,   687,   689,   663,   698,    79,    -3,   nil,   nil,   -20,
   nil,   119,   729,   nil ]

racc_action_default = [
    -1,  -244,    -2,    -3,    -6,    -8,    -9,   -10,   -11,   -12,
   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,
   -23,   -24,   -25,   -26,   -28,   -29,   -30,   -31,  -110,   -33,
   -34,   -35,   -36,   -37,   -38,   -39,   -48,   -49,   -50,   -51,
   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,   -62,   -63,
   -64,   -68,   -71,   -74,  -244,  -110,  -110,  -113,  -109,  -110,
  -110,  -110,  -110,  -156,  -244,  -165,  -167,  -244,  -171,  -110,
  -110,  -110,  -187,  -188,  -189,  -204,  -206,  -110,  -110,  -110,
  -215,  -216,  -110,  -244,  -244,  -110,  -110,  -242,  -243,  -244,
    -5,    -7,  -244,  -244,  -175,  -110,  -110,  -110,  -110,  -110,
  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,
  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,
  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,
  -110,  -110,  -110,  -110,   -82,  -110,   -27,  -244,  -110,   -25,
   -30,  -244,  -244,  -110,   -79,   -93,   -78,   -80,   -60,   -61,
  -170,  -244,   -69,  -244,   -75,  -244,  -244,  -168,  -172,  -176,
  -110,  -110,  -100,  -101,  -115,   -34,   -36,  -110,   -53,   -68,
  -244,  -244,  -110,  -106,  -114,  -152,  -153,  -154,  -110,  -244,
  -155,  -110,  -110,  -110,  -110,  -169,  -173,  -174,  -111,  -244,
  -244,  -205,  -201,  -244,  -244,  -244,  -244,  -244,  -244,  -244,
  -224,  -230,  -244,  -244,  -240,  -110,   444,    -4,  -168,  -158,
  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -126,
  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,
  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,
  -147,  -148,  -149,  -150,  -151,  -209,  -212,  -244,  -110,  -244,
  -244,   -92,   -96,   -95,  -157,   -40,   -32,  -110,  -244,   -94,
  -110,   -66,  -110,   -72,  -110,  -110,  -110,  -244,  -177,  -178,
  -179,   -28,   -29,   -34,   -35,   -36,   -38,   -51,   -74,  -244,
  -244,  -110,  -115,  -244,  -110,  -110,  -115,  -244,  -244,   -82,
  -244,  -244,  -244,  -159,  -160,  -161,  -162,  -244,  -191,  -190,
  -194,  -110,  -110,  -244,  -110,  -110,  -231,  -244,  -110,  -244,
  -244,  -110,  -110,  -110,  -221,  -244,  -244,  -229,  -244,  -104,
  -244,  -110,  -244,  -244,   -85,   -90,   -86,   -91,   -81,   -83,
   -98,  -244,   -67,   -70,   -73,   -76,   -77,  -244,  -180,  -244,
  -244,   -99,  -116,  -244,  -244,  -102,  -110,  -105,  -112,  -244,
  -195,  -192,  -202,  -203,  -207,  -244,  -229,  -210,  -244,  -214,
  -217,  -244,  -244,  -244,  -222,  -244,  -244,  -225,  -244,  -244,
  -110,  -110,  -241,  -213,   -87,   -88,   -89,   -65,   -97,  -181,
  -182,  -108,  -244,  -244,  -193,  -244,  -244,  -196,  -197,  -208,
  -232,  -233,  -244,  -110,  -211,  -244,  -244,  -244,  -244,  -227,
  -244,  -226,  -238,  -244,  -244,  -107,  -183,  -194,  -244,  -194,
  -110,  -234,  -110,  -110,  -244,  -218,  -219,  -220,  -223,  -228,
  -244,  -103,  -244,  -244,  -198,  -199,  -244,  -200,  -244,  -235,
  -110,  -244,  -244,  -194,  -244,  -110,  -236,  -239,  -184,  -244,
  -185,  -237,  -244,  -186 ]

racc_goto_table = [
    90,     2,    26,    92,   349,    91,    26,   150,   144,   200,
   271,   147,   165,   166,   151,   274,   250,    93,   368,   390,
   168,   276,    94,     1,   388,   303,   307,   180,   204,   162,
   190,   335,   199,   385,   340,   192,   136,   315,   207,   391,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   198,    21,   nil,
   nil,   171,    21,   nil,   411,   nil,   nil,   nil,   150,   nil,
   nil,   nil,   nil,   nil,    92,    92,   188,   nil,   400,   158,
   156,   272,   277,   nil,   nil,   270,   141,   281,    93,    93,
   202,   203,   425,   186,   187,   nil,   nil,   nil,   nil,    90,
   nil,   nil,    26,   nil,   nil,   nil,   173,   209,   nil,   152,
   nil,   155,   nil,   nil,   nil,   nil,   nil,   175,   176,   177,
   nil,   422,   nil,   426,   nil,   nil,   273,   275,   nil,   nil,
   309,   310,   nil,   191,   nil,   193,   194,   195,   271,   323,
   196,   271,   288,   274,   nil,   289,   274,   439,    21,   276,
   254,   nil,   276,   nil,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
   236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   247,   258,   249,   nil,   270,   158,   290,   nil,   272,
   277,   nil,   272,   277,   139,   281,   nil,   339,   nil,   nil,
   283,   nil,   317,    26,   nil,   299,   300,   nil,   279,   282,
   nil,   291,   nil,   nil,   nil,   286,   270,   152,   299,   319,
   282,   329,   170,   nil,   nil,   nil,   292,   nil,   179,   293,
   294,   295,   296,   328,   273,   275,   nil,   273,   275,   nil,
   nil,   367,   nil,   369,   320,   nil,   nil,   nil,   nil,    21,
   nil,   144,   nil,   147,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   179,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   383,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   395,   396,   397,   nil,
   398,   399,   nil,   401,   nil,   nil,   322,   nil,   nil,   327,
   nil,   nil,   nil,   nil,   179,   337,   356,    26,   331,   329,
   333,   nil,   155,   336,   nil,    90,   nil,   nil,   nil,   nil,
   nil,   328,   nil,   nil,   343,   419,   155,   139,   nil,   279,
   nil,   nil,   342,   139,   nil,   nil,   nil,   nil,   139,   nil,
   nil,   nil,   nil,   nil,   139,   431,   nil,   432,   nil,   352,
   353,   434,   355,    21,    90,   nil,   358,   nil,   nil,   361,
   362,   363,   nil,   nil,   442,   403,   nil,   nil,   nil,   373,
   nil,   nil,   nil,   376,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   382,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   404,   nil,   nil,   nil,   429,    26,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    90,   nil,   nil,
   nil,   436,    26,   nil,    90,   nil,   441,    26,   nil,    90,
   nil,   414,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   427,   nil,
   428,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   nil,   nil,   nil,    21 ]

racc_goto_check = [
     4,     2,    27,    52,    64,     2,    27,    49,    48,    65,
    25,    48,    30,    32,    44,    31,    51,    41,    39,    71,
    40,    34,    60,     1,    67,    69,    69,    58,    56,    55,
    57,    47,    43,    66,    36,    68,    24,    70,     3,    72,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,    21,   nil,
   nil,    52,    21,   nil,    71,   nil,   nil,   nil,    49,   nil,
   nil,   nil,   nil,   nil,    52,    52,    52,   nil,    39,    61,
    53,    26,    37,   nil,   nil,    62,    21,    62,    41,    41,
    52,    52,    67,    60,    60,   nil,   nil,   nil,   nil,     4,
   nil,   nil,    27,   nil,   nil,   nil,    54,    27,   nil,    21,
   nil,    21,   nil,   nil,   nil,   nil,   nil,    21,    21,    21,
   nil,    64,   nil,    64,   nil,   nil,    30,    32,   nil,   nil,
    65,    65,   nil,    21,   nil,    21,    21,    21,    25,    51,
    21,    25,    44,    31,   nil,    49,    31,    64,    21,    34,
    27,   nil,    34,   nil,    21,    21,    21,    21,    21,    21,
    21,    21,    21,    21,    21,    21,    21,    21,    21,    21,
    21,    21,    21,    21,    21,    21,    21,    21,    21,    21,
    21,    21,    21,    21,    21,    21,    21,    21,    21,    21,
    21,    21,    54,    21,   nil,    62,    61,    53,   nil,    26,
    37,   nil,    26,    37,    22,    62,   nil,    62,   nil,   nil,
    54,   nil,     2,    27,   nil,    61,    53,   nil,    21,    21,
   nil,    54,   nil,   nil,   nil,    21,    62,    21,    61,    53,
    21,    49,    22,   nil,   nil,   nil,    21,   nil,    22,    21,
    21,    21,    21,    48,    30,    32,   nil,    30,    32,   nil,
   nil,    65,   nil,    65,    54,   nil,   nil,   nil,   nil,    21,
   nil,    48,   nil,    48,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    65,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    65,    65,    65,   nil,
    65,    65,   nil,    65,   nil,   nil,    21,   nil,   nil,    21,
   nil,   nil,   nil,   nil,    22,    54,     2,    27,    21,    49,
    21,   nil,    21,    21,   nil,     4,   nil,   nil,   nil,   nil,
   nil,    48,   nil,   nil,    54,    65,    21,    22,   nil,    21,
   nil,   nil,    21,    22,   nil,   nil,   nil,   nil,    22,   nil,
   nil,   nil,   nil,   nil,    22,    65,   nil,    65,   nil,    21,
    21,    65,    21,    21,     4,   nil,    21,   nil,   nil,    21,
    21,    21,   nil,   nil,    65,    52,   nil,   nil,   nil,    21,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    54,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    54,   nil,   nil,   nil,     2,    27,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,
   nil,     2,    27,   nil,     4,   nil,     2,    27,   nil,     4,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
    21,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   nil,   nil,   nil,    21 ]

racc_goto_pointer = [
   nil,    23,     1,   -52,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    48,   166,   nil,    13,  -150,   -89,     2,   nil,   nil,
   -44,  -145,   -43,   nil,  -139,   nil,  -247,   -88,   nil,  -298,
   -36,     9,   nil,   -51,   -37,   nil,   nil,  -233,   -23,   -35,
   nil,  -119,    -5,    16,    39,   -26,   -58,   -41,   -35,   nil,
    14,    15,   -83,   nil,  -296,   -75,  -317,  -326,   -40,  -168,
  -163,  -337,  -317 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,   164,    22,    23,   nil,    24,    25,   140,    27,    29,
    30,    31,    32,    33,    34,    35,   280,    39,    38,    40,
    41,    42,    50,    65,   nil,    52,   153,   154,   146,   134,
    66,   nil,    54,   nil,   287,   174,   nil,   nil,    63,    64,
    68,   268,   159,    71,   nil,   306,   nil,   nil,   nil,   nil,
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 97, :_reduce_1,
  1, 97, :_reduce_2,
  1, 98, :_reduce_3,
  3, 98, :_reduce_4,
  2, 98, :_reduce_5,
  1, 98, :_reduce_6,
  2, 98, :_reduce_7,
  1, 99, :_reduce_8,
  1, 99, :_reduce_9,
  1, 99, :_reduce_10,
  1, 99, :_reduce_11,
  1, 99, :_reduce_12,
  1, 99, :_reduce_13,
  1, 99, :_reduce_14,
  1, 99, :_reduce_15,
  1, 99, :_reduce_16,
  1, 99, :_reduce_17,
  1, 99, :_reduce_18,
  1, 99, :_reduce_19,
  1, 99, :_reduce_20,
  1, 99, :_reduce_21,
  1, 99, :_reduce_22,
  1, 99, :_reduce_23,
  1, 99, :_reduce_24,
  1, 117, :_reduce_25,
  1, 117, :_reduce_26,
  2, 117, :_reduce_27,
  1, 117, :_reduce_28,
  1, 117, :_reduce_29,
  1, 117, :_reduce_30,
  1, 117, :_reduce_31,
  3, 117, :_reduce_32,
  1, 118, :_reduce_33,
  1, 118, :_reduce_34,
  1, 118, :_reduce_35,
  1, 118, :_reduce_36,
  1, 118, :_reduce_37,
  1, 118, :_reduce_38,
  1, 118, :_reduce_39,
  3, 118, :_reduce_40,
  1, 132, :_reduce_41,
  1, 132, :_reduce_42,
  1, 132, :_reduce_43,
  1, 132, :_reduce_44,
  1, 132, :_reduce_45,
  1, 132, :_reduce_46,
  1, 132, :_reduce_47,
  1, 100, :_reduce_48,
  1, 100, :_reduce_49,
  1, 129, :_reduce_50,
  1, 129, :_reduce_51,
  1, 129, :_reduce_52,
  1, 129, :_reduce_53,
  1, 129, :_reduce_54,
  1, 129, :_reduce_55,
  1, 129, :_reduce_56,
  1, 134, :_reduce_57,
  1, 133, :_reduce_58,
  1, 133, :_reduce_59,
  2, 133, :_reduce_60,
  2, 133, :_reduce_61,
  1, 135, :_reduce_62,
  1, 137, :_reduce_63,
  1, 136, :_reduce_64,
  5, 139, :_reduce_65,
  3, 138, :_reduce_66,
  4, 138, :_reduce_67,
  0, 140, :_reduce_68,
  1, 140, :_reduce_69,
  3, 140, :_reduce_70,
  1, 119, :_reduce_71,
  3, 141, :_reduce_72,
  4, 141, :_reduce_73,
  0, 142, :_reduce_74,
  1, 142, :_reduce_75,
  3, 142, :_reduce_76,
  3, 143, :_reduce_77,
  2, 126, :_reduce_78,
  2, 126, :_reduce_79,
  2, 126, :_reduce_80,
  4, 126, :_reduce_81,
  2, 127, :_reduce_82,
  4, 127, :_reduce_83,
  2, 146, :_reduce_84,
  3, 145, :_reduce_85,
  3, 145, :_reduce_86,
  4, 145, :_reduce_87,
  4, 145, :_reduce_88,
  3, 147, :_reduce_89,
  2, 147, :_reduce_90,
  2, 147, :_reduce_91,
  1, 147, :_reduce_92,
  1, 144, :_reduce_93,
  2, 144, :_reduce_94,
  2, 120, :_reduce_95,
  2, 120, :_reduce_96,
  5, 130, :_reduce_97,
  4, 130, :_reduce_98,
  4, 130, :_reduce_99,
  2, 130, :_reduce_100,
  2, 130, :_reduce_101,
  4, 130, :_reduce_102,
  5, 152, :_reduce_103,
  2, 152, :_reduce_104,
  4, 113, :_reduce_105,
  2, 113, :_reduce_106,
  6, 101, :_reduce_107,
  5, 101, :_reduce_108,
  1, 148, :_reduce_109,
  0, 148, :_reduce_110,
  1, 153, :_reduce_111,
  3, 153, :_reduce_112,
  0, 150, :_reduce_113,
  1, 150, :_reduce_114,
  1, 151, :_reduce_115,
  3, 151, :_reduce_116,
  3, 121, :_reduce_117,
  3, 121, :_reduce_118,
  3, 121, :_reduce_119,
  3, 121, :_reduce_120,
  3, 121, :_reduce_121,
  3, 121, :_reduce_122,
  3, 121, :_reduce_123,
  3, 121, :_reduce_124,
  3, 121, :_reduce_125,
  3, 121, :_reduce_126,
  3, 121, :_reduce_127,
  3, 121, :_reduce_128,
  3, 121, :_reduce_129,
  3, 121, :_reduce_130,
  3, 121, :_reduce_131,
  3, 121, :_reduce_132,
  3, 121, :_reduce_133,
  3, 121, :_reduce_134,
  3, 121, :_reduce_135,
  3, 121, :_reduce_136,
  3, 121, :_reduce_137,
  3, 121, :_reduce_138,
  3, 121, :_reduce_139,
  3, 121, :_reduce_140,
  3, 121, :_reduce_141,
  3, 121, :_reduce_142,
  3, 121, :_reduce_143,
  3, 121, :_reduce_144,
  3, 121, :_reduce_145,
  3, 121, :_reduce_146,
  3, 121, :_reduce_147,
  3, 121, :_reduce_148,
  3, 121, :_reduce_149,
  3, 121, :_reduce_150,
  3, 121, :_reduce_151,
  2, 125, :_reduce_152,
  2, 125, :_reduce_153,
  2, 125, :_reduce_154,
  2, 123, :_reduce_155,
  1, 123, :_reduce_156,
  3, 114, :_reduce_157,
  3, 114, :_reduce_158,
  3, 154, :_reduce_159,
  3, 154, :_reduce_160,
  3, 154, :_reduce_161,
  3, 154, :_reduce_162,
  1, 155, :_reduce_163,
  1, 155, :_reduce_164,
  1, 155, :_reduce_165,
  1, 155, :_reduce_166,
  1, 155, :_reduce_167,
  2, 156, :_reduce_168,
  2, 156, :_reduce_169,
  2, 156, :_reduce_170,
  1, 128, :_reduce_171,
  2, 128, :_reduce_172,
  2, 104, :_reduce_173,
  2, 104, :_reduce_174,
  2, 104, :_reduce_175,
  1, 157, :_reduce_176,
  2, 157, :_reduce_177,
  2, 157, :_reduce_178,
  2, 157, :_reduce_179,
  3, 158, :_reduce_180,
  4, 158, :_reduce_181,
  4, 158, :_reduce_182,
  6, 102, :_reduce_183,
  9, 102, :_reduce_184,
  9, 102, :_reduce_185,
  11, 102, :_reduce_186,
  1, 159, :_reduce_187,
  1, 159, :_reduce_188,
  1, 159, :_reduce_189,
  1, 149, :_reduce_190,
  1, 149, :_reduce_191,
  1, 160, :_reduce_192,
  2, 160, :_reduce_193,
  0, 160, :_reduce_194,
  0, 162, :_reduce_195,
  1, 162, :_reduce_196,
  1, 162, :_reduce_197,
  3, 162, :_reduce_198,
  3, 162, :_reduce_199,
  3, 163, :_reduce_200,
  2, 103, :_reduce_201,
  4, 103, :_reduce_202,
  4, 103, :_reduce_203,
  0, 164, :_reduce_204,
  1, 164, :_reduce_205,
  1, 112, :_reduce_206,
  4, 115, :_reduce_207,
  5, 115, :_reduce_208,
  3, 115, :_reduce_209,
  4, 116, :_reduce_210,
  5, 116, :_reduce_211,
  3, 116, :_reduce_212,
  5, 122, :_reduce_213,
  4, 107, :_reduce_214,
  1, 111, :_reduce_215,
  1, 111, :_reduce_216,
  4, 108, :_reduce_217,
  6, 106, :_reduce_218,
  6, 106, :_reduce_219,
  6, 106, :_reduce_220,
  3, 109, :_reduce_221,
  4, 109, :_reduce_222,
  6, 109, :_reduce_223,
  0, 166, :_reduce_224,
  2, 166, :_reduce_225,
  3, 166, :_reduce_226,
  3, 166, :_reduce_227,
  4, 166, :_reduce_228,
  2, 161, :_reduce_229,
  1, 161, :_reduce_230,
  1, 165, :_reduce_231,
  3, 165, :_reduce_232,
  3, 165, :_reduce_233,
  4, 165, :_reduce_234,
  3, 167, :_reduce_235,
  4, 168, :_reduce_236,
  5, 168, :_reduce_237,
  5, 110, :_reduce_238,
  8, 110, :_reduce_239,
  2, 131, :_reduce_240,
  4, 124, :_reduce_241,
  1, 124, :_reduce_242,
  1, 105, :_reduce_243 ]

racc_reduce_n = 244

racc_shift_n = 444

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :ELSEIF => 4,
  :THEN => 5,
  :UNLESS => 6,
  :END => 7,
  :WHILE => 8,
  :UNTIL => 9,
  :BREAK => 10,
  :CONTINUE => 11,
  :TRY => 12,
  :CATCH => 13,
  :FINALLY => 14,
  :FOR => 15,
  :IN => 16,
  :DEF => 17,
  :DEF_BANG => 18,
  :SPLAT => 19,
  :CALL => 20,
  :BUILTIN_COMMAND => 21,
  :CLASS => 22,
  :NEW => 23,
  :DEFM => 24,
  :DEFM_BANG => 25,
  :SUPER => 26,
  :RIML_COMMAND => 27,
  :RETURN => 28,
  :NEWLINE => 29,
  :NUMBER => 30,
  :STRING_D => 31,
  :STRING_S => 32,
  :EX_LITERAL => 33,
  :REGEXP => 34,
  :TRUE => 35,
  :FALSE => 36,
  :LET => 37,
  :UNLET => 38,
  :UNLET_BANG => 39,
  :IDENTIFIER => 40,
  :DICT_VAL => 41,
  :SCOPE_MODIFIER => 42,
  :SCOPE_MODIFIER_LITERAL => 43,
  :SPECIAL_VAR_PREFIX => 44,
  :FINISH => 45,
  "!" => 46,
  "*" => 47,
  "/" => 48,
  "%" => 49,
  "+" => 50,
  "-" => 51,
  "." => 52,
  ">" => 53,
  ">#" => 54,
  ">?" => 55,
  "<" => 56,
  "<#" => 57,
  "<?" => 58,
  ">=" => 59,
  ">=#" => 60,
  ">=?" => 61,
  "<=" => 62,
  "<=#" => 63,
  "<=?" => 64,
  "==" => 65,
  "==?" => 66,
  "==#" => 67,
  "=~" => 68,
  "=~?" => 69,
  "=~#" => 70,
  "!~" => 71,
  "!~?" => 72,
  "!~#" => 73,
  "!=" => 74,
  "!=?" => 75,
  "!=#" => 76,
  :IS => 77,
  :ISNOT => 78,
  "&&" => 79,
  "||" => 80,
  "?" => 81,
  "=" => 82,
  "+=" => 83,
  "-=" => 84,
  ".=" => 85,
  "," => 86,
  "(" => 87,
  ")" => 88,
  ";" => 89,
  "[" => 90,
  "]" => 91,
  "{" => 92,
  "}" => 93,
  ":" => 94,
  "===" => 95 }

racc_nt_base = 96

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "ELSEIF",
  "THEN",
  "UNLESS",
  "END",
  "WHILE",
  "UNTIL",
  "BREAK",
  "CONTINUE",
  "TRY",
  "CATCH",
  "FINALLY",
  "FOR",
  "IN",
  "DEF",
  "DEF_BANG",
  "SPLAT",
  "CALL",
  "BUILTIN_COMMAND",
  "CLASS",
  "NEW",
  "DEFM",
  "DEFM_BANG",
  "SUPER",
  "RIML_COMMAND",
  "RETURN",
  "NEWLINE",
  "NUMBER",
  "STRING_D",
  "STRING_S",
  "EX_LITERAL",
  "REGEXP",
  "TRUE",
  "FALSE",
  "LET",
  "UNLET",
  "UNLET_BANG",
  "IDENTIFIER",
  "DICT_VAL",
  "SCOPE_MODIFIER",
  "SCOPE_MODIFIER_LITERAL",
  "SPECIAL_VAR_PREFIX",
  "FINISH",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\".\"",
  "\">\"",
  "\">#\"",
  "\">?\"",
  "\"<\"",
  "\"<#\"",
  "\"<?\"",
  "\">=\"",
  "\">=#\"",
  "\">=?\"",
  "\"<=\"",
  "\"<=#\"",
  "\"<=?\"",
  "\"==\"",
  "\"==?\"",
  "\"==#\"",
  "\"=~\"",
  "\"=~?\"",
  "\"=~#\"",
  "\"!~\"",
  "\"!~?\"",
  "\"!~#\"",
  "\"!=\"",
  "\"!=?\"",
  "\"!=#\"",
  "IS",
  "ISNOT",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\"=\"",
  "\"+=\"",
  "\"-=\"",
  "\".=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\":\"",
  "\"===\"",
  "$start",
  "Root",
  "Statements",
  "Statement",
  "Terminator",
  "ExplicitCall",
  "Def",
  "Return",
  "UnletVariable",
  "ExLiteral",
  "For",
  "While",
  "Until",
  "Try",
  "ClassDefinition",
  "LoopKeyword",
  "EndScript",
  "RimlCommand",
  "MultiAssign",
  "If",
  "Unless",
  "Expression",
  "ExpressionWithoutDictLiteral",
  "Dictionary",
  "DictGetWithDotLiteral",
  "BinaryOperator",
  "Ternary",
  "Assign",
  "Super",
  "UnaryOperator",
  "DictGet",
  "ListOrDictGet",
  "AllVariableRetrieval",
  "LiteralWithoutDictLiteral",
  "Call",
  "ObjectInstantiation",
  "PossibleStringValue",
  "String",
  "Number",
  "Regexp",
  "List",
  "ScopeModifierLiteral",
  "ListLiteral",
  "ListUnpack",
  "ListItems",
  "DictionaryLiteral",
  "DictItems",
  "DictItem",
  "DictGetWithDot",
  "ListOrDictGetWithBrackets",
  "ListOrDictGetAssign",
  "SubList",
  "Scope",
  "DefCallIdentifier",
  "ArgList",
  "ArgListWithoutNothing",
  "ObjectInstantiationCall",
  "ScopeOrSID",
  "AssignExpression",
  "AssignLHS",
  "VariableRetrieval",
  "CurlyBraceName",
  "CurlyBraceVarPart",
  "FunctionType",
  "DefKeywords",
  "Block",
  "ParamList",
  "DefaultParam",
  "Returnable",
  "IfBlock",
  "Catch",
  "ElseBlock",
  "ElseifBlock" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_1(val, _values, result)
     result = Riml::Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_3(val, _values, result)
     result = Riml::Nodes.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_6(val, _values, result)
     result = Riml::Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_7(val, _values, result)
     result = Riml::Nodes.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_21(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_26(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_27(val, _values, result)
     result = Riml::DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_28(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_32(val, _values, result)
     result = Riml::WrapInParensNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_33(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_34(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 87)
  def _reduce_35(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_37(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_38(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_40(val, _values, result)
     result = Riml::WrapInParensNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_41(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_42(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_45(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_47(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_48(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_49(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_50(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_51(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_52(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_53(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_55(val, _values, result)
     result = Riml::TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_56(val, _values, result)
     result = Riml::FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 122)
  def _reduce_57(val, _values, result)
     result = Riml::NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 126)
  def _reduce_58(val, _values, result)
     result = Riml::StringNode.new(val[0], :s) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_59(val, _values, result)
     result = Riml::StringNode.new(val[0], :d) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_60(val, _values, result)
     result = Riml::StringLiteralConcatNode.new(val[0], Riml::StringNode.new(val[1], :s)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_61(val, _values, result)
     result = Riml::StringLiteralConcatNode.new(val[0], Riml::StringNode.new(val[1], :d)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_62(val, _values, result)
     result = Riml::RegexpNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_63(val, _values, result)
     result = Riml::ScopeModifierLiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_64(val, _values, result)
     result = Riml::ListNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_65(val, _values, result)
     result = Riml::ListUnpackNode.new(val[1] << val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_66(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_67(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_68(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_69(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_70(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_71(val, _values, result)
     result = Riml::DictionaryNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 165)
  def _reduce_72(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_73(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_74(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_75(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_76(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_77(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_78(val, _values, result)
     result = Riml::DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_79(val, _values, result)
     result = Riml::DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_80(val, _values, result)
     result = Riml::DictGetDotNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_81(val, _values, result)
     result = Riml::DictGetDotNode.new(Riml::WrapInParensNode.new(val[1]), val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 189)
  def _reduce_82(val, _values, result)
     result = Riml::ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 190)
  def _reduce_83(val, _values, result)
     result = Riml::ListOrDictGetNode.new(Riml::WrapInParensNode.new(val[1]), val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 194)
  def _reduce_84(val, _values, result)
     result = Riml::ListOrDictGetNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 198)
  def _reduce_85(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 199)
  def _reduce_86(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 200)
  def _reduce_87(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 201)
  def _reduce_88(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 205)
  def _reduce_89(val, _values, result)
     result = Riml::SublistNode.new([val[0], Riml::LiteralNode.new(' : '), val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 206)
  def _reduce_90(val, _values, result)
     result = Riml::SublistNode.new([val[0], Riml::LiteralNode.new(' :')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 207)
  def _reduce_91(val, _values, result)
     result = Riml::SublistNode.new([Riml::LiteralNode.new(': '), val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_92(val, _values, result)
     result = Riml::SublistNode.new([Riml::LiteralNode.new(':')]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 212)
  def _reduce_93(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_94(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 217)
  def _reduce_95(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_96(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 222)
  def _reduce_97(val, _values, result)
     result = Riml::CallNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 223)
  def _reduce_98(val, _values, result)
     result = Riml::CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 224)
  def _reduce_99(val, _values, result)
     result = Riml::CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 225)
  def _reduce_100(val, _values, result)
     result = Riml::CallNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_101(val, _values, result)
     result = Riml::CallNode.new(nil, val[0], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 227)
  def _reduce_102(val, _values, result)
     result = Riml::ExplicitCallNode.new(nil, nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 231)
  def _reduce_103(val, _values, result)
     result = Riml::CallNode.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 232)
  def _reduce_104(val, _values, result)
     result = Riml::CallNode.new(val[0], val[1], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_105(val, _values, result)
     result = Riml::RimlCommandNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_106(val, _values, result)
     result = Riml::RimlCommandNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 241)
  def _reduce_107(val, _values, result)
     result = Riml::ExplicitCallNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 242)
  def _reduce_108(val, _values, result)
     result = Riml::ExplicitCallNode.new(nil, val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_109(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 247)
  def _reduce_110(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 251)
  def _reduce_111(val, _values, result)
     val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_112(val, _values, result)
     result = Riml::SIDNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 256)
  def _reduce_113(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_114(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 261)
  def _reduce_115(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_116(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 266)
  def _reduce_117(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 267)
  def _reduce_118(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 269)
  def _reduce_119(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 270)
  def _reduce_120(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 271)
  def _reduce_121(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_122(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 276)
  def _reduce_123(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 277)
  def _reduce_124(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 278)
  def _reduce_125(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_126(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_127(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 282)
  def _reduce_128(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 284)
  def _reduce_129(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 285)
  def _reduce_130(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 286)
  def _reduce_131(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 288)
  def _reduce_132(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 289)
  def _reduce_133(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 290)
  def _reduce_134(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_135(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_136(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 294)
  def _reduce_137(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 296)
  def _reduce_138(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 297)
  def _reduce_139(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 298)
  def _reduce_140(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 300)
  def _reduce_141(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 301)
  def _reduce_142(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 302)
  def _reduce_143(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 304)
  def _reduce_144(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 305)
  def _reduce_145(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_146(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 307)
  def _reduce_147(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 308)
  def _reduce_148(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 309)
  def _reduce_149(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 311)
  def _reduce_150(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 312)
  def _reduce_151(val, _values, result)
     result = Riml::BinaryOperatorNode.new(val[1], [val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_152(val, _values, result)
     result = Riml::UnaryOperatorNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 317)
  def _reduce_153(val, _values, result)
     result = Riml::UnaryOperatorNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_154(val, _values, result)
     result = Riml::UnaryOperatorNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 323)
  def _reduce_155(val, _values, result)
     result = Riml::AssignNode.new(val[1][0], val[1][1], val[1][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 324)
  def _reduce_156(val, _values, result)
     result = Riml::AssignNode.new(val[0][0], val[0][1], val[0][2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_157(val, _values, result)
     result = Riml::MultiAssignNode.new([val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 329)
  def _reduce_158(val, _values, result)
     val[0].assigns << val[2]; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_159(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_160(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 336)
  def _reduce_161(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 337)
  def _reduce_162(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 341)
  def _reduce_163(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 342)
  def _reduce_164(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 343)
  def _reduce_165(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 344)
  def _reduce_166(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 345)
  def _reduce_167(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 350)
  def _reduce_168(val, _values, result)
     result = Riml::GetVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 351)
  def _reduce_169(val, _values, result)
     result = Riml::GetSpecialVariableNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 352)
  def _reduce_170(val, _values, result)
     result = Riml::GetVariableByScopeAndDictNameNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 356)
  def _reduce_171(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_172(val, _values, result)
     result = Riml::GetCurlyBraceNameNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 361)
  def _reduce_173(val, _values, result)
     result = Riml::UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 362)
  def _reduce_174(val, _values, result)
     result = Riml::UnletVariableNode.new('!', [ val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 363)
  def _reduce_175(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 367)
  def _reduce_176(val, _values, result)
     result = Riml::CurlyBraceVariable.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 368)
  def _reduce_177(val, _values, result)
     result = Riml::CurlyBraceVariable.new([ Riml::CurlyBracePart.new(val[0]), val[1] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 369)
  def _reduce_178(val, _values, result)
     result = val[0] << Riml::CurlyBracePart.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 370)
  def _reduce_179(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 374)
  def _reduce_180(val, _values, result)
     result = Riml::CurlyBracePart.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 375)
  def _reduce_181(val, _values, result)
     result = Riml::CurlyBracePart.new([val[1], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 376)
  def _reduce_182(val, _values, result)
     result = Riml::CurlyBracePart.new([val[1], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 382)
  def _reduce_183(val, _values, result)
     result = Riml.const_get(val[0]).new('!', val[1], val[2], [], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 383)
  def _reduce_184(val, _values, result)
     result = Riml.const_get(val[0]).new('!', val[1], val[2], val[4], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 384)
  def _reduce_185(val, _values, result)
     result = Riml.const_get(val[0]).new('!', val[1], val[2], [val[4]], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 385)
  def _reduce_186(val, _values, result)
     result = Riml.const_get(val[0]).new('!', val[1], val[2], val[4] << val[6], val[8], val[9]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 389)
  def _reduce_187(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 390)
  def _reduce_188(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 391)
  def _reduce_189(val, _values, result)
     result = "DefMethodNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 396)
  def _reduce_190(val, _values, result)
     result = Riml::GetCurlyBraceNameNode.new('', val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 397)
  def _reduce_191(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 402)
  def _reduce_192(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 403)
  def _reduce_193(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 404)
  def _reduce_194(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 408)
  def _reduce_195(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 409)
  def _reduce_196(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 410)
  def _reduce_197(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 411)
  def _reduce_198(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 412)
  def _reduce_199(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 416)
  def _reduce_200(val, _values, result)
     result = Riml::DefaultParamNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 420)
  def _reduce_201(val, _values, result)
     result = Riml::ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 421)
  def _reduce_202(val, _values, result)
     result = Riml::IfNode.new(val[3], Nodes.new([ReturnNode.new(val[1])])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 422)
  def _reduce_203(val, _values, result)
     result = Riml::UnlessNode.new(val[3], Nodes.new([ReturnNode.new(val[1])])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 426)
  def _reduce_204(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 427)
  def _reduce_205(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 431)
  def _reduce_206(val, _values, result)
     result = Riml::FinishNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 436)
  def _reduce_207(val, _values, result)
     result = Riml::IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 437)
  def _reduce_208(val, _values, result)
     result = Riml::IfNode.new(val[1], Riml::Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 438)
  def _reduce_209(val, _values, result)
     result = Riml::IfNode.new(val[2], Riml::Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 442)
  def _reduce_210(val, _values, result)
     result = Riml::UnlessNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 443)
  def _reduce_211(val, _values, result)
     result = Riml::UnlessNode.new(val[1], Riml::Nodes.new([val[3]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 444)
  def _reduce_212(val, _values, result)
     result = Riml::UnlessNode.new(val[2], Riml::Nodes.new([val[0]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 448)
  def _reduce_213(val, _values, result)
     result = Riml::TernaryOperatorNode.new([val[0], val[2], val[4]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 452)
  def _reduce_214(val, _values, result)
     result = Riml::WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 456)
  def _reduce_215(val, _values, result)
     result = Riml::BreakNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 457)
  def _reduce_216(val, _values, result)
     result = Riml::ContinueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 461)
  def _reduce_217(val, _values, result)
     result = Riml::UntilNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 465)
  def _reduce_218(val, _values, result)
     result = Riml::ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 466)
  def _reduce_219(val, _values, result)
     result = Riml::ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 467)
  def _reduce_220(val, _values, result)
     result = Riml::ForNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 471)
  def _reduce_221(val, _values, result)
     result = Riml::TryNode.new(val[1], nil, nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 472)
  def _reduce_222(val, _values, result)
     result = Riml::TryNode.new(val[1], val[2], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 473)
  def _reduce_223(val, _values, result)
     result = Riml::TryNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 477)
  def _reduce_224(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 478)
  def _reduce_225(val, _values, result)
     result = [ Riml::CatchNode.new(nil, val[1]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 479)
  def _reduce_226(val, _values, result)
     result = [ Riml::CatchNode.new(val[1], val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 480)
  def _reduce_227(val, _values, result)
     result = val[0] << Riml::CatchNode.new(nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 481)
  def _reduce_228(val, _values, result)
     result = val[0] << Riml::CatchNode.new(val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 488)
  def _reduce_229(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 489)
  def _reduce_230(val, _values, result)
     result = Riml::Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 493)
  def _reduce_231(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 494)
  def _reduce_232(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 495)
  def _reduce_233(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 496)
  def _reduce_234(val, _values, result)
     result = val[1] << val[2] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 500)
  def _reduce_235(val, _values, result)
     result = Riml::ElseNode.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 504)
  def _reduce_236(val, _values, result)
     result = Riml::Nodes.new([Riml::ElseifNode.new(val[1], val[3])]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 505)
  def _reduce_237(val, _values, result)
     result = val[0] << Riml::ElseifNode.new(val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 509)
  def _reduce_238(val, _values, result)
     result = Riml::ClassDefinitionNode.new(val[1], val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 510)
  def _reduce_239(val, _values, result)
     result = Riml::ClassDefinitionNode.new(val[1], val[2], (val[4] || ClassDefinitionNode::DEFAULT_SCOPE_MODIFIER) + val[5], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 514)
  def _reduce_240(val, _values, result)
     result = Riml::ObjectInstantiationNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 518)
  def _reduce_241(val, _values, result)
     result = Riml::SuperNode.new(val[2], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 519)
  def _reduce_242(val, _values, result)
     result = Riml::SuperNode.new([], false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 523)
  def _reduce_243(val, _values, result)
     result = Riml::ExLiteralNode.new(val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
